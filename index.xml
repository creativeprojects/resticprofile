<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>resticprofile</title><link>https://creativeprojects.github.io/resticprofile/index.html</link><description>Configuration profiles manager for restic backup</description><generator>Hugo</generator><language>en-gb</language><lastBuildDate>Sat, 05 Apr 2025 20:12:44 +0000</lastBuildDate><atom:link href="https://creativeprojects.github.io/resticprofile/index.xml" rel="self" type="application/rss+xml"/><item><title>Installation</title><link>https://creativeprojects.github.io/resticprofile/installation/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://creativeprojects.github.io/resticprofile/installation/index.html</guid><description>Pre-built binaries Linux mac OS Windows Ansible Source Upgrade Docker Shell Completion</description></item><item><title>Configuration file</title><link>https://creativeprojects.github.io/resticprofile/configuration/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://creativeprojects.github.io/resticprofile/configuration/index.html</guid><description>A configuration is a set of profiles. Each profile is in a new section that has the name of the profile. Inside each profile, you can specify different flags for each command. A command definition is in a subsection of the name of the command. ‚Äã toml yaml hcl json [profile_name] [profile_name.backup] profile_name: backup: profile_name { backup = { } } { "profile_name": { "backup": { } } } All the restic flags can be defined in a section. For most of them you just need to remove the two dashes in front.</description></item><item><title>Using resticprofile</title><link>https://creativeprojects.github.io/resticprofile/usage/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://creativeprojects.github.io/resticprofile/usage/index.html</guid><description>Here are a few examples how to run resticprofile (using the main example configuration file)
See all snapshots of your default profile:
resticprofile See all available profiles in your configuration file (and the restic commands where some flags are defined):
resticprofile profiles Profiles available (name, sections, description): root: (backup, copy, forget, retention) self: (backup, check, copy, forget, retention) src: (backup, copy, retention, snapshots) Groups available (name, profiles, description): full-backup: [root, src] Backup root &amp; src profiles (using full-backup group shown earlier)</description></item><item><title>Schedules</title><link>https://creativeprojects.github.io/resticprofile/schedules/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://creativeprojects.github.io/resticprofile/schedules/index.html</guid><description>Scheduler resticprofile manages scheduled backups using:
launchd on macOS Task Scheduler on Windows systemd on Linux and other BSDs crond as a fallback (requires crontab binary) crontab files (with or without a user column) On Unix systems (excluding macOS), resticprofile uses systemd if available, otherwise it falls back to crond.
See reference / global section for scheduler configuration options.
Each profile can be scheduled independently. Within each profile, these sections can be scheduled:</description></item><item><title>Status file</title><link>https://creativeprojects.github.io/resticprofile/status/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://creativeprojects.github.io/resticprofile/status/index.html</guid><description>If you need to escalate the result of your backup to a monitoring system, you can definitely use the run-after and run-after-fail scripting.
But sometimes we just need something simple that a monitoring system can regularly check. For that matter, resticprofile can generate a simple JSON file with the details of the latest backup/forget/check command. For example I have a Zabbix agent checking this file once a day, and so you can hook up any monitoring system that can interpret a JSON file.</description></item><item><title>Resticprofile configuration reference</title><link>https://creativeprojects.github.io/resticprofile/reference/index.html</link><pubDate>Sat, 05 Apr 2025 20:12:44 +0000</pubDate><guid>https://creativeprojects.github.io/resticprofile/reference/index.html</guid><description>Note The configuration file reference is generated from resticprofile‚Äôs data model and restic‚Äôs manual pages.
Section global Section Profile backup cache cat check copy diff dump features find forget init key key-add key-list key-passwd key-remove list ls migrate mount options prune rebuild-index recover repair repair-index repair-packs repair-snapshots restore retention rewrite snapshots stats tag unlock Nested Sections ScheduleBaseConfig ScheduleConfig SendMonitoringHeader SendMonitoringSection StreamErrorSection Section Groups Value types JSON Schema</description></item><item><title>Contributions</title><link>https://creativeprojects.github.io/resticprofile/contributions/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://creativeprojects.github.io/resticprofile/contributions/index.html</guid><description>Please share your resticprofile recipes, fancy configuration files, or tips and tricks.
I have created a contributions section for that matter.
shell completion export status to grafana send email on systemd timer error get backup status information in zabbix scheduling inside a docker container backup stats in InfluxDB via Telegraf use a protected folder for configuration on Windows</description></item><item><title>Release Notes</title><link>https://creativeprojects.github.io/resticprofile/changelog/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://creativeprojects.github.io/resticprofile/changelog/index.html</guid><description>v0.30.0 (2025-04-04) üå± Spring release üå∏ This release introduces features and fixes for profile scheduling.
‚ö†Ô∏è Breaking change Until this release, the user scheduling permission was broken. With systemd or the default macOS scheduler, the permission functioned as user_logged_on, running the profile only when the user was logged in.
This issue is now fixed for new schedules.
To update existing schedules, run unschedule and then schedule again.
For systemd, resticprofile requires root privileges (via sudo) to schedule with user permission, as it now uses a system unit running as the user.</description></item></channel></rss>