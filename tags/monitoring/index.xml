<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Monitoring :: Tag :: resticprofile</title><link>https://creativeprojects.github.io/resticprofile/tags/monitoring/index.html</link><description/><generator>Hugo</generator><language>en-gb</language><atom:link href="https://creativeprojects.github.io/resticprofile/tags/monitoring/index.xml" rel="self" type="application/rss+xml"/><item><title>Status file</title><link>https://creativeprojects.github.io/resticprofile/monitoring/status/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://creativeprojects.github.io/resticprofile/monitoring/status/index.html</guid><description>If you need to send your backup results to a monitoring system, use the run-after and run-after-fail scripts.
For simpler needs, resticprofile can generate a JSON file with details of the latest backup, forget, or check command. For example, I use a Zabbix agent to check this file daily. Any monitoring system that reads JSON files can be integrated.
To enable this, add the status file location as a parameter in your profile.</description></item><item><title>Prometheus</title><link>https://creativeprojects.github.io/resticprofile/monitoring/prometheus/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://creativeprojects.github.io/resticprofile/monitoring/prometheus/index.html</guid><description>Resticprofile can generate a Prometheus file or send the report to a Pushgateway. Currently, only the backup command generates a report. Below is a configuration example for generating a file and sending it to a Pushgateway:
​ toml yaml hcl json version = "1" [root] prometheus-save-to-file = "root.prom" prometheus-push = "http://localhost:9091/" [root.backup] extended-status = true no-error-on-warning = true source = [ "/" ] version: "1" root: prometheus-save-to-file: "root.prom" prometheus-push: "http://localhost:9091/" backup: extended-status: true no-error-on-warning: true source: - / "root" = { "prometheus-save-to-file" = "root.prom" "prometheus-push" = "http://localhost:9091/" "backup" = { "extended-status" = true "no-error-on-warning" = true "source" = ["/"] } } { "version": "1", "root": { "prometheus-save-to-file": "root.prom", "prometheus-push": "http://localhost:9091/", "backup": { "extended-status": true, "no-error-on-warning": true, "source": [ "/" ] } } } Note Set extended-status to true to access all available metrics. For details, see Extended status.</description></item><item><title>Command Hooks</title><link>https://creativeprojects.github.io/resticprofile/configuration/run_hooks/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://creativeprojects.github.io/resticprofile/configuration/run_hooks/index.html</guid><description>Run commands before, after success or after failure resticprofile has 2 places where you can run commands around restic:
commands that will run before and after every restic command (snapshots, backup, check, forget, prune, mount, etc.). These are placed at the root of each profile and are always considered. commands that will only run before and after specific restic commands. These are placed in supported sections of your profiles (currently supported are backup, copy, dump, find, ls, mount, restore, snapshots, stats and tag). Here’s an example of all the external commands that you can run during the execution of a profile:</description></item><item><title>HTTP Hooks</title><link>https://creativeprojects.github.io/resticprofile/configuration/http_hooks/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://creativeprojects.github.io/resticprofile/configuration/http_hooks/index.html</guid><description>Send HTTP messages before and after a job As well as being able to run shell commands, you can now send HTTP messages before, after (success or failure) running a restic command.
The sections that allow sending HTTP hooks are:
backup copy check forget prune Tip You might notice that’s the same sections that can also be scheduled
Each of these commands can send 4 different types of hooks:</description></item></channel></rss>