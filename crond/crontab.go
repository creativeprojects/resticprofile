package crond

import (
	"fmt"
	"io"
	"regexp"
	"strings"
)

const (
	startMarker = "### this content was generated by resticprofile, please leave this line intact ###\n"
	endMarker   = "### end of resticprofile content, please leave this line intact ###\n"
)

type Crontab struct {
	file, charset string
	entries       []Entry
}

func NewCrontab(entries []Entry) *Crontab {
	return &Crontab{
		entries: entries,
	}
}

// SetFile toggles whether to read & write a crontab file instead of using CrontabBinary
func (c *Crontab) SetFile(file string) {
	c.file = file
}

// Update crontab entries:
//
// - If addEntries is set to true, it will delete and add all new entries
//
// - If addEntries is set to false, it will only delete the matching entries
//
// Return values are the number of entries deleted, and an error if any
func (c *Crontab) Update(source string, addEntries bool, w io.StringWriter) (int, error) {
	var err error
	var deleted int

	before, crontab, after, sectionFound := extractOwnSection(source)

	if sectionFound && len(c.entries) > 0 {
		for _, entry := range c.entries {
			var found bool
			crontab, found, err = deleteLine(crontab, entry)
			if err != nil {
				return deleted, err
			}
			if found {
				deleted++
			}
		}
	}

	_, err = w.WriteString(before)
	if err != nil {
		return deleted, err
	}

	if !sectionFound {
		// add a new line at the end of the file before adding our stuff
		_, err = w.WriteString("\n")
		if err != nil {
			return deleted, err
		}
	}

	_, err = w.WriteString(startMarker)
	if err != nil {
		return deleted, err
	}

	if sectionFound {
		_, err = w.WriteString(crontab)
		if err != nil {
			return deleted, err
		}
	}

	if addEntries {
		err = c.Generate(w)
		if err != nil {
			return deleted, err
		}
	}

	_, err = w.WriteString(endMarker)
	if err != nil {
		return deleted, err
	}

	if sectionFound {
		_, err = w.WriteString(after)
		if err != nil {
			return deleted, err
		}
	}
	return deleted, nil
}

func (c *Crontab) Generate(w io.StringWriter) error {
	var err error
	if len(c.entries) > 0 {
		for _, entry := range c.entries {
			err = entry.Generate(w)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (c *Crontab) LoadCurrent() (content string, err error) {
	content, c.charset, err = loadCrontab(c.file)
	if err == nil {
		content = cleanupCrontab(content)
	}
	return
}

func (c *Crontab) Rewrite() error {
	crontab, err := c.LoadCurrent()
	if err != nil {
		return err
	}

	buffer := new(strings.Builder)
	_, err = c.Update(crontab, true, buffer)
	if err != nil {
		return err
	}

	return saveCrontab(c.file, buffer.String(), c.charset)
}

func (c *Crontab) Remove() (int, error) {
	crontab, err := c.LoadCurrent()
	if err != nil {
		return 0, err
	}

	buffer := new(strings.Builder)
	num, err := c.Update(crontab, false, buffer)
	if err == nil {
		err = saveCrontab(c.file, buffer.String(), c.charset)
	}
	return num, err
}

func cleanupCrontab(crontab string) string {
	// this pattern detects if a header has been added to the output of "crontab -l"
	pattern := regexp.MustCompile(`^# DO NOT EDIT THIS FILE[^\n]*\n#[^\n]*\n#[^\n]*\n`)
	// and removes it if found
	return pattern.ReplaceAllString(crontab, "")
}

// extractOwnSection returns before our section, inside, and after if found.
//
// - It is not returning both start and end markers.
//
// - If not found, it returns the file content in the first string
func extractOwnSection(crontab string) (string, string, string, bool) {
	start := strings.Index(crontab, startMarker)
	end := strings.Index(crontab, endMarker)
	if start == -1 || end == -1 {
		return crontab, "", "", false
	}
	return crontab[:start], crontab[start+len(startMarker) : end], crontab[end+len(endMarker):], true
}

// deleteLine scans crontab for a line with the same config file, profile name and command name,
// and removes it from the output. It returns true when at least one corresponding line was found.
func deleteLine(crontab string, entry Entry) (string, bool, error) {
	// should match a line like:
	// 00,15,30,45 * * * *	/home/resticprofile --no-ansi --config config.yaml --name profile --log backup.log backup
	// or a line like:
	// 00,15,30,45 * * * *	/home/resticprofile --no-ansi --config config.yaml run-schedule backup@profile
	legacy := fmt.Sprintf(`--name %s[^\n]* %s`,
		regexp.QuoteMeta(entry.profileName),
		regexp.QuoteMeta(entry.commandName),
	)
	runSchedule := fmt.Sprintf(`run-schedule %s@%s`,
		regexp.QuoteMeta(entry.commandName),
		regexp.QuoteMeta(entry.profileName),
	)
	search := fmt.Sprintf(`(?m)^[^#][^\n]+resticprofile[^\n]+--config %s (%s|%s)\n`,
		regexp.QuoteMeta(entry.configFile), legacy, runSchedule)

	pattern, err := regexp.Compile(search)
	if err != nil {
		return crontab, false, err
	}
	if pattern.MatchString(crontab) {
		// al least one was found
		return pattern.ReplaceAllString(crontab, ""), true, nil
	}
	return crontab, false, nil
}
