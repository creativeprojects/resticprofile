name: Build

on:
  push:
    branches: [ master ]
    paths-ignore:
      - 'docs/**'

  pull_request:
    types: [opened, synchronize, reopened]
    paths-ignore:
      - 'docs/**'

jobs:

  build:
    name: Build and test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        go_version: ['1.24']
        os: [ubuntu-latest, windows-latest, macos-latest]
    env:
      OS: ${{ matrix.os }}
      GO: ${{ matrix.go_version }}

    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4

      - name: Set up Go ${{ matrix.go_version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go_version }}
          check-latest: true
          cache: true

      - name: Set up Node.js LTS for running JSON schema tests (using ajv)
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.64.8
          args: --timeout=30m

      - name: Test
        run: make test-ci
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build
        run: make build

      - name: Code coverage with codecov
        uses: codecov/codecov-action@v4
        with:
          env_vars: OS,GO
          file: ./coverage.out
          flags: unittests
          fail_ci_if_error: false
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report-${{ matrix.os }}
          path: coverage.out

  test-ssh:
    name: Test SSH connections
    runs-on: ubuntu-latest

    services:
      openssh-server:
        image: lscr.io/linuxserver/openssh-server:latest
        options: --name openssh-server
        ports:
          - 2222:2222
        volumes:
          - config:/config
        env:
          PUID: 1001 # runner user ID
          PGID: 100  # users group ID
          TZ: Etc/UTC
          SUDO_ACCESS: false
          PASSWORD_ACCESS: false
          USER_NAME: resticprofile
          LOG_STDOUT: true

    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.24

      - name: Setup OpenSSH server
        env:
          SSH_TESTS_TMPDIR: ${{ runner.temp }}/resticprofile-ssh-tests
        run: |
          id
          mkdir -p ${SSH_TESTS_TMPDIR}
          ssh-keygen -t rsa -b 2048 -f ${SSH_TESTS_TMPDIR}/id_rsa -N "" -C "resticprofile@localhost"
          ssh-keyscan -p 2222 -H localhost > ${SSH_TESTS_TMPDIR}/known_hosts
          cat ${SSH_TESTS_TMPDIR}/known_hosts
          
      - name: Tweak OpenSSH server configuration
        uses: docker://docker
        with:
          args: echo "Match User resticprofile\n    AllowTcpForwarding yes\n" | docker exec -i openssh-server sh -c "tee -a /config/sshd/sshd_config"

      - name: Insert public key into authorized_keys
        uses: docker://docker
        with:
          args: cat ${SSH_TESTS_TMPDIR}/id_rsa.pub | docker exec -i openssh-server sh -c "tee -a /config/.ssh/authorized_keys"

      - name: Restart with the new configuration
        uses: docker://docker
        with:
          args: docker restart openssh-server

      - name: Test
        env:
          SSH_TESTS_TMPDIR: ${{ runner.temp }}/resticprofile-ssh-tests
        run: go test -v -tags ssh ./ssh

  sonarCloudTrigger:
    needs: build
    name: SonarCloud Trigger
    runs-on: ubuntu-latest
    steps:
      - name: Clone Repository
        uses: actions/checkout@v4
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0

      - name: Download code coverage results
        uses: actions/download-artifact@v4

      - name: Display structure of downloaded files
        run: ls -R

      - name: Analyze with SonarCloud
        uses: SonarSource/sonarqube-scan-action@v5
        if: ${{ env.SONAR_TOKEN != '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
