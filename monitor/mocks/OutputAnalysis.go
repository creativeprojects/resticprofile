// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// OutputAnalysis is an autogenerated mock type for the OutputAnalysis type
type OutputAnalysis struct {
	mock.Mock
}

type OutputAnalysis_Expecter struct {
	mock *mock.Mock
}

func (_m *OutputAnalysis) EXPECT() *OutputAnalysis_Expecter {
	return &OutputAnalysis_Expecter{mock: &_m.Mock}
}

// ContainsRemoteLockFailure provides a mock function with given fields:
func (_m *OutputAnalysis) ContainsRemoteLockFailure() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ContainsRemoteLockFailure")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// OutputAnalysis_ContainsRemoteLockFailure_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainsRemoteLockFailure'
type OutputAnalysis_ContainsRemoteLockFailure_Call struct {
	*mock.Call
}

// ContainsRemoteLockFailure is a helper method to define mock.On call
func (_e *OutputAnalysis_Expecter) ContainsRemoteLockFailure() *OutputAnalysis_ContainsRemoteLockFailure_Call {
	return &OutputAnalysis_ContainsRemoteLockFailure_Call{Call: _e.mock.On("ContainsRemoteLockFailure")}
}

func (_c *OutputAnalysis_ContainsRemoteLockFailure_Call) Run(run func()) *OutputAnalysis_ContainsRemoteLockFailure_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *OutputAnalysis_ContainsRemoteLockFailure_Call) Return(_a0 bool) *OutputAnalysis_ContainsRemoteLockFailure_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OutputAnalysis_ContainsRemoteLockFailure_Call) RunAndReturn(run func() bool) *OutputAnalysis_ContainsRemoteLockFailure_Call {
	_c.Call.Return(run)
	return _c
}

// GetRemoteLockedBy provides a mock function with given fields:
func (_m *OutputAnalysis) GetRemoteLockedBy() (string, bool) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRemoteLockedBy")
	}

	var r0 string
	var r1 bool
	if rf, ok := ret.Get(0).(func() (string, bool)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// OutputAnalysis_GetRemoteLockedBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRemoteLockedBy'
type OutputAnalysis_GetRemoteLockedBy_Call struct {
	*mock.Call
}

// GetRemoteLockedBy is a helper method to define mock.On call
func (_e *OutputAnalysis_Expecter) GetRemoteLockedBy() *OutputAnalysis_GetRemoteLockedBy_Call {
	return &OutputAnalysis_GetRemoteLockedBy_Call{Call: _e.mock.On("GetRemoteLockedBy")}
}

func (_c *OutputAnalysis_GetRemoteLockedBy_Call) Run(run func()) *OutputAnalysis_GetRemoteLockedBy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *OutputAnalysis_GetRemoteLockedBy_Call) Return(_a0 string, _a1 bool) *OutputAnalysis_GetRemoteLockedBy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OutputAnalysis_GetRemoteLockedBy_Call) RunAndReturn(run func() (string, bool)) *OutputAnalysis_GetRemoteLockedBy_Call {
	_c.Call.Return(run)
	return _c
}

// GetRemoteLockedMaxWait provides a mock function with given fields:
func (_m *OutputAnalysis) GetRemoteLockedMaxWait() (time.Duration, bool) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRemoteLockedMaxWait")
	}

	var r0 time.Duration
	var r1 bool
	if rf, ok := ret.Get(0).(func() (time.Duration, bool)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// OutputAnalysis_GetRemoteLockedMaxWait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRemoteLockedMaxWait'
type OutputAnalysis_GetRemoteLockedMaxWait_Call struct {
	*mock.Call
}

// GetRemoteLockedMaxWait is a helper method to define mock.On call
func (_e *OutputAnalysis_Expecter) GetRemoteLockedMaxWait() *OutputAnalysis_GetRemoteLockedMaxWait_Call {
	return &OutputAnalysis_GetRemoteLockedMaxWait_Call{Call: _e.mock.On("GetRemoteLockedMaxWait")}
}

func (_c *OutputAnalysis_GetRemoteLockedMaxWait_Call) Run(run func()) *OutputAnalysis_GetRemoteLockedMaxWait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *OutputAnalysis_GetRemoteLockedMaxWait_Call) Return(_a0 time.Duration, _a1 bool) *OutputAnalysis_GetRemoteLockedMaxWait_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OutputAnalysis_GetRemoteLockedMaxWait_Call) RunAndReturn(run func() (time.Duration, bool)) *OutputAnalysis_GetRemoteLockedMaxWait_Call {
	_c.Call.Return(run)
	return _c
}

// GetRemoteLockedSince provides a mock function with given fields:
func (_m *OutputAnalysis) GetRemoteLockedSince() (time.Duration, bool) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRemoteLockedSince")
	}

	var r0 time.Duration
	var r1 bool
	if rf, ok := ret.Get(0).(func() (time.Duration, bool)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// OutputAnalysis_GetRemoteLockedSince_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRemoteLockedSince'
type OutputAnalysis_GetRemoteLockedSince_Call struct {
	*mock.Call
}

// GetRemoteLockedSince is a helper method to define mock.On call
func (_e *OutputAnalysis_Expecter) GetRemoteLockedSince() *OutputAnalysis_GetRemoteLockedSince_Call {
	return &OutputAnalysis_GetRemoteLockedSince_Call{Call: _e.mock.On("GetRemoteLockedSince")}
}

func (_c *OutputAnalysis_GetRemoteLockedSince_Call) Run(run func()) *OutputAnalysis_GetRemoteLockedSince_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *OutputAnalysis_GetRemoteLockedSince_Call) Return(_a0 time.Duration, _a1 bool) *OutputAnalysis_GetRemoteLockedSince_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OutputAnalysis_GetRemoteLockedSince_Call) RunAndReturn(run func() (time.Duration, bool)) *OutputAnalysis_GetRemoteLockedSince_Call {
	_c.Call.Return(run)
	return _c
}

// NewOutputAnalysis creates a new instance of OutputAnalysis. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOutputAnalysis(t interface {
	mock.TestingT
	Cleanup(func())
}) *OutputAnalysis {
	mock := &OutputAnalysis{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
