var relearn_searchindex = [
  {
    "breadcrumb": "resticprofile \u003e  Reference \u003e  Section Profile",
    "content": "Section profile.backup This section configures restic command backup . Information on command and flags is copied from the restic manual pages.\nThe “backup” command creates a new snapshot and saves the files and directories given as the arguments.\nFlags used by resticprofile only: Name Type Default Notes check-after true / false false Check the repository after the backup command succeeded check-before true / false false Check the repository before starting the backup command no-error-on-warning true / false false Do not fail the backup when some files could not be read run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands schedule one or more strings OR nested ScheduleConfig Configures the scheduled execution of this profile section. Can be times in systemd timer format or a config structure. Examples: hourly, daily, weekly, monthly, 10:00,14:00,18:00,22:00, Wed,Fri 17:48, *-*-15 02:45, Mon..Fri 00:30 schedule-after-network-online true / false Don’t start this schedule when the network is offline (supported in “systemd”) schedule-capture-environment one or more strings RESTIC_* Set names (or glob expressions) of environment variables to capture during schedule creation. The captured environment is applied prior to “profile.env” when running the schedule. Whether capturing is supported depends on the type of scheduler being used (supported in “systemd” and “launchd”) schedule-ignore-on-battery true / false false Don’t start this schedule when running on battery schedule-ignore-on-battery-less-than integer Don’t start this schedule when running on battery and the state of charge is less than this percentage. Examples: 20, 33, 50, 75 schedule-lock-mode string default Specify how locks are used when running on schedule - see schedules/configuration/. Is one of default, fail, ignore schedule-lock-wait integer OR duration Set the maximum time to wait for acquiring locks when running on schedule. Examples: 150s, 15m, 30m, 45m, 1h, 2h30m schedule-log string Redirect the output into a log file or to syslog when running on schedule. Examples: /resticprofile.log, syslog-tcp://syslog-server:514, syslog:server, syslog: schedule-permission string auto Specify whether the schedule runs with system or user privileges - see schedules/configuration/. Is one of auto, system, user, user_logged_on schedule-priority string standard Set the priority at which the schedule is run. Is one of background, standard send-after one or more nested SendMonitoringSection Send HTTP request(s) after a successful restic command send-after-fail one or more nested SendMonitoringSection Send HTTP request(s) after failed restic or shell commands send-before one or more nested SendMonitoringSection Send HTTP request(s) before a restic command send-finally one or more nested SendMonitoringSection Send HTTP request(s) always, after all other commands source one or more strings The paths to backup. Examples: /opt/, /home/user/, C:\\Users\\User\\Documents source-base string The base path to resolve relative backup paths against. Defaults to current directory if unset or empty (see also “base-dir” in profile). Examples: /, $PWD, C:\\, %cd% source-relative true / false false Enable backup with relative source paths. This will change the working directory of the “restic backup” command to “source-base”, and will not expand “source” to an absolute path stdin-command one or more strings Shell command(s) that generate content to redirect into the stdin of restic. When set, the flag “stdin” is always set to “true” Flags passed to the restic command line: Name Type Default Notes dry-run true / false false do not upload or write any data, just show what would be done. restic \u003e= 0.13.0 exclude one or more strings exclude a pattern exclude-caches true / false false excludes cache directories that are marked with a CACHEDIR.TAG file. See https://bford.info/cachedir/ for the Cache Directory Tagging Standard exclude-cloud-files true / false false excludes online-only cloud files (such as OneDrive Files On-Demand). restic \u003e= 0.18.0 . Available only for windows exclude-file one or more strings read exclude patterns from a file exclude-if-present one or more strings takes filename[:header], exclude contents of directories containing filename (except filename itself) if header of that file is as provided exclude-larger-than string \"\" max size of the files to be backed up (allowed suffixes: k/K, m/M, g/G, t/T). restic \u003e= 0.10.0 extended-status true / false false set output mode to JSON for commands that support it files-from one or more strings read the files to backup from file (can be combined with file args) files-from-raw one or more strings read the files to backup from file (can be combined with file args). restic \u003e= 0.12.0 files-from-verbatim one or more strings read the files to backup from file (can be combined with file args). restic \u003e= 0.12.0 force true / false false force re-reading the source files/directories (overrides the “parent” flag) group-by string host,paths group snapshots by host, paths and/or tags, separated by comma (disable grouping with ‘’). restic \u003e= 0.16.0 host true / false OR hostname \"\" set the hostname for the snapshot manually (default: $RESTIC_HOST). To prevent an expensive rescan use the “parent” flag. Boolean true is replaced with the hostname of the system. Defaults to true for config version 2 in “backup”. Examples: true, false, \"host\" iexclude one or more strings same as –exclude pattern but ignores the casing of filenames. restic \u003e= 0.10.0 iexclude-file one or more strings same as –exclude-file but ignores casing of filenames in patterns. restic \u003e= 0.10.0 ignore-ctime true / false false ignore ctime changes when checking for modified files. restic \u003e= 0.12.0 ignore-inode true / false false ignore inode number and ctime changes when checking for modified files. restic \u003e= 0.10.0 no-scan true / false false do not run scanner to estimate size of backup. restic \u003e= 0.15.0 one-file-system true / false false exclude other file systems, don’t cross filesystem boundaries and subvolumes parent string \"\" use this parent snapshot (default: latest snapshot in the group determined by –group-by and not newer than the timestamp determined by –time) read-concurrency integer 0 read n files concurrently (default: $RESTIC_READ_CONCURRENCY or 2). restic \u003e= 0.15.0 skip-if-unchanged true / false false skip snapshot creation if identical to parent snapshot. restic \u003e= 0.17.0 stdin true / false false read backup from stdin stdin-filename string \"stdin\" filename to use when reading from stdin stdin-from-command true / false false interpret arguments as command to execute and store its stdout. restic \u003e= 0.17.0 tag true / false OR one or more strings add tags for the new snapshot in the format tag[,tag,…]. Boolean true is unsupported in section “backup”. Examples: false, \"tag\" time string \"\" time of the backup (ex. ‘2012-11-01 22:08:41’) (default: now) use-fs-snapshot true / false false use filesystem snapshot where possible (currently only Windows VSS). restic \u003e= 0.12.0 . Available only for windows with-atime true / false false store the atime for all files and directories Tip Flags declared for the restic command line in section profile can be overridden in this section.",
    "description": "Section profile.backup This section configures restic command backup . Information on command and flags is copied from the restic manual pages.\nThe “backup” command creates a new snapshot and saves the files and directories given as the arguments.\nFlags used by resticprofile only: Name Type Default Notes check-after true / false false Check the repository after the backup command succeeded check-before true / false false Check the repository before starting the backup command no-error-on-warning true / false false Do not fail the backup when some files could not be read run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands schedule one or more strings OR nested ScheduleConfig Configures the scheduled execution of this profile section. Can be times in systemd timer format or a config structure. Examples: hourly, daily, weekly, monthly, 10:00,14:00,18:00,22:00, Wed,Fri 17:48, *-*-15 02:45, Mon..Fri 00:30 schedule-after-network-online true / false Don’t start this schedule when the network is offline (supported in “systemd”) schedule-capture-environment one or more strings RESTIC_* Set names (or glob expressions) of environment variables to capture during schedule creation. The captured environment is applied prior to “profile.env” when running the schedule. Whether capturing is supported depends on the type of scheduler being used (supported in “systemd” and “launchd”) schedule-ignore-on-battery true / false false Don’t start this schedule when running on battery schedule-ignore-on-battery-less-than integer Don’t start this schedule when running on battery and the state of charge is less than this percentage. Examples: 20, 33, 50, 75 schedule-lock-mode string default Specify how locks are used when running on schedule - see schedules/configuration/. Is one of default, fail, ignore schedule-lock-wait integer OR duration Set the maximum time to wait for acquiring locks when running on schedule. Examples: 150s, 15m, 30m, 45m, 1h, 2h30m schedule-log string Redirect the output into a log file or to syslog when running on schedule. Examples: /resticprofile.log, syslog-tcp://syslog-server:514, syslog:server, syslog: schedule-permission string auto Specify whether the schedule runs with system or user privileges - see schedules/configuration/. Is one of auto, system, user, user_logged_on schedule-priority string standard Set the priority at which the schedule is run. Is one of background, standard send-after one or more nested SendMonitoringSection Send HTTP request(s) after a successful restic command send-after-fail one or more nested SendMonitoringSection Send HTTP request(s) after failed restic or shell commands send-before one or more nested SendMonitoringSection Send HTTP request(s) before a restic command send-finally one or more nested SendMonitoringSection Send HTTP request(s) always, after all other commands source one or more strings The paths to backup. Examples: /opt/, /home/user/, C:\\Users\\User\\Documents source-base string The base path to resolve relative backup paths against. Defaults to current directory if unset or empty (see also “base-dir” in profile). Examples: /, $PWD, C:\\, %cd% source-relative true / false false Enable backup with relative source paths. This will change the working directory of the “restic backup” command to “source-base”, and will not expand “source” to an absolute path stdin-command one or more strings Shell command(s) that generate content to redirect into the stdin of restic. When set, the flag “stdin” is always set to “true” Flags passed to the restic command line: Name Type Default Notes dry-run true / false false do not upload or write any data, just show what would be done. restic \u003e= 0.13.0 exclude one or more strings exclude a pattern exclude-caches true / false false excludes cache directories that are marked with a CACHEDIR.TAG file. See https://bford.info/cachedir/ for the Cache Directory Tagging Standard exclude-cloud-files true / false false excludes online-only cloud files (such as OneDrive Files On-Demand). restic \u003e= 0.18.0 . Available only for windows exclude-file one or more strings read exclude patterns from a file exclude-if-present one or more strings takes filename[:header], exclude contents of directories containing filename (except filename itself) if header of that file is as provided exclude-larger-than string \"\" max size of the files to be backed up (allowed suffixes: k/K, m/M, g/G, t/T). restic \u003e= 0.10.0 extended-status true / false false set output mode to JSON for commands that support it files-from one or more strings read the files to backup from file (can be combined with file args) files-from-raw one or more strings read the files to backup from file (can be combined with file args). restic \u003e= 0.12.0 files-from-verbatim one or more strings read the files to backup from file (can be combined with file args). restic \u003e= 0.12.0 force true / false false force re-reading the source files/directories (overrides the “parent” flag) group-by string host,paths group snapshots by host, paths and/or tags, separated by comma (disable grouping with ‘’). restic \u003e= 0.16.0 host true / false OR hostname \"\" set the hostname for the snapshot manually (default: $RESTIC_HOST). To prevent an expensive rescan use the “parent” flag. Boolean true is replaced with the hostname of the system. Defaults to true for config version 2 in “backup”. Examples: true, false, \"host\" iexclude one or more strings same as –exclude pattern but ignores the casing of filenames. restic \u003e= 0.10.0 iexclude-file one or more strings same as –exclude-file but ignores casing of filenames in patterns. restic \u003e= 0.10.0 ignore-ctime true / false false ignore ctime changes when checking for modified files. restic \u003e= 0.12.0 ignore-inode true / false false ignore inode number and ctime changes when checking for modified files. restic \u003e= 0.10.0 no-scan true / false false do not run scanner to estimate size of backup. restic \u003e= 0.15.0 one-file-system true / false false exclude other file systems, don’t cross filesystem boundaries and subvolumes parent string \"\" use this parent snapshot (default: latest snapshot in the group determined by –group-by and not newer than the timestamp determined by –time) read-concurrency integer 0 read n files concurrently (default: $RESTIC_READ_CONCURRENCY or 2). restic \u003e= 0.15.0 skip-if-unchanged true / false false skip snapshot creation if identical to parent snapshot. restic \u003e= 0.17.0 stdin true / false false read backup from stdin stdin-filename string \"stdin\" filename to use when reading from stdin stdin-from-command true / false false interpret arguments as command to execute and store its stdout. restic \u003e= 0.17.0 tag true / false OR one or more strings add tags for the new snapshot in the format tag[,tag,…]. Boolean true is unsupported in section “backup”. Examples: false, \"tag\" time string \"\" time of the backup (ex. ‘2012-11-01 22:08:41’) (default: now) use-fs-snapshot true / false false use filesystem snapshot where possible (currently only Windows VSS). restic \u003e= 0.12.0 . Available only for windows with-atime true / false false store the atime for all files and directories Tip Flags declared for the restic command line in section profile can be overridden in this section.",
    "tags": [],
    "title": "backup",
    "uri": "/reference/profile/backup/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Reference \u003e  Nested Sections",
    "content": "Nested ScheduleBaseConfig Name Type Default Notes after-network-online true / false Don’t start this schedule when the network is offline (supported in “systemd”) capture-environment one or more strings RESTIC_* Set names (or glob expressions) of environment variables to capture during schedule creation. The captured environment is applied prior to “profile.env” when running the schedule. Whether capturing is supported depends on the type of scheduler being used (supported in “systemd” and “launchd”) command-output string auto Sets the destination for command output (stderr/stdout). “log” sends output to the log file (if specified), “console” sends it to the console instead. “auto” sends it to “both” if console is a terminal otherwise to “log” only - see configuration/logs/. Is one of auto, log, console, all ignore-on-battery true / false false Don’t start this schedule when running on battery ignore-on-battery-less-than integer Don’t start this schedule when running on battery and the state of charge is less than this percentage. Examples: 20, 33, 50, 75 lock-mode string default Specify how locks are used when running on schedule - see schedules/configuration/. Is one of default, fail, ignore lock-wait integer OR duration Set the maximum time to wait for acquiring locks when running on schedule. Examples: 150s, 15m, 30m, 45m, 1h, 2h30m log string Redirect the output into a log file or to syslog when running on schedule - see configuration/logs/. Examples: /resticprofile.log, syslog-tcp://syslog-server:514, syslog:server, syslog: permission string auto Specify whether the schedule runs with system or user privileges - see schedules/configuration/. Is one of auto, system, user, user_logged_on priority string standard Set the priority at which the schedule is run. Is one of background, standard systemd-drop-in-files one or more strings Files containing systemd drop-in (override) files - see schedules/systemd/",
    "description": "Nested ScheduleBaseConfig Name Type Default Notes after-network-online true / false Don’t start this schedule when the network is offline (supported in “systemd”) capture-environment one or more strings RESTIC_* Set names (or glob expressions) of environment variables to capture during schedule creation. The captured environment is applied prior to “profile.env” when running the schedule. Whether capturing is supported depends on the type of scheduler being used (supported in “systemd” and “launchd”) command-output string auto Sets the destination for command output (stderr/stdout). “log” sends output to the log file (if specified), “console” sends it to the console instead. “auto” sends it to “both” if console is a terminal otherwise to “log” only - see configuration/logs/. Is one of auto, log, console, all ignore-on-battery true / false false Don’t start this schedule when running on battery ignore-on-battery-less-than integer Don’t start this schedule when running on battery and the state of charge is less than this percentage. Examples: 20, 33, 50, 75 lock-mode string default Specify how locks are used when running on schedule - see schedules/configuration/. Is one of default, fail, ignore lock-wait integer OR duration Set the maximum time to wait for acquiring locks when running on schedule. Examples: 150s, 15m, 30m, 45m, 1h, 2h30m log string Redirect the output into a log file or to syslog when running on schedule - see configuration/logs/. Examples: /resticprofile.log, syslog-tcp://syslog-server:514, syslog:server, syslog: permission string auto Specify whether the schedule runs with system or user privileges - see schedules/configuration/. Is one of auto, system, user, user_logged_on priority string standard Set the priority at which the schedule is run. Is one of background, standard systemd-drop-in-files one or more strings Files containing systemd drop-in (override) files - see schedules/systemd/",
    "tags": [],
    "title": "ScheduleBaseConfig",
    "uri": "/reference/nested/schedulebaseconfig/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Reference",
    "content": "Section global The global section is at the root of the configuration file and contains the global settings for resticprofile.\nName Type Default Notes ca-certificates one or more strings Path to PEM encoded certificates to trust in addition to system certificates when resticprofile sends to a webhook - see configuration/http_hooks/ command-output string auto Sets the destination for command output (stderr/stdout). “log” sends output to the log file (if specified), “console” sends it to the console instead. “auto” sends it to “both” if console is a terminal otherwise to “log” only - see configuration/logs/. Is one of auto, log, console, all default-command string snapshots The restic or resticprofile command to use when no command was specified. Examples: backup, cache, cat, check, copy, diff, dump, features, find, forget, generate, init, key, key-add, key-list, key-passwd, key-remove, list, ls, migrate, mount, options, prune, rebuild-index, recover, repair, repair-index, repair-packs, repair-snapshots, restore, rewrite, self-update, snapshots, stats, tag, unlock, version group-continue-on-error true / false false Enable groups to continue with the next profile(s) instead of stopping at the first failure initialize true / false false Initialize a repository if missing ionice true / false false Enables setting the linux IO priority class and level for resticprofile and child processes (only on linux OS) ionice-class integer 2 Sets the linux “ionice-class” (I/O scheduling class) to apply when “ionice” is enabled (1=realtime, 2=best-effort, 3=idle). Must be \u003e= 1 and \u003c= 3 ionice-level integer 0 Sets the linux “ionice-level” (I/O priority within the scheduling class) to apply when “ionice” is enabled (0=highest priority, 7=lowest priority). Must be \u003e= 0 and \u003c= 7 legacy-arguments true / false false Legacy, broken arguments mode of resticprofile before version 0.15 log string Sets the default log destination to be used if not specified in “–log” or “schedule-log” - see configuration/logs/. Examples: /resticprofile.log, syslog-tcp://syslog-server:514, syslog:server, syslog: min-memory integer 100 Minimum available memory (in MB) required to run any commands - see usage/memory/ nice integer 0 Sets the unix “nice” value for resticprofile and child processes (on any OS). Must be \u003e= -20 and \u003c= 19 prevent-auto-repository-file true / false false Prevents using a repository file for repository definitions containing a password prevent-sleep true / false false Prevent the system from sleeping while running commands - see configuration/sleep/ priority string normal Sets process priority class for resticprofile and child processes (on any OS). Is one of idle, background, low, normal, high, highest restic-arguments-filter true / false true Remove unknown flags instead of passing all configured flags to restic restic-binary string Full path of the restic executable (detected if not set) restic-lock-retry-after integer OR duration 1m Time to wait before trying to get a lock on a restic repository - see usage/locks/ restic-stale-lock-age integer OR duration 1h The age an unused lock on a restic repository must have at least before resticprofile attempts to unlock - see usage/locks/ restic-version string Sets the restic version (detected if not set) schedule-defaults nested ScheduleBaseConfig Sets defaults for all schedules scheduler string auto Selects the scheduler. Blank or “auto” uses the default scheduler of your operating system: “launchd”, “systemd”, “taskscheduler” or “crond” (as fallback). Alternatively you can set “crond” for cron compatible schedulers supporting the crontab executable API or “crontab:[user:]file” to write into a crontab file directly. The need for a user is detected if missing and can be set to a name, “-” (no user) or “*” (current user). Examples: auto, launchd, systemd, taskscheduler, crond, crond:/usr/bin/crontab, crontab:*:/etc/cron.d/resticprofile send-timeout integer OR duration 30s Timeout when sending messages to a webhook - see configuration/http_hooks/. Examples: 15s, 30s, 2m30s shell one or more strings auto The shell that is used to run commands (default is OS specific). Examples: sh, bash, pwsh, powershell, cmd systemd-timer-template string File containing the go template to generate a systemd timer - see schedules/systemd/ systemd-unit-template string File containing the go template to generate a systemd unit - see schedules/systemd/",
    "description": "Section global The global section is at the root of the configuration file and contains the global settings for resticprofile.\nName Type Default Notes ca-certificates one or more strings Path to PEM encoded certificates to trust in addition to system certificates when resticprofile sends to a webhook - see configuration/http_hooks/ command-output string auto Sets the destination for command output (stderr/stdout). “log” sends output to the log file (if specified), “console” sends it to the console instead. “auto” sends it to “both” if console is a terminal otherwise to “log” only - see configuration/logs/. Is one of auto, log, console, all default-command string snapshots The restic or resticprofile command to use when no command was specified. Examples: backup, cache, cat, check, copy, diff, dump, features, find, forget, generate, init, key, key-add, key-list, key-passwd, key-remove, list, ls, migrate, mount, options, prune, rebuild-index, recover, repair, repair-index, repair-packs, repair-snapshots, restore, rewrite, self-update, snapshots, stats, tag, unlock, version group-continue-on-error true / false false Enable groups to continue with the next profile(s) instead of stopping at the first failure initialize true / false false Initialize a repository if missing ionice true / false false Enables setting the linux IO priority class and level for resticprofile and child processes (only on linux OS) ionice-class integer 2 Sets the linux “ionice-class” (I/O scheduling class) to apply when “ionice” is enabled (1=realtime, 2=best-effort, 3=idle). Must be \u003e= 1 and \u003c= 3 ionice-level integer 0 Sets the linux “ionice-level” (I/O priority within the scheduling class) to apply when “ionice” is enabled (0=highest priority, 7=lowest priority). Must be \u003e= 0 and \u003c= 7 legacy-arguments true / false false Legacy, broken arguments mode of resticprofile before version 0.15 log string Sets the default log destination to be used if not specified in “–log” or “schedule-log” - see configuration/logs/. Examples: /resticprofile.log, syslog-tcp://syslog-server:514, syslog:server, syslog: min-memory integer 100 Minimum available memory (in MB) required to run any commands - see usage/memory/ nice integer 0 Sets the unix “nice” value for resticprofile and child processes (on any OS). Must be \u003e= -20 and \u003c= 19 prevent-auto-repository-file true / false false Prevents using a repository file for repository definitions containing a password prevent-sleep true / false false Prevent the system from sleeping while running commands - see configuration/sleep/ priority string normal Sets process priority class for resticprofile and child processes (on any OS). Is one of idle, background, low, normal, high, highest restic-arguments-filter true / false true Remove unknown flags instead of passing all configured flags to restic restic-binary string Full path of the restic executable (detected if not set) restic-lock-retry-after integer OR duration 1m Time to wait before trying to get a lock on a restic repository - see usage/locks/ restic-stale-lock-age integer OR duration 1h The age an unused lock on a restic repository must have at least before resticprofile attempts to unlock - see usage/locks/ restic-version string Sets the restic version (detected if not set) schedule-defaults nested ScheduleBaseConfig Sets defaults for all schedules scheduler string auto Selects the scheduler. Blank or “auto” uses the default scheduler of your operating system: “launchd”, “systemd”, “taskscheduler” or “crond” (as fallback). Alternatively you can set “crond” for cron compatible schedulers supporting the crontab executable API or “crontab:[user:]file” to write into a crontab file directly. The need for a user is detected if missing and can be set to a name, “-” (no user) or “*” (current user). Examples: auto, launchd, systemd, taskscheduler, crond, crond:/usr/bin/crontab, crontab:*:/etc/cron.d/resticprofile send-timeout integer OR duration 30s Timeout when sending messages to a webhook - see configuration/http_hooks/. Examples: 15s, 30s, 2m30s shell one or more strings auto The shell that is used to run commands (default is OS specific). Examples: sh, bash, pwsh, powershell, cmd systemd-timer-template string File containing the go template to generate a systemd timer - see schedules/systemd/ systemd-unit-template string File containing the go template to generate a systemd unit - see schedules/systemd/",
    "tags": [],
    "title": "Section global",
    "uri": "/reference/global/index.html"
  },
  {
    "breadcrumb": "resticprofile",
    "content": "Pre-built binaries Linux mac OS Windows Ansible Source Upgrade Docker Shell Completion",
    "description": "Pre-built binaries Linux mac OS Windows Ansible Source Upgrade Docker Shell Completion",
    "tags": [],
    "title": "Installation",
    "uri": "/installation/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Reference \u003e  Section Profile",
    "content": "Section profile.cache This section configures restic command cache . Information on command and flags is copied from the restic manual pages.\nThe “cache” command allows listing and cleaning local cache directories.\nFlags used by resticprofile only: Name Type Default Notes run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands send-after one or more nested SendMonitoringSection Send HTTP request(s) after a successful restic command send-after-fail one or more nested SendMonitoringSection Send HTTP request(s) after failed restic or shell commands send-before one or more nested SendMonitoringSection Send HTTP request(s) before a restic command send-finally one or more nested SendMonitoringSection Send HTTP request(s) always, after all other commands Flags passed to the restic command line: Name Type Default Notes cleanup true / false false remove old cache directories max-age integer 30 max age in days for cache directories to be considered old no-size true / false false do not output the size of the cache directories Tip Flags declared for the restic command line in section profile can be overridden in this section.",
    "description": "Section profile.cache This section configures restic command cache . Information on command and flags is copied from the restic manual pages.\nThe “cache” command allows listing and cleaning local cache directories.\nFlags used by resticprofile only: Name Type Default Notes run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands send-after one or more nested SendMonitoringSection Send HTTP request(s) after a successful restic command send-after-fail one or more nested SendMonitoringSection Send HTTP request(s) after failed restic or shell commands send-before one or more nested SendMonitoringSection Send HTTP request(s) before a restic command send-finally one or more nested SendMonitoringSection Send HTTP request(s) always, after all other commands Flags passed to the restic command line: Name Type Default Notes cleanup true / false false remove old cache directories max-age integer 30 max age in days for cache directories to be considered old no-size true / false false do not output the size of the cache directories Tip Flags declared for the restic command line in section profile can be overridden in this section.",
    "tags": [],
    "title": "cache",
    "uri": "/reference/profile/cache/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Reference \u003e  Nested Sections",
    "content": "Nested ScheduleConfig Schedule configuration structure. Can be used to define schedules in profiles and groups.\nName Type Default Notes after-network-online true / false Don’t start this schedule when the network is offline (supported in “systemd”) at one or more strings Set the times at which the scheduled command is run (times are specified in systemd timer format). Examples: hourly, daily, weekly, monthly, 10:00,14:00,18:00,22:00, Wed,Fri 17:48, *-*-15 02:45, Mon..Fri 00:30 capture-environment one or more strings RESTIC_* Set names (or glob expressions) of environment variables to capture during schedule creation. The captured environment is applied prior to “profile.env” when running the schedule. Whether capturing is supported depends on the type of scheduler being used (supported in “systemd” and “launchd”) command-output string auto Sets the destination for command output (stderr/stdout). “log” sends output to the log file (if specified), “console” sends it to the console instead. “auto” sends it to “both” if console is a terminal otherwise to “log” only - see configuration/logs/. Is one of auto, log, console, all ignore-on-battery true / false false Don’t start this schedule when running on battery ignore-on-battery-less-than integer Don’t start this schedule when running on battery and the state of charge is less than this percentage. Examples: 20, 33, 50, 75 lock-mode string default Specify how locks are used when running on schedule - see schedules/configuration/. Is one of default, fail, ignore lock-wait integer OR duration Set the maximum time to wait for acquiring locks when running on schedule. Examples: 150s, 15m, 30m, 45m, 1h, 2h30m log string Redirect the output into a log file or to syslog when running on schedule - see configuration/logs/. Examples: /resticprofile.log, syslog-tcp://syslog-server:514, syslog:server, syslog: permission string auto Specify whether the schedule runs with system or user privileges - see schedules/configuration/. Is one of auto, system, user, user_logged_on priority string standard Set the priority at which the schedule is run. Is one of background, standard systemd-drop-in-files one or more strings Files containing systemd drop-in (override) files - see schedules/systemd/",
    "description": "Nested ScheduleConfig Schedule configuration structure. Can be used to define schedules in profiles and groups.\nName Type Default Notes after-network-online true / false Don’t start this schedule when the network is offline (supported in “systemd”) at one or more strings Set the times at which the scheduled command is run (times are specified in systemd timer format). Examples: hourly, daily, weekly, monthly, 10:00,14:00,18:00,22:00, Wed,Fri 17:48, *-*-15 02:45, Mon..Fri 00:30 capture-environment one or more strings RESTIC_* Set names (or glob expressions) of environment variables to capture during schedule creation. The captured environment is applied prior to “profile.env” when running the schedule. Whether capturing is supported depends on the type of scheduler being used (supported in “systemd” and “launchd”) command-output string auto Sets the destination for command output (stderr/stdout). “log” sends output to the log file (if specified), “console” sends it to the console instead. “auto” sends it to “both” if console is a terminal otherwise to “log” only - see configuration/logs/. Is one of auto, log, console, all ignore-on-battery true / false false Don’t start this schedule when running on battery ignore-on-battery-less-than integer Don’t start this schedule when running on battery and the state of charge is less than this percentage. Examples: 20, 33, 50, 75 lock-mode string default Specify how locks are used when running on schedule - see schedules/configuration/. Is one of default, fail, ignore lock-wait integer OR duration Set the maximum time to wait for acquiring locks when running on schedule. Examples: 150s, 15m, 30m, 45m, 1h, 2h30m log string Redirect the output into a log file or to syslog when running on schedule - see configuration/logs/. Examples: /resticprofile.log, syslog-tcp://syslog-server:514, syslog:server, syslog: permission string auto Specify whether the schedule runs with system or user privileges - see schedules/configuration/. Is one of auto, system, user, user_logged_on priority string standard Set the priority at which the schedule is run. Is one of background, standard systemd-drop-in-files one or more strings Files containing systemd drop-in (override) files - see schedules/systemd/",
    "tags": [],
    "title": "ScheduleConfig",
    "uri": "/reference/nested/scheduleconfig/index.html"
  },
  {
    "breadcrumb": "resticprofile",
    "content": "A configuration is a set of profiles. Each profile is in a new section that has the name of the profile. Inside each profile, you can specify different flags for each command. A command definition is in a subsection of the name of the command. ​ toml yaml hcl json [profile_name] [profile_name.backup] profile_name: backup: profile_name { backup = { } } { \"profile_name\": { \"backup\": { } } } All the restic flags can be defined in a section. For most of them you just need to remove the two dashes in front.\nTo set the flag --password-file, the name of the parameter is simply password-file.\nThere’s one exception: the flag --repo is named repository in the configuration\nExample So let’s say you normally use this simple command:\nrestic --repo \"local:/backup\" --password-file \"password.txt\" --verbose backup /home For resticprofile to generate this command automatically for you, here’s the configuration file:\n​ toml yaml hcl json # indentation is not needed but it makes it easier to read ;) # version = \"1\" [default] repository = \"local:/backup\" password-file = \"password.txt\" [default.backup] verbose = true source = [ \"/home\" ] version: \"1\" default: repository: \"local:/backup\" password-file: \"password.txt\" backup: verbose: true source: - \"/home\" default { repository = \"local:/backup\" password-file = \"password.txt\" backup = { verbose = true source = [ \"/home\" ] } } { \"version\": \"1\", \"default\": { \"repository\": \"local:/backup\", \"password-file\": \"password.txt\", \"backup\": { \"verbose\": true, \"source\": [ \"/home\" ] } } } You may have noticed the source flag is accepting an array of values (inside brackets in TOML, list of values in YAML)\nNow, assuming this configuration file is named profiles.conf in the current folder (it’s the default config file name), you can simply run\nresticprofile backup and resticprofile will do its magic and generate the command line for you.\nIf you have any doubt on what it’s running, you can try a --dry-run:\nresticprofile --dry-run backup 2022/05/18 17:14:07 profile 'default': starting 'backup' 2022/05/18 17:14:07 dry-run: /usr/bin/restic backup --password-file password.txt --repo local:/backup --verbose /home 2022/05/18 17:14:07 profile 'default': finished 'backup' More information Getting Started Examples Path Includes Inheritance Copy command Command Hooks HTTP Hooks Templates Variables Warnings Priority Preventing system sleep Logs JSON schema Configuration v2 proposal",
    "description": "A configuration is a set of profiles. Each profile is in a new section that has the name of the profile. Inside each profile, you can specify different flags for each command. A command definition is in a subsection of the name of the command. ​ toml yaml hcl json [profile_name] [profile_name.backup] profile_name: backup: profile_name { backup = { } } { \"profile_name\": { \"backup\": { } } } All the restic flags can be defined in a section. For most of them you just need to remove the two dashes in front.",
    "tags": [],
    "title": "Configuration file",
    "uri": "/configuration/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Configuration file",
    "content": "Prerequisite resticprofile is an automation tool for restic, also known as a wrapper.\nIn short, resticprofile provides a configuration file and a runner that generates all necessary calls to restic.\nUnless you’re using the resticprofile Docker image, you need to have restic installed on your machine.\nChoose Your Favorite Format The resticprofile configuration file can be written in:\nTOML: configuration file with extension .toml or .conf YAML: configuration file with extension .yaml JSON: configuration file with extension .json HCL: configuration file with extension .hcl We recommend using either TOML or YAML.\nJSON is suitable for auto-generated configurations but is not the easiest format for humans to read and write.\nHCL can be useful if you already use a tool from the Hashicorp stack; otherwise, it’s another format to learn.\nConfigure Your Text Editor We’ll show you how to get documentation and auto-completion for the resticprofile configuration using Visual Studio Code.\nYou can use any other editor that recognizes the JSON schema. The same JSON schema can be used for JSON, TOML, and YAML file formats.\nTOML In Visual Studio Code, install an extension that supports completion and syntax validation using a JSON schema.\nFor example, install the Even Better TOML extension:\nYAML For YAML, install an extension like the one provided by Red Hat in Visual Studio Code to understand the shape of your configuration file.\nWrite your first configuration file The configuration file lists profiles containing commands and flags.\nA profile defines:\na restic repository (repository flag) how to access your restic repository (e.g., password-file) a list of commands (e.g., backup): files to include in a backup (source flag) when to back them up (details later) other restic flags for the command line (e.g., verbose) In this example, we’ll call our profile default. You don’t need to specify the profile name on the command line when using default.\nCreate a file named profiles with an extension of your choice (.toml, .yaml, .hcl, or .json).\n​ toml yaml hcl json #:schema https://creativeprojects.github.io/resticprofile/jsonschema/config-1.json # # indentation is not needed but it makes it easier to read ;) # version = \"1\" [default] repository = \"local:/backup\" password-file = \"password.txt\" [default.backup] verbose = true source = [ \"/home\" ] # yaml-language-server: $schema=https://creativeprojects.github.io/resticprofile/jsonschema/config.json version: \"1\" default: repository: \"local:/backup\" password-file: \"password.txt\" backup: verbose: true source: - \"/home\" default { repository = \"local:/backup\" password-file = \"password.txt\" backup = { verbose = true source = [ \"/home\" ] } } { \"$schema\": \"https://creativeprojects.github.io/resticprofile/jsonschema/config.json\", \"version\": \"1\", \"default\": { \"repository\": \"local:/backup\", \"password-file\": \"password.txt\", \"backup\": { \"verbose\": true, \"source\": [ \"/home\" ] } } } Generate a secure password resticprofile can generate a secure password file for you:\nresticprofile generate --random-key \u003e password.txt Initialize your repository With the password file, initialize your restic repository:\nresticprofile init Here’s an example of the result:\n2023/03/25 15:46:48 using configuration file: profiles.yaml 2023/03/25 15:46:48 profile 'default': starting 'init' created restic repository e21ab75046 at local:/backup Please note that knowledge of your password is required to access the repository. Losing your password means that your data is irrecoverably lost. 2023/03/25 15:46:51 profile 'default': finished 'init' Test your first backup Before going live, you can dry run your first backup by using the resticprofile --dry-run flag.\nresticprofile --dry-run backup And here’s the result:\n2023/03/25 15:49:51 using configuration file: profiles.yaml 2023/03/25 15:49:51 profile 'default': starting 'backup' 2023/03/25 15:49:51 dry-run: /usr/local/bin/restic backup --password-file password.txt --repo local:/backup --verbose /home 2023/03/25 15:49:51 profile 'default': finished 'backup' As you can see, resticprofile converted your backup profile into this command line:\n/usr/local/bin/restic backup --password-file password.txt --repo local:/backup --verbose /home Flags Let’s stop a moment and analyse the command line: we passed the flag --dry-run before the command backup: it means the flag is used by resticprofile.\nLet’s try again with the flag after the command:\nresticprofile backup --dry-run And the result is rather different:\n2023/03/25 15:50:02 using configuration file: profiles.yaml 2023/03/25 15:50:02 profile 'default': starting 'backup' open repository repository e22aa770 opened (version 2, compression level auto) created new cache in /Users/CP/Library/Caches/restic lock repository no parent snapshot found, will read all files load index files start scan on [/home] start backup on [/home] scan finished in 0.202s: 0 files, 0 B Files: 0 new, 0 changed, 0 unmodified Dirs: 0 new, 0 changed, 0 unmodified Data Blobs: 0 new Tree Blobs: 1 new Would add to the repository: 346 B (292 B stored) processed 0 files, 0 B in 0:00 2023/03/25 15:50:03 profile 'default': finished 'backup' If you add flags after the command, the flags will be sent to restic instead. As you can see, restic simulated a backup of your /home folder.\nSchedule Let’s imagine you want to backup your files every day during your lunch break.\nAdd a line in your configuration (in the default -\u003e backup section) with an option called schedule and a value of 12:30. Your configuration should now look like:\n​ toml yaml hcl json #:schema https://creativeprojects.github.io/resticprofile/jsonschema/config-1.json # # indentation is not needed but it makes it easier to read ;) # version = \"1\" [default] repository = \"local:/backup\" password-file = \"password.txt\" [default.backup] verbose = true source = [ \"/home\" ] schedule = \"12:30\" # yaml-language-server: $schema=https://creativeprojects.github.io/resticprofile/jsonschema/config.json version: \"1\" default: repository: \"local:/backup\" password-file: \"password.txt\" backup: verbose: true source: - \"/home\" schedule: \"12:30\" default { repository = \"local:/backup\" password-file = \"password.txt\" backup = { verbose = true source = [ \"/home\" ] schedule = \"12:30\" } } { \"$schema\": \"https://creativeprojects.github.io/resticprofile/jsonschema/config.json\", \"version\": \"1\", \"default\": { \"repository\": \"local:/backup\", \"password-file\": \"password.txt\", \"backup\": { \"verbose\": true, \"source\": [ \"/home\" ], \"schedule\": \"12:30\" } } } resticprofile can schedule work on macOS, Windows, most Unixes and Linux distributions: it is simply adding an entry in the default scheduler of your platform.\nTo schedule the backup of the default profile, simply type the command:\nresticprofile schedule Now your backup will run every day at 12:30. As simple as that!\nInline help You can get help for any command at any time.\nThe help is available for both the resticprofile internal commands and all the restic commands.\nresticprofile help To get the help on a resticprofile command, simply use the help command or command -h:\nExample:\n$ resticprofile help generate The \"generate\" command is used to create various resources and print them to stdout Usage: resticprofile [resticprofile flags] generate [command specific flags] Flags: --bash-completion generate a shell completion script for bash --config-reference [--version 0.15] [template] generate a config file reference from a go template (defaults to the built-in markdown template when omitted) --json-schema [--version 0.15] [v1|v2] generate a JSON schema that validates resticprofile configuration files in YAML or JSON format --random-key [size] generate a cryptographically secure random key to use as a restic keyfile (size defaults to 1024 when omitted) --zsh-completion generate a shell completion script for zsh restic help This is the same syntax to display the help from a restic command:\n$ resticprofile init -h The \"init\" command initializes a new repository. EXIT STATUS =========== Exit status is 0 if the command was successful, and non-zero if there was any error. Usage: resticprofile [resticprofile flags] [profile name.]init [flags] Flags: [...] Next Let’s have a look at some examples",
    "description": "Prerequisite resticprofile is an automation tool for restic, also known as a wrapper.\nIn short, resticprofile provides a configuration file and a runner that generates all necessary calls to restic.\nUnless you’re using the resticprofile Docker image, you need to have restic installed on your machine.\nChoose Your Favorite Format The resticprofile configuration file can be written in:\nTOML: configuration file with extension .toml or .conf YAML: configuration file with extension .yaml JSON: configuration file with extension .json HCL: configuration file with extension .hcl We recommend using either TOML or YAML.",
    "tags": [],
    "title": "Getting Started",
    "uri": "/configuration/getting_started/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Reference \u003e  Section Profile",
    "content": "Section profile.cat This section configures restic command cat . Information on command and flags is copied from the restic manual pages.\nThe “cat” command is used to print internal objects to stdout.\nFlags used by resticprofile only: Name Type Default Notes run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands send-after one or more nested SendMonitoringSection Send HTTP request(s) after a successful restic command send-after-fail one or more nested SendMonitoringSection Send HTTP request(s) after failed restic or shell commands send-before one or more nested SendMonitoringSection Send HTTP request(s) before a restic command send-finally one or more nested SendMonitoringSection Send HTTP request(s) always, after all other commands Tip Flags declared for the restic command line in section profile can be overridden in this section.",
    "description": "Section profile.cat This section configures restic command cat . Information on command and flags is copied from the restic manual pages.\nThe “cat” command is used to print internal objects to stdout.\nFlags used by resticprofile only: Name Type Default Notes run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands send-after one or more nested SendMonitoringSection Send HTTP request(s) after a successful restic command send-after-fail one or more nested SendMonitoringSection Send HTTP request(s) after failed restic or shell commands send-before one or more nested SendMonitoringSection Send HTTP request(s) before a restic command send-finally one or more nested SendMonitoringSection Send HTTP request(s) always, after all other commands Tip Flags declared for the restic command line in section profile can be overridden in this section.",
    "tags": [],
    "title": "cat",
    "uri": "/reference/profile/cat/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Reference \u003e  Nested Sections",
    "content": "Nested SendMonitoringHeader Name Type Default Notes name string Name of the HTTP header. Examples: \"Authorization\", \"Cache-Control\", \"Content-Disposition\", \"Content-Type\" value string Value of the header. Examples: \"Bearer ...\", \"Basic ...\", \"no-cache\", \"attachment; filename=stats.txt\", \"application/json\", \"text/plain\", \"text/xml\"",
    "description": "Nested SendMonitoringHeader Name Type Default Notes name string Name of the HTTP header. Examples: \"Authorization\", \"Cache-Control\", \"Content-Disposition\", \"Content-Type\" value string Value of the header. Examples: \"Bearer ...\", \"Basic ...\", \"no-cache\", \"attachment; filename=stats.txt\", \"application/json\", \"text/plain\", \"text/xml\"",
    "tags": [],
    "title": "SendMonitoringHeader",
    "uri": "/reference/nested/sendmonitoringheader/index.html"
  },
  {
    "breadcrumb": "resticprofile",
    "content": "Here are a few examples how to run resticprofile (using the main example configuration file)\nSee all snapshots of your default profile:\nresticprofile See all available profiles in your configuration file (and the restic commands where some flags are defined):\nresticprofile profiles Profiles available (name, sections, description): root: (backup, copy, forget, retention) self: (backup, check, copy, forget, retention) src: (backup, copy, retention, snapshots) Groups available (name, profiles, description): full-backup: [root, src] Backup root \u0026 src profiles (using full-backup group shown earlier)\nresticprofile --name \"full-backup\" backup or using the alternative syntax:\nresticprofile full-backup.backup Assuming the stdin profile from the configuration file shown before, the command to send a mysqldump to the backup is as simple as:\nmysqldump --all-databases --order-by-primary | resticprofile --name stdin backup or using the alternative syntax:\nmysqldump --all-databases --order-by-primary | resticprofile stdin.backup Mount the default profile (default) in /mnt/restic:\nresticprofile mount /mnt/restic Display quick help\nresticprofile --help A command is either a restic command or a resticprofile own command.\nCommand line reference There are not many options on the command line, most of the options are in the configuration file.\n[-h | –help]: Display quick help [-c | –config] configuration_file: Specify a configuration file other than the default (“profiles”) [-f | –format] configuration_format: Specify the configuration file format: toml, yaml, json or hcl [-n | –name] profile_name: Profile section to use from the configuration file. You can also use [profile_name].[command] syntax instead, this will only work if -n is not set. Using -n [profile_name] [command] or [profile_name].[command] both select profile and command and are technically equivalent. [–dry-run]: Doesn’t run the restic commands but display the command lines instead [-q | –quiet]: Force resticprofile and restic to be quiet (override any configuration from the profile) [-v | –verbose]: Force resticprofile and restic to be verbose (override any configuration from the profile) [–trace]: Display even more debugging information [–no-ansi]: Disable console colouring (to save output into a log file) [–stderr]: Send console output from resticprofile to stderr (is enabled for commands cat and dump) [–no-lock]: Disable resticprofile locks, neither create nor fail on a lock. restic locks are unaffected by this option. [–theme]: Can be light, dark or none. The colours will adjust to a light or dark terminal (none to disable colouring) [–lock-wait] duration: Retry to acquire resticprofile and restic locks for up to the specified amount of time before failing on a lock failure. [-l | –log] file path or url: To write the logs to a file or a syslog server instead of displaying on the console. The format of the syslog server url is syslog-tcp://192.168.0.1:514, syslog://udp-server:514 or syslog:. For custom log forwarding, the prefix temp: can be used (e.g. temp:/t/msg.log) to create unique log output that can be fed into a command or http hook by referencing it with \"{{ tempFile \"msg.log\" }}\" in the configuration file. [–command-output]: Sets how to redirect command output when a log target is specified. Can be auto, log, console or all. [-w | –wait]: Wait at the very end of the execution for the user to press enter. This is only useful in Windows when resticprofile is started from explorer and the console window closes automatically at the end. [–ignore-on-battery]: Don’t start the profile when the computer is running on battery. You can specify a value to ignore only when the % charge left is less or equal than the value. [resticprofile OR restic command]: Like snapshots, backup, check, prune, forget, mount, etc. [additional flags]: Any additional flags to pass to the restic command line Environment variables Most flags for resticprofile can be set using environment variables. If both are specified, command line flags take the precedence.\nFlag Environment variable Built-In default --quiet RESTICPROFILE_QUIET false --verbose RESTICPROFILE_VERBOSE false --trace RESTICPROFILE_TRACE false --config RESTICPROFILE_CONFIG \"profiles\" --format RESTICPROFILE_FORMAT \"\" --name RESTICPROFILE_NAME \"default\" --log RESTICPROFILE_LOG \"\" --command-output RESTICPROFILE_COMMAND_OUTPUT \"auto\" --dry-run RESTICPROFILE_DRY_RUN false --no-lock RESTICPROFILE_NO_LOCK false --lock-wait RESTICPROFILE_LOCK_WAIT 0 --stderr RESTICPROFILE_STDERR false --no-ansi RESTICPROFILE_NO_ANSI false --theme RESTICPROFILE_THEME \"light\" --no-priority RESTICPROFILE_NO_PRIORITY false --wait RESTICPROFILE_WAIT false --ignore-on-battery RESTICPROFILE_IGNORE_ON_BATTERY 0 Other environment variables Environment Variable Default Purpose RESTICPROFILE_PWSH_NO_AUTOENV empty Disables powershell script pre-processing that converts unset $VAR into $Env:VAR Environment variables set by resticprofile Environment Variable Example When RESTICPROFILE_SCHEDULE_ID profiles.yaml:backup@profile Set when running scheduled commands",
    "description": "Here are a few examples how to run resticprofile (using the main example configuration file)\nSee all snapshots of your default profile:\nresticprofile See all available profiles in your configuration file (and the restic commands where some flags are defined):\nresticprofile profiles Profiles available (name, sections, description): root: (backup, copy, forget, retention) self: (backup, check, copy, forget, retention) src: (backup, copy, retention, snapshots) Groups available (name, profiles, description): full-backup: [root, src] Backup root \u0026 src profiles (using full-backup group shown earlier)",
    "tags": [],
    "title": "Using resticprofile",
    "uri": "/usage/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Reference \u003e  Section Profile",
    "content": "Section profile.check This section configures restic command check . Information on command and flags is copied from the restic manual pages.\nThe “check” command tests the repository for errors and reports any errors it finds. It can also be used to read all data and therefore simulate a restore.\nBy default, the “check” command will always load all data directly from the repository and not use a local cache.\nFlags used by resticprofile only: Name Type Default Notes run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands schedule one or more strings OR nested ScheduleConfig Configures the scheduled execution of this profile section. Can be times in systemd timer format or a config structure. Examples: hourly, daily, weekly, monthly, 10:00,14:00,18:00,22:00, Wed,Fri 17:48, *-*-15 02:45, Mon..Fri 00:30 schedule-after-network-online true / false Don’t start this schedule when the network is offline (supported in “systemd”) schedule-capture-environment one or more strings RESTIC_* Set names (or glob expressions) of environment variables to capture during schedule creation. The captured environment is applied prior to “profile.env” when running the schedule. Whether capturing is supported depends on the type of scheduler being used (supported in “systemd” and “launchd”) schedule-ignore-on-battery true / false false Don’t start this schedule when running on battery schedule-ignore-on-battery-less-than integer Don’t start this schedule when running on battery and the state of charge is less than this percentage. Examples: 20, 33, 50, 75 schedule-lock-mode string default Specify how locks are used when running on schedule - see schedules/configuration/. Is one of default, fail, ignore schedule-lock-wait integer OR duration Set the maximum time to wait for acquiring locks when running on schedule. Examples: 150s, 15m, 30m, 45m, 1h, 2h30m schedule-log string Redirect the output into a log file or to syslog when running on schedule. Examples: /resticprofile.log, syslog-tcp://syslog-server:514, syslog:server, syslog: schedule-permission string auto Specify whether the schedule runs with system or user privileges - see schedules/configuration/. Is one of auto, system, user, user_logged_on schedule-priority string standard Set the priority at which the schedule is run. Is one of background, standard send-after one or more nested SendMonitoringSection Send HTTP request(s) after a successful restic command send-after-fail one or more nested SendMonitoringSection Send HTTP request(s) after failed restic or shell commands send-before one or more nested SendMonitoringSection Send HTTP request(s) before a restic command send-finally one or more nested SendMonitoringSection Send HTTP request(s) always, after all other commands Flags passed to the restic command line: Name Type Default Notes check-unused true / false false find unused blobs. restic \u003c 0.14.0 read-data true / false false read all data blobs read-data-subset string \"\" read a subset of data packs, specified as ’n/t’ for specific part, or either ‘x%’ or ‘x.y%’ or a size in bytes with suffixes k/K, m/M, g/G, t/T for a random subset with-cache true / false false use existing cache, only read uncached data from repository Tip Flags declared for the restic command line in section profile can be overridden in this section.",
    "description": "Section profile.check This section configures restic command check . Information on command and flags is copied from the restic manual pages.\nThe “check” command tests the repository for errors and reports any errors it finds. It can also be used to read all data and therefore simulate a restore.\nBy default, the “check” command will always load all data directly from the repository and not use a local cache.\nFlags used by resticprofile only: Name Type Default Notes run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands schedule one or more strings OR nested ScheduleConfig Configures the scheduled execution of this profile section. Can be times in systemd timer format or a config structure. Examples: hourly, daily, weekly, monthly, 10:00,14:00,18:00,22:00, Wed,Fri 17:48, *-*-15 02:45, Mon..Fri 00:30 schedule-after-network-online true / false Don’t start this schedule when the network is offline (supported in “systemd”) schedule-capture-environment one or more strings RESTIC_* Set names (or glob expressions) of environment variables to capture during schedule creation. The captured environment is applied prior to “profile.env” when running the schedule. Whether capturing is supported depends on the type of scheduler being used (supported in “systemd” and “launchd”) schedule-ignore-on-battery true / false false Don’t start this schedule when running on battery schedule-ignore-on-battery-less-than integer Don’t start this schedule when running on battery and the state of charge is less than this percentage. Examples: 20, 33, 50, 75 schedule-lock-mode string default Specify how locks are used when running on schedule - see schedules/configuration/. Is one of default, fail, ignore schedule-lock-wait integer OR duration Set the maximum time to wait for acquiring locks when running on schedule. Examples: 150s, 15m, 30m, 45m, 1h, 2h30m schedule-log string Redirect the output into a log file or to syslog when running on schedule. Examples: /resticprofile.log, syslog-tcp://syslog-server:514, syslog:server, syslog: schedule-permission string auto Specify whether the schedule runs with system or user privileges - see schedules/configuration/. Is one of auto, system, user, user_logged_on schedule-priority string standard Set the priority at which the schedule is run. Is one of background, standard send-after one or more nested SendMonitoringSection Send HTTP request(s) after a successful restic command send-after-fail one or more nested SendMonitoringSection Send HTTP request(s) after failed restic or shell commands send-before one or more nested SendMonitoringSection Send HTTP request(s) before a restic command send-finally one or more nested SendMonitoringSection Send HTTP request(s) always, after all other commands Flags passed to the restic command line: Name Type Default Notes check-unused true / false false find unused blobs. restic \u003c 0.14.0 read-data true / false false read all data blobs read-data-subset string \"\" read a subset of data packs, specified as ’n/t’ for specific part, or either ‘x%’ or ‘x.y%’ or a size in bytes with suffixes k/K, m/M, g/G, t/T for a random subset with-cache true / false false use existing cache, only read uncached data from repository Tip Flags declared for the restic command line in section profile can be overridden in this section.",
    "tags": [],
    "title": "check",
    "uri": "/reference/profile/check/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Reference \u003e  Nested Sections",
    "content": "Nested SendMonitoringSection Name Type Default Notes body string Request body, overrides “body-template” body-template string Path to a file containing the request body (go template). See configuration/http_hooks/#body-template headers one or more nested SendMonitoringHeader Additional HTTP headers to send with the request method string GET HTTP method of the request. Is one of GET, DELETE, HEAD, OPTIONS, PATCH, POST, PUT, TRACE skip-tls-verification true / false false Enables insecure TLS (without verification), see also “global.ca-certificates” url uri URL of the target to send to",
    "description": "Nested SendMonitoringSection Name Type Default Notes body string Request body, overrides “body-template” body-template string Path to a file containing the request body (go template). See configuration/http_hooks/#body-template headers one or more nested SendMonitoringHeader Additional HTTP headers to send with the request method string GET HTTP method of the request. Is one of GET, DELETE, HEAD, OPTIONS, PATCH, POST, PUT, TRACE skip-tls-verification true / false false Enables insecure TLS (without verification), see also “global.ca-certificates” url uri URL of the target to send to",
    "tags": [],
    "title": "SendMonitoringSection",
    "uri": "/reference/nested/sendmonitoringsection/index.html"
  },
  {
    "breadcrumb": "resticprofile",
    "content": "Scheduler resticprofile manages scheduled backups using:\nlaunchd on macOS Task Scheduler on Windows systemd on Linux and other BSDs crond as a fallback (requires crontab binary) crontab files (with or without a user column) On Unix systems (excluding macOS), resticprofile uses systemd if available, otherwise it falls back to crond.\nSee reference / global section for scheduler configuration options.\nEach profile can be scheduled independently. Within each profile, these sections can be scheduled:\nbackup check forget prune copy Deprecation Scheduling the retention section directly is deprecated. Use the forget section instead.\nThe retention section should be associated with a backup section, not scheduled independently.\n​ toml yaml hcl json [profile.retention] # deprecated schedule = \"daily\" # use the forget target instead [profile.forget] schedule = \"daily\" --- profile: retention: # deprecated schedule: daily # use the forget target instead forget: schedule: daily \"profile\" = { \"retention\" = { # deprecated schedule = \"daily\" } # use the forget target instead \"forget\" = { schedule = \"daily\" } } { \"profile\": { \"forget\": { \"schedule\": \"daily\" } } } More information Schedule Configuration Schedule Commands Schedule Examples Systemd Launchd on macOS Windows Task Scheduler Cron \u0026 compatible User schedule in container",
    "description": "Scheduler resticprofile manages scheduled backups using:\nlaunchd on macOS Task Scheduler on Windows systemd on Linux and other BSDs crond as a fallback (requires crontab binary) crontab files (with or without a user column) On Unix systems (excluding macOS), resticprofile uses systemd if available, otherwise it falls back to crond.\nSee reference / global section for scheduler configuration options.\nEach profile can be scheduled independently. Within each profile, these sections can be scheduled:",
    "tags": [],
    "title": "Schedules",
    "uri": "/schedules/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Reference \u003e  Section Profile",
    "content": "Section profile.copy This section configures restic command copy available since 0.10.0 . Information on command and flags is copied from the restic manual pages.\nThe “copy” command copies one or more snapshots from one repository to another.\nNOTE: This process will have to both download (read) and upload (write) the entire snapshot(s) due to the different encryption keys used in the source and destination repositories. This /may incur higher bandwidth usage and costs/ than expected during normal backup runs.\nNOTE: The copying process does not re-chunk files, which may break deduplication between the files copied and files already stored in the destination repository. This means that copied files, which existed in both the source and destination repository, /may occupy up to twice their space/ in the destination repository. This can be mitigated by the “–copy-chunker-params” option when initializing a new destination repository using the “init” command.\nFlags used by resticprofile only: Name Type Default Notes initialize true / false false Initialize the secondary repository if missing initialize-copy-chunker-params true / false true Copy chunker parameters when initializing the secondary repository key-hint string Key ID of key to try decrypting the destination repository first password-command string Shell command to obtain the destination repository password from password-file string File to read the destination repository password from repository string Destination repository to copy snapshots to repository-file string File from which to read the destination repository location to copy snapshots to run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands schedule one or more strings OR nested ScheduleConfig Configures the scheduled execution of this profile section. Can be times in systemd timer format or a config structure. Examples: hourly, daily, weekly, monthly, 10:00,14:00,18:00,22:00, Wed,Fri 17:48, *-*-15 02:45, Mon..Fri 00:30 schedule-after-network-online true / false Don’t start this schedule when the network is offline (supported in “systemd”) schedule-capture-environment one or more strings RESTIC_* Set names (or glob expressions) of environment variables to capture during schedule creation. The captured environment is applied prior to “profile.env” when running the schedule. Whether capturing is supported depends on the type of scheduler being used (supported in “systemd” and “launchd”) schedule-ignore-on-battery true / false false Don’t start this schedule when running on battery schedule-ignore-on-battery-less-than integer Don’t start this schedule when running on battery and the state of charge is less than this percentage. Examples: 20, 33, 50, 75 schedule-lock-mode string default Specify how locks are used when running on schedule - see schedules/configuration/. Is one of default, fail, ignore schedule-lock-wait integer OR duration Set the maximum time to wait for acquiring locks when running on schedule. Examples: 150s, 15m, 30m, 45m, 1h, 2h30m schedule-log string Redirect the output into a log file or to syslog when running on schedule. Examples: /resticprofile.log, syslog-tcp://syslog-server:514, syslog:server, syslog: schedule-permission string auto Specify whether the schedule runs with system or user privileges - see schedules/configuration/. Is one of auto, system, user, user_logged_on schedule-priority string standard Set the priority at which the schedule is run. Is one of background, standard send-after one or more nested SendMonitoringSection Send HTTP request(s) after a successful restic command send-after-fail one or more nested SendMonitoringSection Send HTTP request(s) after failed restic or shell commands send-before one or more nested SendMonitoringSection Send HTTP request(s) before a restic command send-finally one or more nested SendMonitoringSection Send HTTP request(s) always, after all other commands snapshot one or more strings Snapshot IDs to copy (if empty, all snapshots are copied) Flags passed to the restic command line: Name Type Default Notes from-insecure-no-password true / false false use an empty password for the source repository (insecure). restic \u003e= 0.17.0 from-key-hint string \"\" key ID of key to try decrypting the source repository first (default: $RESTIC_FROM_KEY_HINT). restic \u003e= 0.14.0 from-password-command string \"\" shell command to obtain the source repository password from (default: $RESTIC_FROM_PASSWORD_COMMAND). restic \u003e= 0.14.0 from-password-file string \"\" file to read the source repository password from (default: $RESTIC_FROM_PASSWORD_FILE). restic \u003e= 0.14.0 from-repository string \"\" source repository to copy snapshots from (default: $RESTIC_FROM_REPOSITORY). restic \u003e= 0.14.0 from-repository-file string \"\" file from which to read the source repository location to copy snapshots from (default: $RESTIC_FROM_REPOSITORY_FILE). restic \u003e= 0.14.0 host true / false OR one or more hostnames only consider snapshots for this host (can be specified multiple times) (default: $RESTIC_HOST). Boolean true is replaced with the hostname of the system. Examples: true, false, \"host\" . restic \u003e= 0.10.0 key-hint2 string \"\" key ID of key to try decrypting the destination repository first (default: $RESTIC_KEY_HINT2). restic \u003e= 0.10.0 \u003c 0.14.0 password-command2 string \"\" shell command to obtain the destination repository password from (default: $RESTIC_PASSWORD_COMMAND2). restic \u003e= 0.10.0 \u003c 0.14.0 password-file2 string \"\" file to read the destination repository password from (default: $RESTIC_PASSWORD_FILE2). restic \u003e= 0.10.0 \u003c 0.14.0 path true / false OR one or more strings only consider snapshots including this (absolute) path (can be specified multiple times, snapshots must include all specified paths). Boolean true is replaced with the paths from section “backup”. Examples: true, false, \"path\" . restic \u003e= 0.10.0 repo2 string \"\" destination repository to copy snapshots to (default: $RESTIC_REPOSITORY2). restic \u003e= 0.10.0 \u003c 0.14.0 repository-file2 string \"\" file from which to read the destination repository location to copy snapshots to (default: $RESTIC_REPOSITORY_FILE2). restic \u003e= 0.13.0 \u003c 0.14.0 tag true / false OR one or more strings only consider snapshots including tag[,tag,…]. Boolean true is replaced with the tags from section “backup”. Examples: true, false, \"tag\" . restic \u003e= 0.10.0 Tip Flags declared for the restic command line in section profile can be overridden in this section.",
    "description": "Section profile.copy This section configures restic command copy available since 0.10.0 . Information on command and flags is copied from the restic manual pages.\nThe “copy” command copies one or more snapshots from one repository to another.\nNOTE: This process will have to both download (read) and upload (write) the entire snapshot(s) due to the different encryption keys used in the source and destination repositories. This /may incur higher bandwidth usage and costs/ than expected during normal backup runs.",
    "tags": [],
    "title": "copy",
    "uri": "/reference/profile/copy/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Reference",
    "content": "Profile sections In config file format v1, the name of this section is the name of your profile (excluding reserved names like global, groups, includes \u0026 version).\nFrom config file format v2, profile sections are declared as named configuration structure below section profiles (see Configuration v2 for details).\nSection profile Flags used by resticprofile only: Name Type Default Notes base-dir string Sets the working directory for this profile. The profile will fail when the working directory cannot be changed. Leave empty to use the current directory instead description string Describes the profile env key =\u003e value Additional environment variables to set in any child process. Inline env variables take precedence over dotenv files declared with “env-file” env-file one or more strings Additional dotenv files to load and set as environment in any child process force-inactive-lock true / false false Allows to lock when the existing lock is considered stale inherit string Name of the profile to inherit all of the settings from initialize true / false Initialize the restic repository if missing lock string Path to the lock file to use with resticprofile locks prometheus-labels key =\u003e string Additional prometheus labels to set prometheus-push uri URL of the prometheus push gateway to send the summary of the last restic command result to prometheus-push-format string text Prometheus push gateway request format. Is one of text, protobuf prometheus-push-job string Prometheus push gateway job name. $command placeholder is replaced with restic command prometheus-save-to-file string Path to the prometheus metrics file to update with a summary of the last restic command result run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands status-file string Path to the status file to update with a summary of last restic command result stream-error one or more nested StreamErrorSection Run shell command(s) when a pattern matches the stderr of restic systemd-drop-in-files one or more strings Files containing systemd drop-in (override) files - see schedules/systemd/ Flags passed to the restic command line: Name Type Default Notes cacert string file to load root certificates from (default: use system certificates or $RESTIC_CACERT) cache-dir string \"\" set the cache directory. (default: use system default cache directory) cleanup-cache true / false false auto remove old cache directories compression string auto compression mode (only available for repository format version 2), one of (auto/off/max) (default: $RESTIC_COMPRESSION). restic \u003e= 0.14.0 extended-status true / false false set output mode to JSON for commands that support it http-user-agent string \"\" set a http user agent for outgoing http requests. restic \u003e= 0.17.0 insecure-no-password true / false false use an empty password for the repository, must be passed to every restic command (insecure). restic \u003e= 0.17.0 insecure-tls true / false false skip TLS certificate verification when connecting to the repository (insecure). restic \u003e= 0.13.0 key-hint string \"\" key ID of key to try decrypting first (default: $RESTIC_KEY_HINT) limit-download integer 0 limits downloads to a maximum rate in KiB/s. (default: unlimited) limit-upload integer 0 limits uploads to a maximum rate in KiB/s. (default: unlimited) no-cache true / false false do not use a local cache no-extra-verify true / false false skip additional verification of data before upload (see documentation). restic \u003e= 0.16.4 no-lock true / false false do not lock the repository, this allows some operations on read-only repositories option one or more strings set extended option (key=value) pack-size integer 0 set target pack size in MiB, created pack files may be larger (default: $RESTIC_PACK_SIZE). restic \u003e= 0.14.0 password-command string \"\" shell command to obtain the repository password from (default: $RESTIC_PASSWORD_COMMAND) password-file string \"\" file to read the repository password from (default: $RESTIC_PASSWORD_FILE) quiet true / false false do not output comprehensive progress report repository string \"\" repository to backup to or restore from (default: $RESTIC_REPOSITORY) repository-file string \"\" file to read the repository location from (default: $RESTIC_REPOSITORY_FILE). restic \u003e= 0.11.0 retry-lock string 0s retry to lock the repository if it is already locked, takes a value like 5m or 2h (default: no retries). restic \u003e= 0.16.0 stuck-request-timeout string 5m0s duration after which to retry stuck requests. restic \u003e= 0.18.0 tls-client-cert string \"\" path to a file containing PEM encoded TLS client certificate and private key (default: $RESTIC_TLS_CLIENT_CERT) verbose true / false OR integer 0 be verbose (true for level 1 or a number for increased verbosity, max level is 2) Note Most restic command flags defined in profile sections below can also be set at profile level. They will be inherited in all sections that define these flags and ignored in all others.",
    "description": "Profile sections In config file format v1, the name of this section is the name of your profile (excluding reserved names like global, groups, includes \u0026 version).\nFrom config file format v2, profile sections are declared as named configuration structure below section profiles (see Configuration v2 for details).\nSection profile Flags used by resticprofile only: Name Type Default Notes base-dir string Sets the working directory for this profile. The profile will fail when the working directory cannot be changed. Leave empty to use the current directory instead description string Describes the profile env key =\u003e value Additional environment variables to set in any child process. Inline env variables take precedence over dotenv files declared with “env-file” env-file one or more strings Additional dotenv files to load and set as environment in any child process force-inactive-lock true / false false Allows to lock when the existing lock is considered stale inherit string Name of the profile to inherit all of the settings from initialize true / false Initialize the restic repository if missing lock string Path to the lock file to use with resticprofile locks prometheus-labels key =\u003e string Additional prometheus labels to set prometheus-push uri URL of the prometheus push gateway to send the summary of the last restic command result to prometheus-push-format string text Prometheus push gateway request format. Is one of text, protobuf prometheus-push-job string Prometheus push gateway job name. $command placeholder is replaced with restic command prometheus-save-to-file string Path to the prometheus metrics file to update with a summary of the last restic command result run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands status-file string Path to the status file to update with a summary of last restic command result stream-error one or more nested StreamErrorSection Run shell command(s) when a pattern matches the stderr of restic systemd-drop-in-files one or more strings Files containing systemd drop-in (override) files - see schedules/systemd/ Flags passed to the restic command line: Name Type Default Notes cacert string file to load root certificates from (default: use system certificates or $RESTIC_CACERT) cache-dir string \"\" set the cache directory. (default: use system default cache directory) cleanup-cache true / false false auto remove old cache directories compression string auto compression mode (only available for repository format version 2), one of (auto/off/max) (default: $RESTIC_COMPRESSION). restic \u003e= 0.14.0 extended-status true / false false set output mode to JSON for commands that support it http-user-agent string \"\" set a http user agent for outgoing http requests. restic \u003e= 0.17.0 insecure-no-password true / false false use an empty password for the repository, must be passed to every restic command (insecure). restic \u003e= 0.17.0 insecure-tls true / false false skip TLS certificate verification when connecting to the repository (insecure). restic \u003e= 0.13.0 key-hint string \"\" key ID of key to try decrypting first (default: $RESTIC_KEY_HINT) limit-download integer 0 limits downloads to a maximum rate in KiB/s. (default: unlimited) limit-upload integer 0 limits uploads to a maximum rate in KiB/s. (default: unlimited) no-cache true / false false do not use a local cache no-extra-verify true / false false skip additional verification of data before upload (see documentation). restic \u003e= 0.16.4 no-lock true / false false do not lock the repository, this allows some operations on read-only repositories option one or more strings set extended option (key=value) pack-size integer 0 set target pack size in MiB, created pack files may be larger (default: $RESTIC_PACK_SIZE). restic \u003e= 0.14.0 password-command string \"\" shell command to obtain the repository password from (default: $RESTIC_PASSWORD_COMMAND) password-file string \"\" file to read the repository password from (default: $RESTIC_PASSWORD_FILE) quiet true / false false do not output comprehensive progress report repository string \"\" repository to backup to or restore from (default: $RESTIC_REPOSITORY) repository-file string \"\" file to read the repository location from (default: $RESTIC_REPOSITORY_FILE). restic \u003e= 0.11.0 retry-lock string 0s retry to lock the repository if it is already locked, takes a value like 5m or 2h (default: no retries). restic \u003e= 0.16.0 stuck-request-timeout string 5m0s duration after which to retry stuck requests. restic \u003e= 0.18.0 tls-client-cert string \"\" path to a file containing PEM encoded TLS client certificate and private key (default: $RESTIC_TLS_CLIENT_CERT) verbose true / false OR integer 0 be verbose (true for level 1 or a number for increased verbosity, max level is 2) Note Most restic command flags defined in profile sections below can also be set at profile level. They will be inherited in all sections that define these flags and ignored in all others.",
    "tags": [],
    "title": "Section Profile",
    "uri": "/reference/profile/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Reference \u003e  Nested Sections",
    "content": "Nested StreamErrorSection Name Type Default Notes max-runs integer 0 Maximum amount of times that “run” is started ; 0 for no limit. Must be \u003e= 0 min-matches integer 0 Minimum amount of times the “pattern” must match before “run” is started ; 0 for no limit. Must be \u003e= 0 pattern regex A regular expression pattern that is tested against stderr of a running restic command run string The shell command to run when the pattern matches",
    "description": "Nested StreamErrorSection Name Type Default Notes max-runs integer 0 Maximum amount of times that “run” is started ; 0 for no limit. Must be \u003e= 0 min-matches integer 0 Minimum amount of times the “pattern” must match before “run” is started ; 0 for no limit. Must be \u003e= 0 pattern regex A regular expression pattern that is tested against stderr of a running restic command run string The shell command to run when the pattern matches",
    "tags": [],
    "title": "StreamErrorSection",
    "uri": "/reference/nested/streamerrorsection/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Configuration file",
    "content": "Simple configuration using Azure storage Here’s a simple configuration file using a Microsoft Azure backend. You will notice that the env section lets you define environment variables:\n​ toml yaml hcl version = \"1\" [default] repository = \"azure:restic:/\" password-file = \"key\" option = \"azure.connections=3\" [default.env] AZURE_ACCOUNT_NAME = \"my_storage_account\" AZURE_ACCOUNT_KEY = \"my_super_secret_key\" [default.backup] exclude-file = \"excludes\" exclude-caches = true one-file-system = true tag = [ \"root\" ] source = [ \"/\", \"/var\" ] schedule = \"daily\" schedule-after-network-online = true version: \"1\" default: repository: \"azure:restic:/\" password-file: \"key\" option: \"azure.connections=3\" env: AZURE_ACCOUNT_NAME: \"my_storage_account\" AZURE_ACCOUNT_KEY: \"my_super_secret_key\" backup: exclude-file: \"excludes\" exclude-caches: true one-file-system: true tag: - \"root\" source: - \"/\" - \"/var\" schedule: \"daily\" schedule-after-network-online: true default { repository = \"azure:restic:/\" password-file = \"key\" options = \"azure.connections=3\" env { AZURE_ACCOUNT_NAME = \"my_storage_account\" AZURE_ACCOUNT_KEY = \"my_super_secret_key\" } backup = { exclude-file = \"excludes\" exclude-caches = true one-file-system = true tag = [ \"root\" ] source = [ \"/\", \"/var\" ] } } Configuration with inheritance Here’s a more complex configuration file showing profile inheritance and two backup profiles using the same repository:\n​ toml yaml hcl version = \"1\" [global] # ionice is available on Linux only ionice = false ionice-class = 2 ionice-level = 6 # priority is using priority class on windows, and \"nice\" on unixes priority = \"low\" # run 'snapshots' when no command is specified when invoking resticprofile default-command = \"snapshots\" # initialize a repository if none exist at location initialize = false # resticprofile won't start a profile if there's less than 100MB of RAM available min-memory = 100 # a group is a profile that will call all profiles one by one [groups] # when starting a backup on profile \"full-backup\", # it will run the \"root\" and \"src\" backup profiles full-backup = [ \"root\", \"src\" ] # Default profile when not specified on the command line (-n or --name) # There's no default inheritance from the 'default' profile, # you can use the 'inherit' flag if needed [default] # you can use a relative path, it will be relative to the configuration file repository = \"/backup\" password-file = \"key\" initialize = false # will run these scripts before and after each command (including 'backup') run-before = \"mount /backup\" run-after = \"umount /backup\" # if a restic command fails, the run-after won't be running # add this parameter to run the script in case of a failure run-after-fail = \"umount /backup\" # add environment variables [default.env] TMPDIR= \"/tmp\" # New profile named 'root' [root] inherit = \"default\" initialize = true # LOCAL lockfile so you cannot run the same profile more than once at a time # (it's totally independent of the restic locks on the repository) lock = \"/tmp/resticprofile-root.lock\" # 'backup' command of profile 'root' [root.backup] # files with no path are relative to the configuration file exclude-file = [ \"root-excludes\", \"excludes\" ] exclude-caches = true one-file-system = false tag = [ \"test\", \"dev\" ] source = [ \"/\" ] # ignore restic warnings when files cannot be read no-error-on-warning = true # run every day at midnight schedule = \"daily\" schedule-permission = \"system\" schedule-lock-wait = \"2h\" # retention policy for profile root # retention is a special section that run the \"forget\" command # before or after a backup [root.retention] before-backup = false after-backup = true keep-hourly = 1 keep-daily = 1 keep-weekly = 1 keep-monthly = 1 keep-within = \"3h\" keep-tag = [ \"forever\" ] prune = false # tag can be a boolean ('true' meaning to copy tag set from 'backup') # or a custom set of tags. # Default is 'false', meaning that tags are NOT used. tag = true # host can be a boolean ('true' meaning current hostname) # or a string to specify a different hostname host = true # New profile named 'src' [src] inherit = \"default\" initialize = true # 'backup' command of profile 'src' [src.backup] exclude = [ '/**/.git' ] exclude-caches = true one-file-system = false tag = [ \"test\", \"dev\" ] source = [ \"./src\" ] check-before = true # will only run these scripts before and after a backup run-before = [ \"echo Starting!\", \"ls -al ./src\" ] run-after = \"sync\" # if scheduled, will run every 30 minutes schedule = \"*:0,30\" schedule-permission = \"user\" schedule-lock-wait = \"10m\" # retention policy for profile src [src.retention] before-backup = false after-backup = true keep-within = \"30d\" prune = true # check command of profile src [src.check] read-data = true # if scheduled, will check the repository the first day of each month at 3am schedule = \"*-*-01 03:00\" version: \"1\" global: # run 'snapshots' when no command is specified when invoking resticprofile default-command: snapshots # initialize a repository if none exist at location initialize: false # priority is using priority class on windows, and \"nice\" on unixes priority: low # resticprofile won't start a profile if there's less than 100MB of RAM available min-memory: 100 # a group is a profile that will call all profiles one by one groups: # when starting a backup on profile \"full-backup\", # it will run the \"root\" and \"src\" backup profiles full-backup: - root - src # Default profile when not specified on the command line (-n or --name) # There's no default inheritance from the 'default' profile, # you can use the 'inherit' flag if needed default: # add environment variables env: TMPDIR: /tmp password-file: key # you can use a relative path, it will be relative to the configuration file repository: /backup # will run these scripts before and after each command (including 'backup') run-before: mount /backup run-after: umount /backup # if a restic command fails, the run-after won't be running # add this parameter to run the script in case of a failure run-after-fail: umount /backup # New profile named 'root' root: inherit: default initialize: true # LOCAL lockfile so you cannot run the same profile more than once at a time # (it's totally independent of the restic locks on the repository) lock: /tmp/resticprofile-root.lock backup: exclude-caches: true # files with no path are relative to the configuration file exclude-file: - root-excludes - excludes one-file-system: false source: - / tag: - test - dev # ignore restic warnings when files cannot be read no-error-on-warning: true # run every day at midnight schedule: daily schedule-permission: system schedule-lock-wait: 2h # retention policy for profile root # retention is a special section that run the \"forget\" command # before or after a backup retention: before-backup: false after-backup: true keep-daily: 1 keep-hourly: 1 keep-weekly: 1 keep-monthly: 1 keep-within: 3h keep-tag: - forever prune: false # tag can be a boolean ('true' meaning to copy tag set from 'backup') # or a custom set of tags. # Default is 'false', meaning that tags are NOT used. tag: true # host can be a boolean ('true' meaning current hostname) # or a string to specify a different hostname host: true # New profile named 'src' src: lock: \"/tmp/resticprofile-profile-src.lock\" force-inactive-lock: false inherit: default initialize: true # 'backup' command of profile 'src' backup: check-before: true exclude: - /**/.git exclude-caches: true one-file-system: false # will only run these scripts before and after a backup run-before: - echo Starting! - ls -al ~/go run-after: echo All Done! source: - ~/go tag: - test - dev # run every 30 minutes schedule: \"*:0,30\" schedule-permission: user schedule-lock-wait: 10m # retention policy for profile src retention: before-backup: false after-backup: true keep-within: 30d prune: true # check command of profile src check: read-data: true # check the repository the first day of each month at 3am schedule: \"*-*-01 03:00\" global { priority = \"low\" ionice = true ionice-class = 2 ionice-level = 6 # don't start if the memory available is \u003c 1000MB min-memory = 1000 } groups { all = [\"src\", \"self\"] } default { repository = \"/tmp/backup\" password-file = \"key\" run-before = \"echo Profile started!\" run-after = \"echo Profile finished!\" run-after-fail = \"echo An error occurred!\" } src { inherit = \"default\" initialize = true lock = \"/tmp/backup/resticprofile-profile-src.lock\" force-inactive-lock = false snapshots = { tag = [ \"test\", \"dev\" ] } backup = { run-before = [ \"echo Starting!\", \"ls -al ~/go/src\" ] run-after = \"echo All Done!\" exclude = [ \"/**/.git\" ] exclude-caches = true tag = [ \"test\", \"dev\" ] source = [ \"~/go/src\" ] check-before = true } retention = { before-backup = false after-backup = true keep-last = 3 compact = false prune = true } check = { check-unused = true with-cache = false } } self { inherit = \"default\" initialize = false snapshots = { tag = [ \"self\" ] } backup = { source = \"./\" tag = [ \"self\" ] } } Configuration example for Windows ​ toml yaml hcl version = \"1\" [global] restic-binary = \"c:\\\\ProgramData\\\\chocolatey\\\\bin\\\\restic.exe\" # Default profile when not specified on the command line # There's no default inheritance from the 'default' profile, # but you can use the 'inherit' flag if needed [default] repository = \"local:r:/\" password-file = \"key\" initialize = false # New profile named 'test' [test] inherit = \"default\" initialize = true # 'backup' command of profile 'test' [test.backup] tag = [ \"windows\" ] source = [ \"c:\\\\\" ] check-after = true run-before = \"dir /l\" run-after = \"echo All Done!\" # ignore restic warnings # without it the backup is considered failed when restic can't read some files no-error-on-warning = true version: \"1\" global: restic-binary: c:\\ProgramData\\chocolatey\\bin\\restic.exe # Default profile when not specified on the command line # There's no default inheritance from the 'default' profile, # but you can use the 'inherit' flag if needed default: repository: local:r:/ password-file: key initialize: false # New profile named 'test' test: inherit: default initialize: true # 'backup' command of profile 'test' backup: tag: - windows source: - c:\\ check-after: true run-before: dir /l run-after: echo All Done! # ignore restic warnings # without it the backup is considered failed when restic can't read some files no-error-on-warning: true global { restic-binary = \"c:\\\\ProgramData\\\\chocolatey\\\\bin\\\\restic.exe\" } default { repository = \"local:r:/\" password-file = \"key\" initialize = false } test { inherit = \"default\" initialize = true backup = { tag = [ \"windows\" ] source = [ \"c:\\\\\" ] check-after = true run-before = \"dir /l\" run-after = \"echo All Done!\" no-error-on-warning = true } } Use stdin in configuration Simple example sending a file via stdin\n​ toml yaml hcl version = \"1\" [stdin] repository = \"local:/backup/restic\" password-file = \"key\" [stdin.backup] stdin = true stdin-filename = \"stdin-test\" tag = [ 'stdin' ] [mysql] inherit = \"stdin\" [mysql.backup] stdin-command = [ 'mysqldump --all-databases --order-by-primary' ] stdin-filename = \"dump.sql\" tag = [ 'mysql' ] version: \"1\" stdin: repository: \"local:/backup/restic\" password-file: key backup: stdin: true stdin-filename: stdin-test tag: - stdin mysql: inherit: stdin backup: stdin-command: \"mysqldump --all-databases --order-by-primary\" stdin-filename: \"dump.sql\" tag: - mysql # sending stream through stdin stdin { repository = \"local:/backup/restic\" password-file = \"key\" backup = { stdin = true stdin-filename = \"stdin-test\" tag = [ \"stdin\" ] } } mysql { inherit = \"stdin\" backup = { stdin-command = [ \"mysqldump --all-databases --order-by-primary\" ] stdin-filename = \"dump.sql\" tag = [ \"mysql\" ] } }",
    "description": "Simple configuration using Azure storage Here’s a simple configuration file using a Microsoft Azure backend. You will notice that the env section lets you define environment variables:\n​ toml yaml hcl version = \"1\" [default] repository = \"azure:restic:/\" password-file = \"key\" option = \"azure.connections=3\" [default.env] AZURE_ACCOUNT_NAME = \"my_storage_account\" AZURE_ACCOUNT_KEY = \"my_super_secret_key\" [default.backup] exclude-file = \"excludes\" exclude-caches = true one-file-system = true tag = [ \"root\" ] source = [ \"/\", \"/var\" ] schedule = \"daily\" schedule-after-network-online = true version: \"1\" default: repository: \"azure:restic:/\" password-file: \"key\" option: \"azure.connections=3\" env: AZURE_ACCOUNT_NAME: \"my_storage_account\" AZURE_ACCOUNT_KEY: \"my_super_secret_key\" backup: exclude-file: \"excludes\" exclude-caches: true one-file-system: true tag: - \"root\" source: - \"/\" - \"/var\" schedule: \"daily\" schedule-after-network-online: true default { repository = \"azure:restic:/\" password-file = \"key\" options = \"azure.connections=3\" env { AZURE_ACCOUNT_NAME = \"my_storage_account\" AZURE_ACCOUNT_KEY = \"my_super_secret_key\" } backup = { exclude-file = \"excludes\" exclude-caches = true one-file-system = true tag = [ \"root\" ] source = [ \"/\", \"/var\" ] } } Configuration with inheritance Here’s a more complex configuration file showing profile inheritance and two backup profiles using the same repository:",
    "tags": [],
    "title": "Examples",
    "uri": "/configuration/examples/index.html"
  },
  {
    "breadcrumb": "resticprofile",
    "content": "Status file Prometheus",
    "description": "Status file Prometheus",
    "tags": [],
    "title": "Monitoring",
    "uri": "/monitoring/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Installation",
    "content": "Pre-built binaries for resticprofile are available for various operating system and architectures. You can download the latest versions from the releases page.\nPre-built binaries available: darwin/amd64 darwin/arm64 freebsd/386 freebsd/amd64 freebsd/armv6 freebsd/armv7 linux/386 linux/amd64 linux/arm64 linux/armv6 linux/armv7 linux/mips64 hardfloat linux/mips64le hardfloat linux/mips hardfloat linux/mipsle hardfloat linux/ppc64 linux/ppc64le linux/riscv64 linux/s390x netbsd/amd64 openbsd/386 openbsd/amd64 solaris/amd64 windows/386 windows/amd64 windows/arm64 🆕",
    "description": "Pre-built binaries for resticprofile are available for various operating system and architectures. You can download the latest versions from the releases page.\nPre-built binaries available: darwin/amd64 darwin/arm64 freebsd/386 freebsd/amd64 freebsd/armv6 freebsd/armv7 linux/386 linux/amd64 linux/arm64 linux/armv6 linux/armv7 linux/mips64 hardfloat linux/mips64le hardfloat linux/mips hardfloat linux/mipsle hardfloat linux/ppc64 linux/ppc64le linux/riscv64 linux/s390x netbsd/amd64 openbsd/386 openbsd/amd64 solaris/amd64 windows/386 windows/amd64 windows/arm64 🆕",
    "tags": [],
    "title": "Pre-built binaries",
    "uri": "/installation/binaries/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Monitoring",
    "content": "If you need to send your backup results to a monitoring system, use the run-after and run-after-fail scripts.\nFor simpler needs, resticprofile can generate a JSON file with details of the latest backup, forget, or check command. For example, I use a Zabbix agent to check this file daily. Any monitoring system that reads JSON files can be integrated.\nTo enable this, add the status file location as a parameter in your profile.\n​ toml yaml hcl json version = \"1\" [profile] status-file = \"backup-status.json\" version: \"1\" profile: status-file: backup-status.json \"profile\" { \"status-file\" = \"backup-status.json\" } { \"version\": \"1\", \"profile\": { \"status-file\": \"backup-status.json\" } } Here is an example of a generated file showing the last check failed, while the last backup succeeded:\n{ \"profiles\": { \"self\": { \"backup\": { \"success\": true, \"time\": \"2021-03-24T16:36:56.831077Z\", \"error\": \"\", \"stderr\": \"\", \"duration\": 16, \"files_new\": 215, \"files_changed\": 0, \"files_unmodified\": 0, \"dirs_new\": 58, \"dirs_changed\": 0, \"dirs_unmodified\": 0, \"files_total\": 215, \"bytes_added\": 296536447, \"bytes_total\": 362952485 }, \"check\": { \"success\": false, \"time\": \"2021-03-24T15:23:40.270689Z\", \"error\": \"exit status 1\", \"stderr\": \"unable to create lock in backend: repository is already locked exclusively by PID 18534 on dingo by cloud_user (UID 501, GID 20)\\nlock was created at 2021-03-24 15:23:29 (10.42277s ago)\\nstorage ID 1bf636d2\\nthe `unlock` command can be used to remove stale locks\\n\", \"duration\": 1 } } } } ⚠️ Extended status In the backup section above, you can see fields like files_new and files_total. This information is available only when resticprofile’s output is redirected or when the extended-status flag is added to your backup configuration.\nThis limitation ensures restic displays terminal output correctly.\nThe following fields do not require extended-status or stdout redirection:\nsuccess time error stderr duration The extended-status flag is disabled by default because it suppresses restic’s output.\n​ toml yaml hcl json version = \"1\" [profile] status-file = \"/home/backup/status.json\" [profile.backup] extended-status = true source = \"/go\" exclude = [ \"/**/.git/\" ] version: \"1\" profile: status-file: /home/backup/status.json backup: extended-status: true source: /go exclude: - \"/**/.git/\" \"profile\" = { \"status-file\" = \"/home/backup/status.json\" \"backup\" = { \"extended-status\" = true \"source\" = \"/go\" \"exclude\" = [\"/**/.git/\"] } } { \"version\": \"1\", \"profile\": { \"status-file\": \"/home/backup/status.json\", \"backup\": { \"extended-status\": true, \"source\": \"/go\", \"exclude\": [ \"/**/.git/\" ] } } }",
    "description": "If you need to send your backup results to a monitoring system, use the run-after and run-after-fail scripts.\nFor simpler needs, resticprofile can generate a JSON file with details of the latest backup, forget, or check command. For example, I use a Zabbix agent to check this file daily. Any monitoring system that reads JSON files can be integrated.\nTo enable this, add the status file location as a parameter in your profile.",
    "tags": [
      "Monitoring"
    ],
    "title": "Status file",
    "uri": "/monitoring/status/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Using resticprofile",
    "content": "The version command displays resticprofile version. If run in verbose mode (using --verbose flag) additional information such as OS version, golang version and modules are displayed as well.\nresticprofile --verbose version",
    "description": "The version command displays resticprofile version. If run in verbose mode (using --verbose flag) additional information such as OS version, golang version and modules are displayed as well.\nresticprofile --verbose version",
    "tags": [],
    "title": "Version",
    "uri": "/usage/version/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Reference \u003e  Section Profile",
    "content": "Section profile.diff This section configures restic command diff . Information on command and flags is copied from the restic manual pages.\nThe “diff” command shows differences from the first to the second snapshot. The first characters in each line display what has happened to a particular file or directory:\n+ The item was added - The item was removed U The metadata (access mode, timestamps, …) for the item was updated M The file’s content was modified T The type was changed, e.g. a file was made a symlink ? Bitrot detected: The file’s content has changed but all metadata is the same Metadata comparison will likely not work if a backup was created using the ‘–ignore-inode’ or ‘–ignore-ctime’ option.\nTo only compare files in specific subfolders, you can use the “snapshotID:subfolder” syntax, where “subfolder” is a path within the snapshot.\nFlags used by resticprofile only: Name Type Default Notes run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands send-after one or more nested SendMonitoringSection Send HTTP request(s) after a successful restic command send-after-fail one or more nested SendMonitoringSection Send HTTP request(s) after failed restic or shell commands send-before one or more nested SendMonitoringSection Send HTTP request(s) before a restic command send-finally one or more nested SendMonitoringSection Send HTTP request(s) always, after all other commands Flags passed to the restic command line: Name Type Default Notes metadata true / false false print changes in metadata Tip Flags declared for the restic command line in section profile can be overridden in this section.",
    "description": "Section profile.diff This section configures restic command diff . Information on command and flags is copied from the restic manual pages.\nThe “diff” command shows differences from the first to the second snapshot. The first characters in each line display what has happened to a particular file or directory:\n+ The item was added - The item was removed U The metadata (access mode, timestamps, …) for the item was updated M The file’s content was modified T The type was changed, e.g. a file was made a symlink ? Bitrot detected: The file’s content has changed but all metadata is the same Metadata comparison will likely not work if a backup was created using the ‘–ignore-inode’ or ‘–ignore-ctime’ option.",
    "tags": [],
    "title": "diff",
    "uri": "/reference/profile/diff/index.html"
  },
  {
    "breadcrumb": "resticprofile",
    "content": "Note The configuration file reference is generated from resticprofile’s data model and restic’s manual pages.\nSection global Section Profile backup cache cat check copy diff dump features find forget init key key-add key-list key-passwd key-remove list ls migrate mount options prune rebuild-index recover repair repair-index repair-packs repair-snapshots restore retention rewrite snapshots stats tag unlock Nested Sections ScheduleBaseConfig ScheduleConfig SendMonitoringHeader SendMonitoringSection StreamErrorSection Section Groups Value types JSON Schema",
    "description": "Note The configuration file reference is generated from resticprofile’s data model and restic’s manual pages.\nSection global Section Profile backup cache cat check copy diff dump features find forget init key key-add key-list key-passwd key-remove list ls migrate mount options prune rebuild-index recover repair repair-index repair-packs repair-snapshots restore retention rewrite snapshots stats tag unlock Nested Sections ScheduleBaseConfig ScheduleConfig SendMonitoringHeader SendMonitoringSection StreamErrorSection Section Groups Value types JSON Schema",
    "tags": [],
    "title": "Resticprofile configuration reference",
    "uri": "/reference/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Reference \u003e  Section Profile",
    "content": "Section profile.dump This section configures restic command dump . Information on command and flags is copied from the restic manual pages.\nThe “dump” command extracts files from a snapshot from the repository. If a single file is selected, it prints its contents to stdout. Folders are output as a tar (default) or zip file containing the contents of the specified folder. Pass “/” as file name to dump the whole snapshot as an archive file.\nThe special snapshotID “latest” can be used to use the latest snapshot in the repository.\nTo include the folder content at the root of the archive, you can use the “snapshotID:subfolder” syntax, where “subfolder” is a path within the snapshot.\nFlags used by resticprofile only: Name Type Default Notes run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands send-after one or more nested SendMonitoringSection Send HTTP request(s) after a successful restic command send-after-fail one or more nested SendMonitoringSection Send HTTP request(s) after failed restic or shell commands send-before one or more nested SendMonitoringSection Send HTTP request(s) before a restic command send-finally one or more nested SendMonitoringSection Send HTTP request(s) always, after all other commands Flags passed to the restic command line: Name Type Default Notes archive string \"tar\" set archive format as “tar” or “zip”. restic \u003e= 0.12.0 host true / false OR one or more hostnames only consider snapshots for this host, when snapshot ID “latest” is given (can be specified multiple times) (default: $RESTIC_HOST). Boolean true is replaced with the hostname of the system. Examples: true, false, \"host\" path true / false OR one or more strings only consider snapshots including this (absolute) path, when snapshot ID “latest” is given (can be specified multiple times, snapshots must include all specified paths). Boolean true is replaced with the paths from section “backup”. Examples: true, false, \"path\" tag true / false OR one or more strings only consider snapshots including tag[,tag,…], when snapshot ID “latest” is given. Boolean true is replaced with the tags from section “backup”. Examples: true, false, \"tag\" target string \"\" write the output to target path. restic \u003e= 0.17.0 Tip Flags declared for the restic command line in section profile can be overridden in this section.",
    "description": "Section profile.dump This section configures restic command dump . Information on command and flags is copied from the restic manual pages.\nThe “dump” command extracts files from a snapshot from the repository. If a single file is selected, it prints its contents to stdout. Folders are output as a tar (default) or zip file containing the contents of the specified folder. Pass “/” as file name to dump the whole snapshot as an archive file.",
    "tags": [],
    "title": "dump",
    "uri": "/reference/profile/dump/index.html"
  },
  {
    "breadcrumb": "resticprofile",
    "content": "Please share your resticprofile recipes, fancy configuration files, or tips and tricks.\nI have created a contributions section for that matter.\nshell completion export status to grafana send email on systemd timer error get backup status information in zabbix scheduling inside a docker container backup stats in InfluxDB via Telegraf use a protected folder for configuration on Windows",
    "description": "Please share your resticprofile recipes, fancy configuration files, or tips and tricks.\nI have created a contributions section for that matter.\nshell completion export status to grafana send email on systemd timer error get backup status information in zabbix scheduling inside a docker container backup stats in InfluxDB via Telegraf use a protected folder for configuration on Windows",
    "tags": [],
    "title": "Contributions",
    "uri": "/contributions/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Reference \u003e  Section Profile",
    "content": "Section profile.features This section configures restic command features available since 0.18.0 . Information on command and flags is copied from the restic manual pages.\nThe “features” command prints a list of supported feature flags.\nTo pass feature flags to restic, set the RESTIC_FEATURES environment variable to “featureA=true,featureB=false”. Specifying an unknown feature flag is an error.\nA feature can either be in alpha, beta, stable or deprecated state. An alpha feature is disabled by default and may change in arbitrary ways between restic versions or be removed. A beta feature is enabled by default, but still can change in minor ways or be removed. A stable feature is always enabled and cannot be disabled. The flag will be removed in a future restic version. A deprecated feature is always disabled and cannot be enabled. The flag will be removed in a future restic version.\nFlags used by resticprofile only: Name Type Default Notes run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands send-after one or more nested SendMonitoringSection Send HTTP request(s) after a successful restic command send-after-fail one or more nested SendMonitoringSection Send HTTP request(s) after failed restic or shell commands send-before one or more nested SendMonitoringSection Send HTTP request(s) before a restic command send-finally one or more nested SendMonitoringSection Send HTTP request(s) always, after all other commands Tip Flags declared for the restic command line in section profile can be overridden in this section.",
    "description": "Section profile.features This section configures restic command features available since 0.18.0 . Information on command and flags is copied from the restic manual pages.\nThe “features” command prints a list of supported feature flags.\nTo pass feature flags to restic, set the RESTIC_FEATURES environment variable to “featureA=true,featureB=false”. Specifying an unknown feature flag is an error.\nA feature can either be in alpha, beta, stable or deprecated state. An alpha feature is disabled by default and may change in arbitrary ways between restic versions or be removed. A beta feature is enabled by default, but still can change in minor ways or be removed. A stable feature is always enabled and cannot be disabled. The flag will be removed in a future restic version. A deprecated feature is always disabled and cannot be enabled. The flag will be removed in a future restic version.",
    "tags": [],
    "title": "features",
    "uri": "/reference/profile/features/index.html"
  },
  {
    "breadcrumb": "resticprofile",
    "content": "v0.31.0 (2025-05-26) 🍸 Spring Bank Holiday release 🌞 This release includes several long-awaited improvements.\nImprovements: Add support for the new Restic flag exclude-cloud-files introduced in version 0.18.0 (Windows only). Include missing run-* and send-* targets in all commands (previously missing in check and copy commands). Send Restic version as a new Prometheus metric. Support .yml files when searching for configuration files (previously only .yaml was considered). Bug fixes: Ignore missing drop-in files to prevent creating an empty systemd schedule. Changelog Add missing run-* and send-* to all command sections (#504) add support for windows only flag exclude-cloud-files (#500) add support for yml extension when searching for configuration file (#506) add version of restic to the Prometheus metrics (#495) fix: remove duplicated field ignore missing drop-in files to avoid creating an empty configuration (#502) replace deprecated sonar scan action (#503) v0.30.1 (2025-05-05) 🐛 Bug fix release 🐞 This releases fixes a regression bug when scheduling system tasks with systemd: in some cases the HOME directory was replaced by the home directory of the user who ran the sudo command\nBug report: https://github.com/creativeprojects/resticprofile/issues/493\nChangelog fix root home regression bug in 0.30.0 (#497) v0.30.0 (2025-04-04) 🌱 Spring release 🌸 This release introduces features and fixes for profile scheduling.\n⚠️ Breaking change Until this release, the user scheduling permission was broken. With systemd or the default macOS scheduler, the permission functioned as user_logged_on, running the profile only when the user was logged in.\nThis issue is now fixed for new schedules.\nTo update existing schedules, run unschedule and then schedule again.\nFor systemd, resticprofile requires root privileges (via sudo) to schedule with user permission, as it now uses a system unit running as the user.\nScheduler Scheduling has been significantly improved with the ability to read existing schedules. The status and unschedule commands now detect any resticprofile schedules from the selected configuration file, even if the profile is no longer present.\nDue to recent error reports, Windows Task Scheduler integration has been completely rewritten to use the schtasks CLI tool.\nOther Fixed issue with non-existent battery reported on recent Mac desktop hardware. Added support for Restic 0.18. Included pre-built binary for Windows on ARM64. Upload Resticprofile container to GitHub Container Registry. Changelog Correct configuration search paths on Windows (#478) Create FUNDING.yml Documentation versioning (#464) Run tests on read only source dir (#461) Schedule user logged in (#470) Scheduling improvements (#425) Set schedule permissions (#476) Upload to Github Container Registry (#479) Use schtasks.exe CLI to schedule jobs on Windows (#459) add microarchitecture to version command (#466) add other restic exit codes chore: add pre-built binary for windows arm64 chore: add support for restic 0.18 don’t include systemd dependencies on macos \u0026 windows fix for macOs ghost battery (#468) remove devcontainer config replace experimental maps package with standard library (#467) v0.29.1 (2025-02-06) ❄️ Small maintenance release ☃️ Not much going on in this maintenance release while I’m still working on a big refactoring of the scheduling for the next release.\nlogrotate package added to the Docker image upgrade dependencies to fix security vulnerabilities Changelog add logrotate to docker image #440 upgrade package - CVE-2024-45337 upgrade packages v0.29.0 (2024-10-28) 🧙🏻‍♀️ Halloween edition 🎃 Finally a long standing bug was fixed in this version: use proper nice and ionice values on systemd scheduled tasks. Also the last chunk of work for the configuration v2: we can now schedule groups! Improvement on the JSON schema: a single URL can be used for v1 and v2 configuration Another long standing bug on Windows: escape configuration file path on scheduled tasks Changelog Escape config file name in schedule parameters (#420) Fix scheduling arguments (#423) Global json schema (auto versioning) (#412) Group schedule (#418) Setup systemd priority (#409) doc: upgrade hugo theme fix deprecated option in goreleaser config v0.28.1 (2024-10-02) 🍂 Autumn bug fixing 🍁 fix JSON schema for TOML files that stopped working some time ago (when using Even Better TOML extension on VSCode) [configuration v2] fix regression bug where profile groups were stopping after an error when the continue-on-error flag was set Changelog Fix for continue-on-error broken in 0.26.0 (#407) Linters (#397) add base url on json schema (#408) add misspell linter fix bullet points from restic man (#398) fix overflow integer conversion lint warning from gosec (#399) generate JSON schema for restic 0.17 prepare next release use goreleaser v2 v0.28.0 (2024-08-17) 🌞 Sunny Summer Edition 🌻 Two big things in this release:\nsupport for all the new commands and flags of restic 0.17 experimental support for environment variables in configuration flags Example of using environment variables in configuration: check-repo-profile: inherit: default run-before: - \"echo DOW=`date +\\\"%u\\\"` \u003e\u003e {{ env }}\" check: read-data-subset: \"$DOW/7\" Changelog Add contributed docs for protected configuration on Windows (#394) Restic 0.17 (#396) build with go 1.23 convert priority value to lowercase fix panic when sending on closed handler refactoring of arguments generation (#387) upgrade packages v0.27.1 (2024-07-08) 🌦️ Rainy Summer Edition ☔ Fix of a regression bug preventing resticprofile from sending logs to a temporary session log file (prefixed with temp:/t/) Thanks @iluvatyr for the quick bug report 👍🏻\nChangelog fix creation of mock binaries during unit tests (#375) fix documentation for release fix regression with temporary log file (#386) prepare next release refactor unit tests on package lock (#374) remove flaky test remove goarm linked to the internal variable of runtime go1.23 will apparently forbid the use of linkname to the standard library v0.27.0 (2024-06-27) 🌻 Summer release 🌞 Summer is here in the Northern Hemisphere! A new release is here too! 🎉\nA lot of goodies in this release:\nnew run-schedule command It’s more a behind the scene feature: you no longer need to re-schedule your targets after you changed the configuration. The generated schedule command line is now using this new run-schedule command that reads all the newest bits from the configuration.\nYou might want to unschedule and schedule all your profiles one last time to replace the existing command line using the new run-schedule command.\nMore information: https://creativeprojects.github.io/resticprofile/schedules/commands/index.html#run-schedule-command\ndirect support for crontab files Previously resticprofile was using the crontab tool to read and write crond schedules. Now you can directly setup a crontab file no matter which tool is going to consume it.\nMore information: https://creativeprojects.github.io/resticprofile/schedules/index.html\nkeep content of configuration variables between commands This was a big issue for some time. The wait is over! You can now set a configuration variable anywhere in a script and use its value later.\nMore information: https://creativeprojects.github.io/resticprofile/configuration/run_hooks/index.html#passing-environment-variables\n“RESTICPROFILE_{FLAGNAME}” env vars All cli flags can now be set using environment variables.\nMore information: #334\nallow controlling command output redirection Allow redirection of the console messages to a log file or to syslog.\nMore information: #343\nAdd “–stderr” to redirect console to stderr (for “cat” and “dump”) More information: https://github.com/creativeprojects/resticprofile/pull/353\nAdd option to set working directory for restic backup More information: https://github.com/creativeprojects/resticprofile/pull/354\nmany bug fixes! Changelog Add “–stderr” to redirect console to stderr (for “cat” and “dump”) (#353) Add documentation on how to ingest resticprofile stats into telegraf (#366) Add option to set working directory for restic backup (#354) Fix group priority (#339) Relative source followup: Evaluate symlinks (#355) Squashed commit of the following: (#259) add “profile” flag as an alias for “name” (#357) also search configuration from ~/.config/resticprofile on macOS (#370) crond: add support for crontab file only (on any OS) (#289) don’t replace header value in stringifyHeaders (#327) drop-ins: move systemd drop-ins into unified schedule struct (#341) drop-ins: transparent timer drop-in support (#340) env-file: Implement dotenv and {{env}} support (#323) fix remaining unit tests failing in Windows (#360) fixed link to config reference / global section (#349) flags: added “RESTICPROFILE_{FLAGNAME}” env vars (#335) log: allow controlling command output redirection (#343) restic: use repository-file if the repo flag contains a password (#336) schedule: added unified schedule config struct (#333) syslog: local syslog and stdout redirection (#344) build with go 1.22 and macOs arm64 (#317) update test to pass on Windows 11 (#359) upgrade packages (CVE-2024-24786) (#347) upgrade packages (CVE-2024-6104) v0.26.0 (2024-02-20) 🦆 Second time lucky February release 🚀 🆕 A lot of pre-built binaries have been added on this release. This is to align with the list of pre-built binaries provided by restic\nOtherwise this is mostly a maintenance release with a few fixes:\nfixes multiple backup profiles exporting prometheus files to node_exporter fix missing fields in the show command weekly docker image build (rebuilt under the same version tag, and as latest) restrict the copy command to a list of snapshots in the configuration Changelog Add pre-built binary targets to release pipeline (#324) Add prometheus label to build info (#319) Change priority warning message (#310) Fix missing fields in show command (#315) Merge pull request #312 from creativeprojects/nightly Restrict copy command to a list of snapshots (#291) add separate goreleaser config for rebuilding the docker image only (#309) add snapshot build to docker hub publish docker images and manifest manually (#313) v0.25.0 (2024-02-08) 💖 February release 💝 ⚠️ Potential breaking change The prometheus library used to send metrics to the proxy using protobuf. By default it’s now using the more widely used text format.\nIf you have any issue sending metrics to your proxy, you can revert to the previous behaviour by adding this option to your profile (it’s not a global option)\nmy_profile: prometheus-push-format: protobuf More information about the different formats: https://prometheus.io/docs/instrumenting/exposition_formats/#exposition-formats\nNew in this version fix for CVE-2023-48795 new option prometheus-push-format with values text or protobuf (#281) new option to set log output in global section (#277) more control over the default systemd service files (#267) and bug fixes! Thanks to all our contributors for the good work!\nChangelog Add prometheus-push-format to allow selecting text format (#281) Pass context to own commands and profile runner (#280) Remove rclone binary in make clean target (#283) Trying new configuration for CodeQL (#306) Upgrade packages (#307) chore: prep next release \u0026 allow deployment to fail on PR chore: various fixes (#285) doc: add information about windows path in variables doc: add various missing information (#278) logging: allow to setup default log output in global (#277) macOS: create LaunchAgents folder if it doesn’t exist profile: support source with “-” (dash) prefix (#276) systemd drop-ins support, option to wait for network-online.target (#267) v0.24.0 (2023-10-24) 🎃 October release 👻 upgrade dependencies to fix CVE-2023-3978, CVE-2023-39325 and CVE-2023-44487 fix the broken documentation (some tabs were not accessible) can now stop the wait for a lock (restic or resticprofile lock). Before the fix the CTRL-C or other signal was ignored until the lock was acquired or timed out. resticprofile is now available on scoop! thanks @hgraeber detect if the host is running on battery and cancel an action depending on how much battery is left - see schedule section bug fixes (see changelog) Changelog Allow to interrupt the wait for a lock (#249) Detect if running on battery (#235) Docs for installation from scoop (#268) Fix doc shortcodes (#271) Template: Reduce log level for Getwd() failures (#251) systemd: prevent paging in systemd schedules (#270) upgrade packages - CVE-2023-3978 - CVE-2023-39325 - CVE-2023-44487 v0.23.0 (2023-08-11) 🌞 New summer edition 🌻 This release mostly fixes a few regression from version 0.21.0 and adds a handful of new features:\nAllow to set base-dir and source-dir in a profile so you can start resticprofile from any current folder Allow to set keep-tag, tag \u0026 group-by as empty string Support for restic v0.16 new flags Thanks to all the contributors for the great work 👍🏻\nChangelog Added {{ “data” | base64 }} \u0026 {{ “data” | hex }} (#213) Allow to set a base-dir inside the profile (#183) (#192) Fix 194: Allow to set “keep-tag”, “tag” \u0026 “group-by” as empty string (#220) Fix 218: Args filter must not remove paths (#222) Fix 223, 230: Escape args and absolute restic path for pwsh (#224) Fix 242: iexclude-file not converted to abs path (#243) Fix links for versioned JSON schema files (#244) Fix schedule tests (#236) Fix: Do not add --tag for tag: true (#221) Restic: Add restic v16 release (#238) Restic: Fixed unit tests for restic v16 (#239) Retention: Align host filter with “backup” (#227) Schedule: Capture os.Environ on schedule creation (#212) Support lock-wait with --lock-retry in restic 0.16 (#240) Support build when GOPATH is unset / fix mockery build warning (#234) Variables: Allow to escape “$” with “$$” (#216) v0.22.0 (2023-05-06) ⚠️ Breaking change The default value of the job tag on prometheus gateway push has changed from command to profile.command. But don’t worry: you can easily revert back to the original value by adding this option in your configuration:\nprometheus-push-job: \"${COMMAND}\" Fixes: Complicated scheduling on Windows was sometimes setting up a random delay before starting a job Changelog New option to specify Prometheus Pushgateway job name (#193) Templates: Add map/splitR/contains/matches (#197) Upgrade task scheduler library (#206) v0.21.1 (2023-04-05) Bug fixes! This small release fixes two regression bugs introduced in version 0.21.0\nthe ~ was no longer replaced by the user’s home directory for some flag (repository and others…) environment variables were no longer replaced by their value for some flag (repository and others…) Thanks @jkellerer for the quick fixes 😉 👍🏻\nNew features from v0.21.0 This release adds a verification of all the flags permitted by restic. Only the flags compatible with your version of restic will be generated (prior to this version, any flag like unknown-flag would end up on the restic command line as --unknown-flag.\nAlso this version generates a JSON schema: this is the configuration schema which can auto-complete options, and verify that your configuration is correct. It works with any compatible editor for the JSON, TOML and YAML configuration file format. Thanks @jkellerer for the awesome work on this 🎉 . More information here.\nOther nice feature is the introduction of the help command which works for both all the resticprofile and restic commands and flags. Try it out!\nChangelog Fix #187: homedir/env-vars in repo and other flags (#188) Fix #189: completion of own commands (#190) Updated clog to 0.13 (#191) v0.21.0 (2023-04-03) This is a great milestone for resticprofile 🥳 This release adds a verification of all the flags permitted by restic. Only the flags compatible with your version of restic will be generated (prior to this version, any flag like unknown-flag would end up on the restic command line as --unknown-flag.\nAlso this version generates a JSON schema: this is the configuration schema which can auto-complete options, and verify that your configuration is correct. It works with any compatible editor for the JSON, TOML and YAML configuration file format. Thanks @jkellerer for the awesome work on this 🎉 . More information here.\nOther nice feature is the introduction of the help command which works for both all the resticprofile and restic commands and flags. Try it out!\nAnd as usual, a lot of bug fixes 😉\nChangelog Add variables .OS and .Arch to all templates (#181) Allow config encoding in UTF16 and ISO88591 Enhanced: Catch any –help \u0026 –dry-run (http only) (#178) Feature: JSON schema (#103) \u0026 generated reference Fix #164: Failure on uppercase mixin names Implement tempDir and log without locking (#168) (#174) Make URL and header confidential in HTTP-hook (#175) Restic: Add restic v15 release (#180) add build tag to disable self-update (#184) add suppport for user_logged_on (#160) build with go 1.20 upgrade packages CVE-2022-41721 v0.20.0 (2023-01-23) Not too many new features in this release, but I wanted to build a new docker image with the new restic 0.15.0\nImprovements Adds shell command hooks to the following additional commands: dump, find, ls, mount, restore, snapshots, stats and tag. Docker image now contains ssh (to allow sftp repository), curl, tzdata and ca-certificates Changelog Merge pull request #154 from jkellerer/ft-151 New docker image (#161) Run-hooks for all non-conflicting commands (#151) add QEMU for github agent to build an arm64 image dry-run should not send web hooks #157 v0.19.0 (2022-11-11) New version 0.19.0 of resticprofile! With:\nNew help system showing all flags from resticprofile and restic. Just type resticprofile help backup and see (thanks @jkellerer) copy command now has run-before, run-after, run-after-fail and run-finally targets. Also more targets are now available for backup and for a profile. See the documentation. groups of profiles can keep running after a profile failed (this is a global settings) Prevent your system from idle sleeping (Windows, macOS, and unix type OS using systemd) May contain nuts Changelog Add –help to own commands (e.g. generate –help) (#139) Add last backup time to prometheus metrics (#132) Config: Add run before/after/fail to more restic commands than backup (#138) Continue profile in group on error (#149) Fixes zsh completion script (use of outdated CLI) (#150) Prevent system from idle sleeping (#140) add devcontainer config chore: upgrade packages v0.18.0 (2022-08-29) Following the release of the long awaited restic 0.14.0, here’s a new resticprofile!\nA few big features were introduced in this version:\nHTTP hooks using a similar syntax to command hooks but sending HTTP messages to monitoring platforms Better support of the new-ish copy command Addition of mixins on configuration file v2 (in preview) Ability to choose your preferred shell on Windows (cmd, powershell or bash) Send resticprofile logs to a syslog server Add armv8 (arm64) CPU target to docker images Upgrade to restic 0.14.0 in docker image Add rclone to docker image Also search for a configuration file in the resticprofile program folder on Windows (to be used in portable mode) Changelog Add http hooks (#114) Add support for syslog (#127) Allow to choose shell in global config (#112) ConfigV2: Mixins (#115) ConfigV2: Replace list params - fix #108 (#113) Initialise copy repository using –copy-chunker-params (#117) Mixins: List merging \u0026 inheritance update (#121) add binary dir in path and .BinaryDir template var (#134) add goreleaser config to also build arm64 images add rclone to docker image #131 upgrade packages (CVE-2022-28948) v0.17.0 (2022-05-16) Here it is! It’s been a while since we released a new version 😞 The resticprofile team has been busy preparing some really cool new features:\nsimplify the command line by allowing the use of [profile].[command] - Thanks @Syphdias for the PR #89 shell completion (for bash, can also be used by zsh with bash compatibility) - Thanks @jkellerer for the PR #90 run a shell command to use as a stdin input (like mysqldump) - Thanks @jkellerer for the PR #98 run a shell command in the background when non fatal errors are detected from restic - Thanks @jkellerer for the PR #99 and a lot of bug fixes 👍🏻\nChangelog Add run flag to to be able to have profile and job name as one argument (#89) Added “generate” command to create resources (#110) Added missing cmds that filter by host, tag \u0026 path Feature: Take command output as stdin for restic (#98) Fix and unit tests for #91 Fix config includes when any pattern has no match (#95) Implemented stream-error callbacks (#99) Merge pull request #101 from jkellerer/fix-common-args Merge pull request #94 from jkellerer/ft-add-missing-commands Only pass common CLI args to command hooks [#100] Shell completion (#90) display a neat stack trace on panic fix for profiles command not showing inherited commands fixes second part of #97 remove “includes” section from profiles in “profiles” command v0.16.1 (2022-01-30) New maintenance version, with bug fixes:\nfix multiplication of arguments when commands are retried fix status file telling the backup was successful when a warning happened (file/dir not found) Changelog Fix args are multiplied when commands are retried (#84) Fix for #88 with unit tests don’t inherit profile description prepare for future versions of the configuration show schedules separately simple implementation of a config file v2 update packages v0.16.0 (2021-10-18) This release adds a few new features:\nsupport for splitting configuration into multiple files support for run-finally that runs shell commands every time after restic ability to define your own systemd unit and timer files (from go templates) support for the restic copy command fix for some cosmetic issues with crond scheduler Changelog Add support for copy command (#73) Change codecov uploader to use GitHub Action v2 (#79) Optional: Allow disabling path in retention with ‘false’ (#67) Scheduler refactoring (#76) Support “run-finally” in backup-section \u0026 profile (#70) Supporting config includes (e.g. profiles.d) (#65) Systemd template (#75) add tests on crontab crontab RemoveJob returns error if the entry was not found upgrade dependencies Docker images docker pull creativeprojects/resticprofile:0.16.0 v0.15.0 (2021-08-29) ⚠️ Important Version 0.15 fixed some issues with escaping parameters to the restic command line. If you’ve used any of these characters in file or directory names in your configuration, please make sure your backup is still working as expected: space, *, ?, \\, [, ', \".\nIf for some reason the fix broke your configuration, there’s a new flag legacy-arguments that you can activate in the global section to revert back to the broken implementation:\nglobal: legacy-arguments: true New features in 0.15: add .Hostname in configuration template (#55) add description field in profile section add support for prometheus file export and push gateway hide confidential values in output (#58) add .TmpDir variable to configuration template (#62) This version also includes fixes for: resolving special paths starting with a ~ (unixes only) warn when the restic binary was not found at the specified location (but still found at a different location) resolve glob expressions in backup sources (#63) Changelog Add support for prometheus export and push (#57) Added “{{.TmpDir}}” to TemplateData (#62) Feature: Hide confidential values in output (#58) Resolve glob expressions in backup sources (#63) Shell escape (#60) Update non-confidential values to support shell.Args (#68) add Hostname pre-defined variable to template resolver (#55) add description field in profile section build with go 1.17 don’t send status summary in dry-run show description in output of profiles command Docker images docker pull creativeprojects/resticprofile:0.15.0 v0.14.1 (2021-06-23) Bug fix release This release changes the way the restic binary is searched:\nrestic binary path in global configuration can now contain the ~ character like ~restic/bin/restic if you specified a path in the global configuration and it cannot find the file, a warning will be displayed and resticprofile will keep trying to find a suitable binary Changelog use shell to resolve special paths with ~ warning when the restic-binary was not found Docker images docker pull creativeprojects/resticprofile:0.14.1 v0.14.0 (2021-05-11) Release 0.14.0 New locking/unlocking features. Thanks jkellerer for the PR Changelog Added resticprofile flags –no-lock \u0026 –lock-wait (#33) Summary from plain output when not run in terminal (#48) Updated contrib script systemd/send-error.sh (#49) add macOS arm64 target to install.sh script add token as an environment variable Docker images docker pull creativeprojects/resticprofile:latest docker pull creativeprojects/resticprofile:0.14.0 v0.13.2 (2021-04-20) This version fixes a defect where extended status wasn’t returning the extended information on Windows.\nChangelog add Homebrew Tap (#45) add github token in config fix test too slow on build agent fix windows bogus prefix (#47) Docker images docker pull creativeprojects/resticprofile:latest docker pull creativeprojects/resticprofile:0.13.2 v0.13.1 (2021-03-26) Bug fix:\nregression from v0.13.0: a message was sent to stderr when initialize parameter was set and the repository already exists Changelog Increase test coverage (#40) fix #41: a message was sent to stderr when parameter initialize=true and repo exists Docker images docker pull creativeprojects/resticprofile:latest docker pull creativeprojects/resticprofile:0.13.1 v0.13.0 (2021-03-24) This version adds two new features:\nparameter no-error-on-warning to consider a backup successful when restic produced a new snapshot but some files were missing (https://github.com/creativeprojects/resticprofile/discussions/38) resticprofile now catches the error output (stderr) to be written in the status file, also makes the environment variable RESTIC_STDERR available to the targets run-after-fail. Changelog add RESTIC_STDERR env variable to run-after-fail quick implementation of ignore warning quick mock to do some testing with a fake restic returns stderr output in the status file Docker images docker pull creativeprojects/resticprofile:latest docker pull creativeprojects/resticprofile:0.13.0 v0.12.0 (2021-03-18) This release mainly brings 2 new features and a few enhancements:\nadd support for --all in status, schedule, unschedule commands add backup statistics to the status file (via a new extended-status flag) Changelog Add backup statistics in status file (#36) Added fail env variable ERROR_COMMANDLINE (#32) Added support for –all to status \u0026 (un)schedule (#31) Enhanced “unschedule” to remove all possible jobs (#28) add profile name when running status –all fix an issue where status –all was stopping at the first profile with no schedule update goreleaser config to v0.154 upgrade packages upgrade self-update library use go 1.16 Docker images docker pull creativeprojects/resticprofile:latest docker pull creativeprojects/resticprofile:0.12.0 v0.11.0 (2021-01-20) Highlights: detect systemd using systemctl: https://github.com/creativeprojects/resticprofile/issues/25 add experimental support for scheduling tasks with crond add support for background tasks on Mac OS via a new schedule-priority parameter add support for scheduling forget and prune commands Deprecation Scheduling in the retention section is now deprecated, please use the forget section instead (https://github.com/creativeprojects/resticprofile/issues/23)\nChangelog Add background types and low priorityIO to launchd plist (#19) Add support for scheduling forget (#26) Added prune as supported, schedulable command (#24) Move CI build from Travis CI to GitHub Actions Refactoring schedule package (#30) Schedule priority (#29) add crond support to unix targets (except macOS) add deprecation notice for schedule on retention add docker build to goreleaser add pre-release parameter to self-update add schedule-priority parameter add working directory to crontab line allow verbose flag after the command display systemd timer status in a nicer way also display log \u003e= “warning” instead of “err” move other-flags before the sub-sections refactor show command to remove empty lines search for systemctl instead of systemd upgrade clog package Docker images docker pull creativeprojects/resticprofile:latest docker pull creativeprojects/resticprofile:0.11.0 v0.10.1 (2020-11-17) This update changes the way systemd units are generated: These used to be of type oneshot but it means they can be started more than once. They have been changed to notify which is like simple but resticprofile is notifying systemd that the schedule has started and stopped.\nTo change the type on your existing schedules, you’ll need to run the commands unschedule and schedule again.\nChangelog change systemd unit to “notify” update packages verify self-update binary using checksums.txt file update restic to 0.11.0 in docker image v0.10.0 (2020-11-12) New resticprofile version with bug fixes and a big new feature:\nfix –exclude and –iexclude parameters in unix environment not properly escaping ? and * characters don’t escape (space) if already escaped self-update now works on ARM CPUs (like raspberry pi) configuration files can embed Go templates for modularity I think it is now feature complete for a version 1.0 😄\nChangelog Escape exclude globs passed to /sh add proper character escaping: - count the number of \\ in front - do not escape it again if it was already escaped change self-updater library to work with ARM cpus detect arm version from runtime internal register new version of the updater put armv7 target back squash merge of branch config-single-template: add templating and variable expansion upgrade clog package upgrade selfupdate package v0.9.2 (2020-11-02) A few minor features and bug fixes:\nadd version command add force-inactive-lock flag in profiles Changelog Add “option” in example configurations in README and azure.conf fixes https://github.com/creativeprojects/resticprofile/issues/13 Add version command add tests on set and get PID from lock file remove openbsd from goreleaser library github.com/shirou/gopsutil cannot be compiled for openbsd squash merge of branch pid: should fix https://github.com/creativeprojects/resticprofile/issues/14 use go 1.15 for ci builds write down child PIDs in lock file v0.9.1 (2020-08-03) Two new features in this release:\nadd a few environment variables when running scripts (run-before, run-after, run-after-fail) add a status file generated after running a profile (to send to some monitoring software) Changelog Merge branch run-after-fail merge from branch status-file v0.9.0 (2020-07-29) A few new big features in this release:\nadd --dry-run flag redirect console to a file with --log (for running in the background) generate random keys with generate-random command schedule/unschedule profiles automatically with command schedule/unschedule (also status to check a scheduled task) Changelog add SUDO_USER to systemd environment add dry-run flag add file logger add journalctl to status output add schedule documentation to README add schedule parameter in config add windows task scheduler create plist file for darwin create system job on darwin full implementation of systemd user unit generate random keys generate schedule for darwin implement schedule-log move logger into external package only ask for the user password once redirect terminal when elevated mode send message from elevated process to parent process via some simple http calls send terminal output remotely sudo trick in the example configuration system daemon with launchd systemd user/system v0.8.3 (2020-07-13) Bug fixing release:\nrestic flags were not generated for commands forget and mount https://github.com/creativeprojects/resticprofile/issues/9 Changelog add restic flags for forget and mount commands add test to verify forget flags are loaded for all configuration types version 0.8.3 v0.8.2 (2020-07-09) This is a bug fixing release:\nin the configuration file, some strings containing a comma were split into an array of strings. This is now fixed. Changelog add table of contents build 0.8.2 document new features in README remove armv7 packages from goreleaser remove default decode hooks (which can do funny things with tags) v0.8.1 (2020-07-02) This is mostly a bug fixing release:\nallow for spaces in directories and files (these were ignored before and were messing up the command line) add a show command to see the profile details (mostly for debugging really) add a --format flag to specify the type of configuration file format (if you want to use a different extension) Changelog add –format flag to specify the config format add command ‘show’ to display profile properties add show command to help allow spaces in directories and files change expected structure in unit tests display correct XDG directories in error message update dependencies v0.8.0 (2020-06-29) This version is introducing a few new features:\nexperimental support for HCL configuration files a configuration file with no extension is searched using all supported file extensions: -c profiles would either load profiles.conf, profiles.yaml, profiles.toml, profiles.json or profiles.hcl a new global parameter to check available memory before starting a profile (default is 100MB) Changelog Initial support for HCL configuration file Refactoring y/n question add OS \u0026 ARCH to panic data add missing build info to docker image add note with self-updating on linux/arm add safeguard to prevent running restic when memory is running low: “min-memory” in “global” add section on where to locate configuration file bump version example of configuration in HCL refactor configuration as a dependency as opposed to a global search for configuration file without an extension resticprofile will load the first file with a valid extension (conf, yaml, toml, json, hcl) update xdg paths in documentation v0.7.1 (2020-06-25) This a maintenance release:\nadd a new parameter run-after-fail which is running the shell commands after any kind of failure (during other commands or during restic execution) a minor breaking change if you use the repository auto-initialization, it will now run after the run-before scripts. It makes more sense this way (in case you mount your backup disks in run-before for example) Changelog add raspberry pi to supported platforms add run-after-fail parameter to run shell commands after a restic command failed. the auto initialization of a repository now happens after the “run-before” scripts (in version 0.7.0 it was happening before) detect panic and display a nice message asking the user to post details on github fix self-update not working on windows run self-update command with no configuration file v0.7.0 (2020-06-24) This is a maintenance release:\nfixing a defect when starting a backup with no command definition for backup adding two new options to run scripts before and after a profile (not just backup like before) implementation of a new module to create systemd units. More to come on future releases Changelog Bump up version Fix update confirmation message Refactoring resticprofile commands add goreleaser target to build for raspberry pi initial support for systemd run shell commands before and after a profile. In previous versions, you could only run commands before and after a backup stop creating empty configuration file at XDG config location v0.6.1 (2020-04-22) Changelog Activate self-update flag Add .tar.gz binary for mac os Build tar.gz for windows so we can download it from git bash Clean up lock file after pressing CTRL-C Fix nil pointer panic when retention not defined v0.6.0 (2020-04-07) Complete rewrite of resticprofile in go:\nI tried python and I wasn’t particularly impressed I tried go and I loved it (also that’s what all the cool kids do nowadays) The default configuration profiles.conf is still expected to be in TOML format. But now, resticprofile also supports YAML and JSON file format. Simply feed a .toml, .json or a .yaml file to select the desired format.\nThe configuration file from the previous versions remains unchanged. There are two additions to it:\npriority flags: acts like nice on unixes and now available on all platforms lock flag to avoid running two profiles at the same time (this is a local lock) v0.5.2 (2019-09-26) Accept a repository from the environment instead of the configuration file\nv0.5.1 (2019-08-12) Add a timestamp before each message Use colours more readable on light console Add a flag to disable all ansi characters (to redirect the output to a file) v0.5.0 (2019-06-26) Adds support for stdin file stream\nv0.4.1 Beta (2019-06-26) Adding ‘mount’ command support Allow chained inheritance of environment variables Allow inheritance on ‘retention’ section v0.4.0 Beta (2019-06-25) Removing ugly KeyboardInterrupt message when you hit CTRL-C Allow the host flag to be a boolean (if set to yes the current hostname will be used) Also search for restic binary under Windows (like the chocolatey bin folder) Adding two options to check repository before and/or after a backup: ‘check-before’ and ‘check-after’ Run shell commands before and after a backup: ‘run-before’ and ‘run-after’ v0.3.0 Beta (2019-06-24) Added “groups”: ability to define groups of profiles to run at once v0.2.0 Beta (2019-06-24) Fixed compatibility with Windows Fixed defect in profile inheritance v0.1.0 Beta (2019-06-24) First ‘usable’ version of resticprofile!\nPlease note the groups are not working yet (groups can run multiple configuration in one command)",
    "description": "v0.31.0 (2025-05-26) 🍸 Spring Bank Holiday release 🌞 This release includes several long-awaited improvements.\nImprovements: Add support for the new Restic flag exclude-cloud-files introduced in version 0.18.0 (Windows only). Include missing run-* and send-* targets in all commands (previously missing in check and copy commands). Send Restic version as a new Prometheus metric. Support .yml files when searching for configuration files (previously only .yaml was considered). Bug fixes: Ignore missing drop-in files to prevent creating an empty systemd schedule. Changelog Add missing run-* and send-* to all command sections (#504) add support for windows only flag exclude-cloud-files (#500) add support for yml extension when searching for configuration file (#506) add version of restic to the Prometheus metrics (#495) fix: remove duplicated field ignore missing drop-in files to avoid creating an empty configuration (#502) replace deprecated sonar scan action (#503) v0.30.1 (2025-05-05) 🐛 Bug fix release 🐞 This releases fixes a regression bug when scheduling system tasks with systemd: in some cases the HOME directory was replaced by the home directory of the user who ran the sudo command",
    "tags": [],
    "title": "Release Notes",
    "uri": "/changelog/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Reference \u003e  Section Profile",
    "content": "Section profile.find This section configures restic command find . Information on command and flags is copied from the restic manual pages.\nThe “find” command searches for files or directories in snapshots stored in the repo. It can also be used to search for restic blobs or trees for troubleshooting. The default sort option for the snapshots is youngest to oldest. To sort the output from oldest to youngest specify –reverse.\nFlags used by resticprofile only: Name Type Default Notes run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands send-after one or more nested SendMonitoringSection Send HTTP request(s) after a successful restic command send-after-fail one or more nested SendMonitoringSection Send HTTP request(s) after failed restic or shell commands send-before one or more nested SendMonitoringSection Send HTTP request(s) before a restic command send-finally one or more nested SendMonitoringSection Send HTTP request(s) always, after all other commands Flags passed to the restic command line: Name Type Default Notes blob true / false false pattern is a blob-ID host true / false OR one or more hostnames only consider snapshots for this host (can be specified multiple times) (default: $RESTIC_HOST). Boolean true is replaced with the hostname of the system. Examples: true, false, \"host\" human-readable true / false false print sizes in human readable format. restic \u003e= 0.16.0 ignore-case true / false false ignore case for pattern long true / false false use a long listing format showing size and mode newest string \"\" newest modification date/time oldest string \"\" oldest modification date/time pack true / false false pattern is a pack-ID path true / false OR one or more strings only consider snapshots including this (absolute) path (can be specified multiple times, snapshots must include all specified paths). Boolean true is replaced with the paths from section “backup”. Examples: true, false, \"path\" reverse true / false false reverse sort order oldest to newest. restic \u003e= 0.18.0 show-pack-id true / false false display the pack-ID the blobs belong to (with –blob or –tree) snapshot one or more strings snapshot id to search in tag true / false OR one or more strings only consider snapshots including tag[,tag,…]. Boolean true is replaced with the tags from section “backup”. Examples: true, false, \"tag\" tree true / false false pattern is a tree-ID Tip Flags declared for the restic command line in section profile can be overridden in this section.",
    "description": "Section profile.find This section configures restic command find . Information on command and flags is copied from the restic manual pages.\nThe “find” command searches for files or directories in snapshots stored in the repo. It can also be used to search for restic blobs or trees for troubleshooting. The default sort option for the snapshots is youngest to oldest. To sort the output from oldest to youngest specify –reverse.\nFlags used by resticprofile only: Name Type Default Notes run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands send-after one or more nested SendMonitoringSection Send HTTP request(s) after a successful restic command send-after-fail one or more nested SendMonitoringSection Send HTTP request(s) after failed restic or shell commands send-before one or more nested SendMonitoringSection Send HTTP request(s) before a restic command send-finally one or more nested SendMonitoringSection Send HTTP request(s) always, after all other commands Flags passed to the restic command line: Name Type Default Notes blob true / false false pattern is a blob-ID host true / false OR one or more hostnames only consider snapshots for this host (can be specified multiple times) (default: $RESTIC_HOST). Boolean true is replaced with the hostname of the system. Examples: true, false, \"host\" human-readable true / false false print sizes in human readable format. restic \u003e= 0.16.0 ignore-case true / false false ignore case for pattern long true / false false use a long listing format showing size and mode newest string \"\" newest modification date/time oldest string \"\" oldest modification date/time pack true / false false pattern is a pack-ID path true / false OR one or more strings only consider snapshots including this (absolute) path (can be specified multiple times, snapshots must include all specified paths). Boolean true is replaced with the paths from section “backup”. Examples: true, false, \"path\" reverse true / false false reverse sort order oldest to newest. restic \u003e= 0.18.0 show-pack-id true / false false display the pack-ID the blobs belong to (with –blob or –tree) snapshot one or more strings snapshot id to search in tag true / false OR one or more strings only consider snapshots including tag[,tag,…]. Boolean true is replaced with the tags from section “backup”. Examples: true, false, \"tag\" tree true / false false pattern is a tree-ID Tip Flags declared for the restic command line in section profile can be overridden in this section.",
    "tags": [],
    "title": "find",
    "uri": "/reference/profile/find/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Reference \u003e  Section Profile",
    "content": "Section profile.forget This section configures restic command forget . Information on command and flags is copied from the restic manual pages.\nThe “forget” command removes snapshots according to a policy. All snapshots are first divided into groups according to “–group-by”, and after that the policy specified by the “–keep-” options is applied to each group individually. If there are not enough snapshots to keep one for each duration related “–keep-{within-,}” option, the oldest snapshot in the group is kept additionally.\nPlease note that this command really only deletes the snapshot object in the repository, which is a reference to data stored there. In order to remove the unreferenced data after “forget” was run successfully, see the “prune” command.\nPlease also read the documentation for “forget” to learn about some important security considerations.\nFlags used by resticprofile only: Name Type Default Notes run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands schedule one or more strings OR nested ScheduleConfig Configures the scheduled execution of this profile section. Can be times in systemd timer format or a config structure. Examples: hourly, daily, weekly, monthly, 10:00,14:00,18:00,22:00, Wed,Fri 17:48, *-*-15 02:45, Mon..Fri 00:30 schedule-after-network-online true / false Don’t start this schedule when the network is offline (supported in “systemd”) schedule-capture-environment one or more strings RESTIC_* Set names (or glob expressions) of environment variables to capture during schedule creation. The captured environment is applied prior to “profile.env” when running the schedule. Whether capturing is supported depends on the type of scheduler being used (supported in “systemd” and “launchd”) schedule-ignore-on-battery true / false false Don’t start this schedule when running on battery schedule-ignore-on-battery-less-than integer Don’t start this schedule when running on battery and the state of charge is less than this percentage. Examples: 20, 33, 50, 75 schedule-lock-mode string default Specify how locks are used when running on schedule - see schedules/configuration/. Is one of default, fail, ignore schedule-lock-wait integer OR duration Set the maximum time to wait for acquiring locks when running on schedule. Examples: 150s, 15m, 30m, 45m, 1h, 2h30m schedule-log string Redirect the output into a log file or to syslog when running on schedule. Examples: /resticprofile.log, syslog-tcp://syslog-server:514, syslog:server, syslog: schedule-permission string auto Specify whether the schedule runs with system or user privileges - see schedules/configuration/. Is one of auto, system, user, user_logged_on schedule-priority string standard Set the priority at which the schedule is run. Is one of background, standard send-after one or more nested SendMonitoringSection Send HTTP request(s) after a successful restic command send-after-fail one or more nested SendMonitoringSection Send HTTP request(s) after failed restic or shell commands send-before one or more nested SendMonitoringSection Send HTTP request(s) before a restic command send-finally one or more nested SendMonitoringSection Send HTTP request(s) always, after all other commands Flags passed to the restic command line: Name Type Default Notes compact true / false false use compact output format dry-run true / false false do not delete anything, just print what would be done group-by string host,paths group snapshots by host, paths and/or tags, separated by comma (disable grouping with ‘’) host true / false OR one or more hostnames only consider snapshots for this host (can be specified multiple times) (default: $RESTIC_HOST). Boolean true is replaced with the hostname of the system. Examples: true, false, \"host\" keep-daily integer 0 keep the last n daily snapshots (use ‘unlimited’ to keep all daily snapshots) keep-hourly integer 0 keep the last n hourly snapshots (use ‘unlimited’ to keep all hourly snapshots) keep-last integer 0 keep the last n snapshots (use ‘unlimited’ to keep all snapshots) keep-monthly integer 0 keep the last n monthly snapshots (use ‘unlimited’ to keep all monthly snapshots) keep-tag one or more strings keep snapshots with this taglist keep-weekly integer 0 keep the last n weekly snapshots (use ‘unlimited’ to keep all weekly snapshots) keep-within string keep snapshots that are newer than duration (eg. 1y5m7d2h) relative to the latest snapshot keep-within-daily string keep daily snapshots that are newer than duration (eg. 1y5m7d2h) relative to the latest snapshot. restic \u003e= 0.13.0 keep-within-hourly string keep hourly snapshots that are newer than duration (eg. 1y5m7d2h) relative to the latest snapshot. restic \u003e= 0.13.0 keep-within-monthly string keep monthly snapshots that are newer than duration (eg. 1y5m7d2h) relative to the latest snapshot. restic \u003e= 0.13.0 keep-within-weekly string keep weekly snapshots that are newer than duration (eg. 1y5m7d2h) relative to the latest snapshot. restic \u003e= 0.13.0 keep-within-yearly string keep yearly snapshots that are newer than duration (eg. 1y5m7d2h) relative to the latest snapshot. restic \u003e= 0.13.0 keep-yearly integer 0 keep the last n yearly snapshots (use ‘unlimited’ to keep all yearly snapshots) max-repack-size string \"\" stop after repacking this much data in total (allowed suffixes for size: k/K, m/M, g/G, t/T). restic \u003e= 0.12.0 max-unused string \"5%\" tolerate given limit of unused data (absolute value in bytes with suffixes k/K, m/M, g/G, t/T, a value in % or the word ‘unlimited’). restic \u003e= 0.12.0 path true / false OR one or more strings only consider snapshots including this (absolute) path (can be specified multiple times, snapshots must include all specified paths). Boolean true is replaced with the paths from section “backup”. Examples: true, false, \"path\" prune true / false false automatically run the ‘prune’ command if snapshots have been removed repack-cacheable-only true / false false only repack packs which are cacheable. restic \u003e= 0.12.0 repack-small true / false false repack pack files below 80% of target pack size. restic \u003e= 0.14.0 repack-smaller-than string \"\" pack below-limit packfiles (allowed suffixes: k/K, m/M). restic \u003e= 0.18.0 repack-uncompressed true / false false repack all uncompressed data. restic \u003e= 0.14.0 tag true / false OR one or more strings only consider snapshots including tag[,tag,…]. Boolean true is replaced with the tags from section “backup”. Examples: true, false, \"tag\" unsafe-allow-remove-all true / false false allow deleting all snapshots of a snapshot group. restic \u003e= 0.17.0 Tip Flags declared for the restic command line in section profile can be overridden in this section.",
    "description": "Section profile.forget This section configures restic command forget . Information on command and flags is copied from the restic manual pages.\nThe “forget” command removes snapshots according to a policy. All snapshots are first divided into groups according to “–group-by”, and after that the policy specified by the “–keep-” options is applied to each group individually. If there are not enough snapshots to keep one for each duration related “–keep-{within-,}” option, the oldest snapshot in the group is kept additionally.",
    "tags": [],
    "title": "forget",
    "uri": "/reference/profile/forget/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Reference",
    "content": "Nested profile sections Nested sections describe configuration structure that is assigned to flags within the configuration, see HTTP Hooks as an example.\nScheduleBaseConfig ScheduleConfig SendMonitoringHeader SendMonitoringSection StreamErrorSection",
    "description": "Nested profile sections Nested sections describe configuration structure that is assigned to flags within the configuration, see HTTP Hooks as an example.\nScheduleBaseConfig ScheduleConfig SendMonitoringHeader SendMonitoringSection StreamErrorSection",
    "tags": [],
    "title": "Nested Sections",
    "uri": "/reference/nested/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Using resticprofile",
    "content": "Generating random keys resticprofile has a handy tool to generate cryptographically secure random keys encoded in base64. You can simply put this key into a file and use it as a strong key for restic.\nOn Linux and FreeBSD, the generator uses getrandom(2) if available, /dev/urandom otherwise. On OpenBSD and macOS, the generator uses getentropy(2). On other Unix-like systems, the generator reads from /dev/urandom. On Windows systems, the generator uses the uses the RtlGenRandom API. On JS/Wasm, the generator uses the Web Crypto API. On WASIP1/Wasm, the generator uses random_get from wasi_snapshot_preview1. Reference from the Go documentation\nresticprofile generate --random-key generates a 1024 bytes random key (converted into 1368 base64 characters) and displays it on the console\nTo generate a different size of key, you can specify the bytes length on the command line:\nresticprofile generate --random-key 2048",
    "description": "Generating random keys resticprofile has a handy tool to generate cryptographically secure random keys encoded in base64. You can simply put this key into a file and use it as a strong key for restic.\nOn Linux and FreeBSD, the generator uses getrandom(2) if available, /dev/urandom otherwise. On OpenBSD and macOS, the generator uses getentropy(2). On other Unix-like systems, the generator reads from /dev/urandom. On Windows systems, the generator uses the uses the RtlGenRandom API. On JS/Wasm, the generator uses the Web Crypto API. On WASIP1/Wasm, the generator uses random_get from wasi_snapshot_preview1. Reference from the Go documentation",
    "tags": [],
    "title": "Generate a Keyfile",
    "uri": "/usage/keyfile/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Installation",
    "content": "Installation via a script Here’s a simple script to download the binary automatically. It works on macOS, FreeBSD and Linux:\ncurl -sfL https://raw.githubusercontent.com/creativeprojects/resticprofile/master/install.sh | sh It should copy resticprofile in a bin directory under your current directory.\nIf you need more control, you can save the shell script and run it manually:\ncurl -LO https://raw.githubusercontent.com/creativeprojects/resticprofile/master/install.sh chmod +x install.sh sudo ./install.sh -b /usr/local/bin It will install resticprofile in /usr/local/bin/\nDebian package WakeMeOps publishes packages for restic and resticprofile.\nLearn more: https://docs.wakemeops.com/packages/resticprofile/\nThese packages are managed by a third party.\nInstallation with homebrew for Linux There’s a Linux homebrew tap for resticprofile:\nbrew tap creativeprojects/tap brew install resticprofile You can also install restic at the same time with --with-restic flag:\nbrew install resticprofile --with-restic You can test that resticprofile is properly installed (make sure you have restic installed or the test will fail):\nbrew test resticprofile Upgrading resticprofile installed via homebrew is very easy:\nbrew update brew upgrade resticprofile Note The resticprofile command self-update is not available when installed via homebrew.\nNote on installing on Linux via Homebrew When testing homebrew after spinning new Linux virtual machines, I noticed resticprofile wouldn’t install without a compiler installed on the machine. Even though resticprofile is distributed as a binary, it looks like homebrew needs access to a compiler.\nDepending on your distribution you will need to install gcc:\nsudo yum install gcc sudo apt install gcc",
    "description": "Installation via a script Here’s a simple script to download the binary automatically. It works on macOS, FreeBSD and Linux:\ncurl -sfL https://raw.githubusercontent.com/creativeprojects/resticprofile/master/install.sh | sh It should copy resticprofile in a bin directory under your current directory.\nIf you need more control, you can save the shell script and run it manually:\ncurl -LO https://raw.githubusercontent.com/creativeprojects/resticprofile/master/install.sh chmod +x install.sh sudo ./install.sh -b /usr/local/bin It will install resticprofile in /usr/local/bin/\nDebian package WakeMeOps publishes packages for restic and resticprofile.",
    "tags": [],
    "title": "Linux",
    "uri": "/installation/linux/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Configuration file",
    "content": "How paths inside the configuration are resolved All file paths in the configuration are resolved relative to the configuration path, the path where the main configuration file was loaded from.\nThe big exceptions are source in the backup section, status-file, prometheus-save-to-file and the restic repository (if it is a file). These paths are taken as specified, which means they are resolved from the current working directory where you started resticprofile from.\nYou can influence this behaviour with profile flag base-dir. It allows to set the working directory that resticprofile will change into so that profiles do no longer depend on the path where you started resticprofile from.\nFor the following configuration example, when assuming it is stored in /opt/resticprofile/profiles.* and resticprofile is started from /home/user/, the individual paths are resolved to:\nrepository: local:/home/user/backup password-file: /opt/resticprofile/password.txt backup.source: /home/user/files ​ toml yaml hcl json # indentation is not needed but it makes it easier to read ;) # version = \"1\" [default] base-dir = \"\" repository = \"local:backup\" password-file = \"password.txt\" [default.backup] source-base = \"\" source = [ \"files\" ] version: \"1\" default: base-dir: \"\" repository: \"local:backup\" password-file: \"password.txt\" backup: source-base: \"\" source: - \"files\" default { base-dir = \"\" repository = \"local:backup\" password-file = \"password.txt\" backup = { source-base = \"\" source = [ \"files\" ] } } { \"version\": \"1\", \"default\": { \"base-dir\": \"\", \"repository\": \"local:backup\", \"password-file\": \"password.txt\", \"backup\": { \"source-base\": \"\", \"source\": [ \"files\" ] } } } Tip Set base-dir to an absolute path to resolve files and local:backup relative to it. Set source-base if you need a separate base path for backup sources. When you want to use relative source paths for backup, set the source-relative option. This will change the working directory of the restic backup command to source-base and will not expand source to an absolute path.\nHow the configuration file is resolved The default name for the configuration file is profiles, without an extension. You can change the name and its path with the --config or -c option on the command line. You can set a specific extension -c profiles.conf to load a TOML format file. If you set a filename with no extension instead, resticprofile will load the first file it finds with any of these extensions:\n.conf (toml format) .yaml .toml .json .hcl macOS X resticprofile will search for your configuration file in these folders:\ncurrent directory ~/Library/Preferences/resticprofile/ /Library/Preferences/resticprofile/ /usr/local/etc/ /usr/local/etc/restic/ /usr/local/etc/resticprofile/ /etc/ /etc/restic/ /etc/resticprofile/ /opt/local/etc/ /opt/local/etc/restic/ /opt/local/etc/resticprofile/ ~/ ($HOME directory) Other unixes (Linux and BSD) resticprofile will search for your configuration file in these folders:\ncurrent directory ~/.config/resticprofile/ /etc/xdg/resticprofile/ /usr/local/etc/ /usr/local/etc/restic/ /usr/local/etc/resticprofile/ /etc/ /etc/restic/ /etc/resticprofile/ /opt/local/etc/ /opt/local/etc/restic/ /opt/local/etc/resticprofile/ ~/ ($HOME directory) Windows resticprofile will search for your configuration file in these folders:\ncurrent directory %USERPROFILE%\\AppData\\Local\\resticprofile %USERPROFILE%\\AppData\\Roaming\\resticprofile c:\\ProgramData\\resticprofile c:\\restic\\ c:\\resticprofile\\ %USERPROFILE%\\resticprofile These paths may be overridden by setting the XDG_CONFIG_HOME or XDG_CONFIG_DIRS environment variables.",
    "description": "How paths inside the configuration are resolved All file paths in the configuration are resolved relative to the configuration path, the path where the main configuration file was loaded from.\nThe big exceptions are source in the backup section, status-file, prometheus-save-to-file and the restic repository (if it is a file). These paths are taken as specified, which means they are resolved from the current working directory where you started resticprofile from.",
    "tags": [],
    "title": "Path",
    "uri": "/configuration/path/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Monitoring",
    "content": "Resticprofile can generate a Prometheus file or send the report to a Pushgateway. Currently, only the backup command generates a report. Below is a configuration example for generating a file and sending it to a Pushgateway:\n​ toml yaml hcl json version = \"1\" [root] prometheus-save-to-file = \"root.prom\" prometheus-push = \"http://localhost:9091/\" [root.backup] extended-status = true no-error-on-warning = true source = [ \"/\" ] version: \"1\" root: prometheus-save-to-file: \"root.prom\" prometheus-push: \"http://localhost:9091/\" backup: extended-status: true no-error-on-warning: true source: - / \"root\" = { \"prometheus-save-to-file\" = \"root.prom\" \"prometheus-push\" = \"http://localhost:9091/\" \"backup\" = { \"extended-status\" = true \"no-error-on-warning\" = true \"source\" = [\"/\"] } } { \"version\": \"1\", \"root\": { \"prometheus-save-to-file\": \"root.prom\", \"prometheus-push\": \"http://localhost:9091/\", \"backup\": { \"extended-status\": true, \"no-error-on-warning\": true, \"source\": [ \"/\" ] } } } Note Set extended-status to true to access all available metrics. For details, see Extended status.\nHere’s an example of a generated prometheus file:\n# HELP restic_build_info restic build information. # TYPE restic_build_info gauge restic_build_info{profile=\"prom\",version=\"0.18.0\"} 1 # HELP resticprofile_backup_added_bytes Total number of bytes added to the repository. # TYPE resticprofile_backup_added_bytes gauge resticprofile_backup_added_bytes{profile=\"prom\"} 96167 # HELP resticprofile_backup_dir_changed Number of directories with changes. # TYPE resticprofile_backup_dir_changed gauge resticprofile_backup_dir_changed{profile=\"prom\"} 8 # HELP resticprofile_backup_dir_new Number of new directories added to the backup. # TYPE resticprofile_backup_dir_new gauge resticprofile_backup_dir_new{profile=\"prom\"} 0 # HELP resticprofile_backup_dir_unmodified Number of directories unmodified since last backup. # TYPE resticprofile_backup_dir_unmodified gauge resticprofile_backup_dir_unmodified{profile=\"prom\"} 1060 # HELP resticprofile_backup_duration_seconds The backup duration (in seconds). # TYPE resticprofile_backup_duration_seconds gauge resticprofile_backup_duration_seconds{profile=\"prom\"} 0.986296416 # HELP resticprofile_backup_files_changed Number of files with changes. # TYPE resticprofile_backup_files_changed gauge resticprofile_backup_files_changed{profile=\"prom\"} 2 # HELP resticprofile_backup_files_new Number of new files added to the backup. # TYPE resticprofile_backup_files_new gauge resticprofile_backup_files_new{profile=\"prom\"} 0 # HELP resticprofile_backup_files_processed Total number of files scanned by the backup for changes. # TYPE resticprofile_backup_files_processed gauge resticprofile_backup_files_processed{profile=\"prom\"} 7723 # HELP resticprofile_backup_files_unmodified Number of files unmodified since last backup. # TYPE resticprofile_backup_files_unmodified gauge resticprofile_backup_files_unmodified{profile=\"prom\"} 7721 # HELP resticprofile_backup_processed_bytes Total number of bytes scanned for changes. # TYPE resticprofile_backup_processed_bytes gauge resticprofile_backup_processed_bytes{profile=\"prom\"} 2.935621558e+09 # HELP resticprofile_backup_status Backup status: 0=fail, 1=warning, 2=success. # TYPE resticprofile_backup_status gauge resticprofile_backup_status{profile=\"prom\"} 2 # HELP resticprofile_backup_time_seconds Last backup run (unixtime). # TYPE resticprofile_backup_time_seconds gauge resticprofile_backup_time_seconds{profile=\"prom\"} 1.747673785e+09 # HELP resticprofile_build_info resticprofile build information. # TYPE resticprofile_build_info gauge resticprofile_build_info{goversion=\"go1.24.3\",profile=\"prom\",version=\"0.31.0\"} 1 Prometheus Pushgateway Prometheus Pushgateway uses the job label as a grouping key. Metrics with the same grouping key are replaced when pushed. To prevent overwriting metrics from different profiles, the default job label is set to \u003cprofile_name\u003e.\u003ccommand\u003e (e.g., root.backup).\nFor more control over the job label, use the prometheus-push-job property. This property supports the $command placeholder, which is replaced with the executed command’s name.\nYou can specify the request format using prometheus-push-format. The default is text, but it can also be set to protobuf (see compatibility with Prometheus).\nUser-Defined Labels You can add custom Prometheus labels, which will apply to all metrics. Example:\n​ toml yaml hcl json version = \"1\" [root] prometheus-save-to-file = \"root.prom\" prometheus-push = \"http://localhost:9091/\" [[root.prometheus-labels]] host = \"{{ .Hostname }}\" [root.backup] extended-status = true no-error-on-warning = true source = [ \"/\" ] version: \"1\" root: prometheus-save-to-file: \"root.prom\" prometheus-push: \"http://localhost:9091/\" prometheus-labels: - host: {{ .Hostname }} backup: extended-status: true no-error-on-warning: true source: - / \"root\" = { \"prometheus-save-to-file\" = \"root.prom\" \"prometheus-push\" = \"http://localhost:9091/\" \"prometheus-labels\" = { \"host\" = \"{{ .Hostname }}\" } \"backup\" = { \"extended-status\" = true \"no-error-on-warning\" = true \"source\" = [\"/\"] } } { \"version\": \"1\", \"root\": { \"prometheus-save-to-file\": \"root.prom\", \"prometheus-push\": \"http://localhost:9091/\", \"prometheus-labels\": [ { \"host\": \"{{ .Hostname }}\" } ], \"backup\": { \"extended-status\": true, \"no-error-on-warning\": true, \"source\": [ \"/\" ] } } } This adds the host label to all your metrics.",
    "description": "Resticprofile can generate a Prometheus file or send the report to a Pushgateway. Currently, only the backup command generates a report. Below is a configuration example for generating a file and sending it to a Pushgateway:\n​ toml yaml hcl json version = \"1\" [root] prometheus-save-to-file = \"root.prom\" prometheus-push = \"http://localhost:9091/\" [root.backup] extended-status = true no-error-on-warning = true source = [ \"/\" ] version: \"1\" root: prometheus-save-to-file: \"root.prom\" prometheus-push: \"http://localhost:9091/\" backup: extended-status: true no-error-on-warning: true source: - / \"root\" = { \"prometheus-save-to-file\" = \"root.prom\" \"prometheus-push\" = \"http://localhost:9091/\" \"backup\" = { \"extended-status\" = true \"no-error-on-warning\" = true \"source\" = [\"/\"] } } { \"version\": \"1\", \"root\": { \"prometheus-save-to-file\": \"root.prom\", \"prometheus-push\": \"http://localhost:9091/\", \"backup\": { \"extended-status\": true, \"no-error-on-warning\": true, \"source\": [ \"/\" ] } } } Note Set extended-status to true to access all available metrics. For details, see Extended status.",
    "tags": [
      "Monitoring"
    ],
    "title": "Prometheus",
    "uri": "/monitoring/prometheus/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Schedules",
    "content": "The schedule configuration includes several parameters that can be added to each profile:\n​ toml yaml hcl json [profile.backup] schedule = \"*:00,30\" schedule-permission = \"system\" schedule-priority = \"background\" schedule-log = \"profile-backup.log\" schedule-lock-mode = \"default\" schedule-lock-wait = \"15m30s\" profile: backup: schedule: '*:00,30' schedule-permission: system schedule-priority: background schedule-log: profile-backup.log schedule-lock-mode: default schedule-lock-wait: 15m30s \"profile\" \"backup\" { \"schedule\" = \"*:00,30\" \"schedule-permission\" = \"system\" \"schedule-priority\" = \"background\" \"schedule-log\" = \"profile-backup.log\" \"schedule-lock-mode\" = \"default\" \"schedule-lock-wait\" = \"15m30s\" } { \"profile\": { \"backup\": { \"schedule\": \"*:00,30\", \"schedule-permission\": \"system\", \"schedule-priority\": \"background\", \"schedule-log\": \"profile-backup.log\", \"schedule-lock-mode\": \"default\", \"schedule-lock-wait\": \"15m30s\" } } } schedule-permission schedule-permission accepts three parameters: system, user, or user_logged_on:\nsystem: Access system or protected files. Run resticprofile with sudo on Unix and with elevated prompt on Windows. On Windows, resticprofile will automatically request elevated permissions if needed.\nuser: Run the backup using current user permissions. Suitable for saving documents or files within your profile. This mode runs even when the user is not logged on. It will ask for your user password on Windows. It needs root permission (via sudo) when using systemd.\nuser_logged_on: Not for crond - Provides the same permissions as user, but runs only when the user is logged on. On Windows, it does not ask for your user password.\nempty: resticprofile will guess based on how it was started (with sudo or as a normal user). The fallback is system on Windows and user_logged_in on other platforms.\nChanging schedule-permission To change the permission of a schedule, unschedule the profile first.\nFollow this order:\nUnschedule the job first (before updating the permission in the configuration) Change your permission (user to system, or system to user). Schedule your updated profile. schedule-lock-mode schedule-lock-mode accepts 3 values:\ndefault: Waits for the duration set in schedule-lock-wait before failing a schedule. Acts like fail if schedule-lock-wait is “0” or not specified. fail: Any lock failure immediately aborts the schedule. ignore: Skips resticprofile locks. Restic locks are not skipped and can abort the schedule. schedule-lock-wait Sets the wait time for a resticprofile and restic lock to become available. Used only when schedule-lock-mode is unset or default.\nschedule-log schedule-log can be used in two ways:\nRedirect all output from resticprofile and restic to a file. The parameter should point to a file (/path/to/file). Redirect all resticprofile log entries to the syslog server. In this case, the parameter is a URL like udp://server:514 or tcp://127.0.0.1:514. If no server responds on the specified port, resticprofile will send the logs to the default output instead.\nschedule-priority schedule-priority accepts two values:\nbackground: The process runs unnoticed while you work. standard: The process gets the same priority as other processes (won’t run faster if the machine is idle). schedule-priority is not available for crond.\nschedule The schedule parameter accepts various forms of input from the systemd calendar event type. This format is the same used to schedule on macOS and Windows.\nThe general form is:\nweekdays year-month-day hour:minute:second Use * to mean any Use , to separate multiple entries Use .. for a range Limitations:\nThe divider (/), the ~, and timezones are not supported on macOS and Windows. The year and second fields have no effect on macOS and limited availability on Windows. Here are a few examples (taken from the systemd documentation):\nThe user input is on the left, and the system's full format is on the right. Sat,Thu,Mon..Wed,Sat..Sun → Mon..Thu,Sat,Sun *-*-* 00:00:00 Mon,Sun 12-*-* 2,1:23 → Mon,Sun 2012-*-* 01,02:23:00 Wed *-1 → Wed *-*-01 00:00:00 Wed..Wed,Wed *-1 → Wed *-*-01 00:00:00 Wed, 17:48 → Wed *-*-* 17:48:00 Wed..Sat,Tue 12-10-15 1:2:3 → Tue..Sat 2012-10-15 01:02:03 *-*-7 0:0:0 → *-*-07 00:00:00 10-15 → *-10-15 00:00:00 monday *-12-* 17:00 → Mon *-12-* 17:00:00 Mon,Fri *-*-3,1,2 *:30 → Mon,Fri *-*-01,02,03 *:30:00 12,14,13,12:20,10,30 → *-*-* 12,13,14:10,20,30:00 12..14:10,20,30 → *-*-* 12..14:10,20,30:00 03-05 08:05 → *-03-05 08:05:00 05:40 → *-*-* 05:40:00 Sat,Sun 12-05 08:05 → Sat,Sun *-12-05 08:05:00 Sat,Sun 08:05 → Sat,Sun *-*-* 08:05:00 2003-03-05 05:40 → 2003-03-05 05:40:00 2003-02..04-05 → 2003-02..04-05 00:00:00 2003-03-05 → 2003-03-05 00:00:00 03-05 → *-03-05 00:00:00 hourly → *-*-* *:00:00 daily → *-*-* 00:00:00 monthly → *-*-01 00:00:00 weekly → Mon *-*-* 00:00:00 yearly → *-01-01 00:00:00 annually → *-01-01 00:00:00 The schedule can be a string or an array of strings (to allow for multiple schedules).\nschedule-ignore-on-battery If set to true, the schedule won’t start if the system is running on battery (even if the charge is at 100%).\nschedule-ignore-on-battery-less-than If set to a number, the schedule won’t start if the system is running on battery and the charge is less than or equal to the specified number.\nExample Here’s an example of a scheduling configuration:\n​ toml yaml hcl json [default] repository = \"d:\\\\backup\" password-file = \"key\" [self] inherit = \"default\" [self.retention] after-backup = true keep-within = \"14d\" [self.backup] source = \".\" schedule = [ \"Mon..Fri *:00,15,30,45\", \"Sat,Sun 0,12:00\" ] schedule-permission = \"user\" schedule-lock-wait = \"10m\" [self.prune] schedule = \"sun 3:30\" schedule-permission = \"user\" schedule-lock-wait = \"1h\" default: repository: \"d:\\\\backup\" password-file: key self: inherit: default retention: after-backup: true keep-within: 14d backup: source: \".\" schedule: - \"Mon..Fri *:00,15,30,45\" # every 15 minutes on weekdays - \"Sat,Sun 0,12:00\" # twice a day on week-ends schedule-permission: user schedule-lock-wait: 10m prune: schedule: \"sun 3:30\" schedule-permission: user schedule-lock-wait: 1h \"default\" = { \"repository\" = \"d:\\\\backup\" \"password-file\" = \"key\" } \"self\" = { \"inherit\" = \"default\" \"retention\" = { \"after-backup\" = true \"keep-within\" = \"14d\" } \"backup\" = { \"source\" = \".\" \"schedule\" = [\"Mon..Fri *:00,15,30,45\", \"Sat,Sun 0,12:00\"] \"schedule-permission\" = \"user\" \"schedule-lock-wait\" = \"10m\" } \"prune\" = { \"schedule\" = \"sun 3:30\" \"schedule-permission\" = \"user\" \"schedule-lock-wait\" = \"1h\" } } { \"default\": { \"repository\": \"d:\\\\backup\", \"password-file\": \"key\" }, \"self\": { \"inherit\": \"default\", \"retention\": { \"after-backup\": true, \"keep-within\": \"14d\" }, \"backup\": { \"source\": \".\", \"schedule\": [ \"Mon..Fri *:00,15,30,45\", \"Sat,Sun 0,12:00\" ], \"schedule-permission\": \"user\", \"schedule-lock-wait\": \"10m\" }, \"prune\": { \"schedule\": \"sun 3:30\", \"schedule-permission\": \"user\", \"schedule-lock-wait\": \"1h\" } } }",
    "description": "The schedule configuration includes several parameters that can be added to each profile:\n​ toml yaml hcl json [profile.backup] schedule = \"*:00,30\" schedule-permission = \"system\" schedule-priority = \"background\" schedule-log = \"profile-backup.log\" schedule-lock-mode = \"default\" schedule-lock-wait = \"15m30s\" profile: backup: schedule: '*:00,30' schedule-permission: system schedule-priority: background schedule-log: profile-backup.log schedule-lock-mode: default schedule-lock-wait: 15m30s \"profile\" \"backup\" { \"schedule\" = \"*:00,30\" \"schedule-permission\" = \"system\" \"schedule-priority\" = \"background\" \"schedule-log\" = \"profile-backup.log\" \"schedule-lock-mode\" = \"default\" \"schedule-lock-wait\" = \"15m30s\" } { \"profile\": { \"backup\": { \"schedule\": \"*:00,30\", \"schedule-permission\": \"system\", \"schedule-priority\": \"background\", \"schedule-log\": \"profile-backup.log\", \"schedule-lock-mode\": \"default\", \"schedule-lock-wait\": \"15m30s\" } } } schedule-permission schedule-permission accepts three parameters: system, user, or user_logged_on:",
    "tags": [],
    "title": "Schedule Configuration",
    "uri": "/schedules/configuration/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Reference \u003e  Section Profile",
    "content": "Section profile.init This section configures restic command init . Information on command and flags is copied from the restic manual pages.\nThe “init” command initializes a new repository.\nFlags used by resticprofile only: Name Type Default Notes run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands send-after one or more nested SendMonitoringSection Send HTTP request(s) after a successful restic command send-after-fail one or more nested SendMonitoringSection Send HTTP request(s) after failed restic or shell commands send-before one or more nested SendMonitoringSection Send HTTP request(s) before a restic command send-finally one or more nested SendMonitoringSection Send HTTP request(s) always, after all other commands Flags passed to the restic command line: Name Type Default Notes copy-chunker-params true / false false copy chunker parameters from the secondary repository (useful with the copy command). restic \u003e= 0.10.0 from-insecure-no-password true / false false use an empty password for the source repository (insecure). restic \u003e= 0.17.0 from-key-hint string \"\" key ID of key to try decrypting the source repository first (default: $RESTIC_FROM_KEY_HINT). restic \u003e= 0.14.0 from-password-command string \"\" shell command to obtain the source repository password from (default: $RESTIC_FROM_PASSWORD_COMMAND). restic \u003e= 0.14.0 from-password-file string \"\" file to read the source repository password from (default: $RESTIC_FROM_PASSWORD_FILE). restic \u003e= 0.14.0 from-repository string \"\" source repository to copy chunker parameters from (default: $RESTIC_FROM_REPOSITORY). restic \u003e= 0.14.0 from-repository-file string \"\" file from which to read the source repository location to copy chunker parameters from (default: $RESTIC_FROM_REPOSITORY_FILE). restic \u003e= 0.14.0 key-hint2 string \"\" key ID of key to try decrypting the secondary repository first (default: $RESTIC_KEY_HINT2). restic \u003e= 0.10.0 \u003c 0.14.0 password-command2 string \"\" shell command to obtain the secondary repository password from (default: $RESTIC_PASSWORD_COMMAND2). restic \u003e= 0.10.0 \u003c 0.14.0 password-file2 string \"\" file to read the secondary repository password from (default: $RESTIC_PASSWORD_FILE2). restic \u003e= 0.10.0 \u003c 0.14.0 repo2 string \"\" secondary repository to copy chunker parameters from (default: $RESTIC_REPOSITORY2). restic \u003e= 0.10.0 \u003c 0.14.0 repository-file2 string \"\" file from which to read the secondary repository location to copy chunker parameters from (default: $RESTIC_REPOSITORY_FILE2). restic \u003e= 0.13.0 \u003c 0.14.0 repository-version string \"stable\" repository format version to use, allowed values are a format version, ’latest’ and ‘stable’. restic \u003e= 0.14.0 Tip Flags declared for the restic command line in section profile can be overridden in this section.",
    "description": "Section profile.init This section configures restic command init . Information on command and flags is copied from the restic manual pages.\nThe “init” command initializes a new repository.\nFlags used by resticprofile only: Name Type Default Notes run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands send-after one or more nested SendMonitoringSection Send HTTP request(s) after a successful restic command send-after-fail one or more nested SendMonitoringSection Send HTTP request(s) after failed restic or shell commands send-before one or more nested SendMonitoringSection Send HTTP request(s) before a restic command send-finally one or more nested SendMonitoringSection Send HTTP request(s) always, after all other commands Flags passed to the restic command line: Name Type Default Notes copy-chunker-params true / false false copy chunker parameters from the secondary repository (useful with the copy command). restic \u003e= 0.10.0 from-insecure-no-password true / false false use an empty password for the source repository (insecure). restic \u003e= 0.17.0 from-key-hint string \"\" key ID of key to try decrypting the source repository first (default: $RESTIC_FROM_KEY_HINT). restic \u003e= 0.14.0 from-password-command string \"\" shell command to obtain the source repository password from (default: $RESTIC_FROM_PASSWORD_COMMAND). restic \u003e= 0.14.0 from-password-file string \"\" file to read the source repository password from (default: $RESTIC_FROM_PASSWORD_FILE). restic \u003e= 0.14.0 from-repository string \"\" source repository to copy chunker parameters from (default: $RESTIC_FROM_REPOSITORY). restic \u003e= 0.14.0 from-repository-file string \"\" file from which to read the source repository location to copy chunker parameters from (default: $RESTIC_FROM_REPOSITORY_FILE). restic \u003e= 0.14.0 key-hint2 string \"\" key ID of key to try decrypting the secondary repository first (default: $RESTIC_KEY_HINT2). restic \u003e= 0.10.0 \u003c 0.14.0 password-command2 string \"\" shell command to obtain the secondary repository password from (default: $RESTIC_PASSWORD_COMMAND2). restic \u003e= 0.10.0 \u003c 0.14.0 password-file2 string \"\" file to read the secondary repository password from (default: $RESTIC_PASSWORD_FILE2). restic \u003e= 0.10.0 \u003c 0.14.0 repo2 string \"\" secondary repository to copy chunker parameters from (default: $RESTIC_REPOSITORY2). restic \u003e= 0.10.0 \u003c 0.14.0 repository-file2 string \"\" file from which to read the secondary repository location to copy chunker parameters from (default: $RESTIC_REPOSITORY_FILE2). restic \u003e= 0.13.0 \u003c 0.14.0 repository-version string \"stable\" repository format version to use, allowed values are a format version, ’latest’ and ‘stable’. restic \u003e= 0.14.0 Tip Flags declared for the restic command line in section profile can be overridden in this section.",
    "tags": [],
    "title": "init",
    "uri": "/reference/profile/init/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Installation",
    "content": "Installation with Homebrew There’s a homebrew tap for resticprofile:\nbrew tap creativeprojects/tap brew install resticprofile You can also install restic at the same time with --with-restic flag:\nbrew install resticprofile --with-restic You can test that resticprofile is properly installed (make sure you have restic installed or the test will fail):\nbrew test resticprofile Upgrading resticprofile installed via homebrew is very easy:\nbrew update brew upgrade resticprofile Note The resticprofile command self-update is not available when installed via homebrew.\nInstallation via a script Here’s a simple script to download the binary automatically. It works on mac OS X, FreeBSD and Linux:\ncurl -sfL https://raw.githubusercontent.com/creativeprojects/resticprofile/master/install.sh | sh It should copy resticprofile in a bin directory under your current directory.\nIf you need more control, you can save the shell script and run it manually:\ncurl -LO https://raw.githubusercontent.com/creativeprojects/resticprofile/master/install.sh chmod +x install.sh sudo ./install.sh -b /usr/local/bin It will install resticprofile in /usr/local/bin/",
    "description": "Installation with Homebrew There’s a homebrew tap for resticprofile:\nbrew tap creativeprojects/tap brew install resticprofile You can also install restic at the same time with --with-restic flag:\nbrew install resticprofile --with-restic You can test that resticprofile is properly installed (make sure you have restic installed or the test will fail):\nbrew test resticprofile Upgrading resticprofile installed via homebrew is very easy:\nbrew update brew upgrade resticprofile Note The resticprofile command self-update is not available when installed via homebrew.",
    "tags": [],
    "title": "mac OS",
    "uri": "/installation/macosx/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Reference \u003e  Section Profile",
    "content": "Section profile.key This section configures restic command key . Information on command and flags is copied from the restic manual pages.\nThe “key” command allows you to set multiple access keys or passwords per repository.\nFlags used by resticprofile only: Name Type Default Notes run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands send-after one or more nested SendMonitoringSection Send HTTP request(s) after a successful restic command send-after-fail one or more nested SendMonitoringSection Send HTTP request(s) after failed restic or shell commands send-before one or more nested SendMonitoringSection Send HTTP request(s) before a restic command send-finally one or more nested SendMonitoringSection Send HTTP request(s) always, after all other commands Flags passed to the restic command line: Name Type Default Notes host true / false OR hostname \"\" the hostname for new keys. Boolean true is replaced with the hostname of the system. Examples: true, false, \"host\" . restic \u003e= 0.10.0 \u003c 0.17.0 new-password-file string \"\" file from which to read the new password. restic \u003c 0.17.0 user string \"\" the username for new keys. restic \u003e= 0.10.0 \u003c 0.17.0 Tip Flags declared for the restic command line in section profile can be overridden in this section.",
    "description": "Section profile.key This section configures restic command key . Information on command and flags is copied from the restic manual pages.\nThe “key” command allows you to set multiple access keys or passwords per repository.\nFlags used by resticprofile only: Name Type Default Notes run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands send-after one or more nested SendMonitoringSection Send HTTP request(s) after a successful restic command send-after-fail one or more nested SendMonitoringSection Send HTTP request(s) after failed restic or shell commands send-before one or more nested SendMonitoringSection Send HTTP request(s) before a restic command send-finally one or more nested SendMonitoringSection Send HTTP request(s) always, after all other commands Flags passed to the restic command line: Name Type Default Notes host true / false OR hostname \"\" the hostname for new keys. Boolean true is replaced with the hostname of the system. Examples: true, false, \"host\" . restic \u003e= 0.10.0 \u003c 0.17.0 new-password-file string \"\" file from which to read the new password. restic \u003c 0.17.0 user string \"\" the username for new keys. restic \u003e= 0.10.0 \u003c 0.17.0 Tip Flags declared for the restic command line in section profile can be overridden in this section.",
    "tags": [],
    "title": "key",
    "uri": "/reference/profile/key/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Installation",
    "content": "Installation using bash You can use a script if you’re using bash in Windows (via WSL, git bash, etc.)\ncurl -LO https://raw.githubusercontent.com/creativeprojects/resticprofile/master/install.sh ./install.sh It will create a bin directory under your current directory and place resticprofile.exe in it.\nInstallation using scoop Resticprofile can be installed from scoop main bucket:\nscoop install resticprofile Installation using winget Resticprofile can be installed using winget which is included with Windows 10 and 11.\nwinget install creativeprojects.resticprofile Manual installation Download the package corresponding to your system and CPU from the release page Once downloaded you need to open the archive and copy the binary file resticprofile (or resticprofile.exe) in your PATH.",
    "description": "Installation using bash You can use a script if you’re using bash in Windows (via WSL, git bash, etc.)\ncurl -LO https://raw.githubusercontent.com/creativeprojects/resticprofile/master/install.sh ./install.sh It will create a bin directory under your current directory and place resticprofile.exe in it.\nInstallation using scoop Resticprofile can be installed from scoop main bucket:\nscoop install resticprofile Installation using winget Resticprofile can be installed using winget which is included with Windows 10 and 11.\nwinget install creativeprojects.resticprofile Manual installation Download the package corresponding to your system and CPU from the release page Once downloaded you need to open the archive and copy the binary file resticprofile (or resticprofile.exe) in your PATH.",
    "tags": [],
    "title": "Windows",
    "uri": "/installation/windows/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Reference \u003e  Section Profile",
    "content": "Section profile.key-add This section configures restic command key-add available since 0.17.0 . Information on command and flags is copied from the restic manual pages.\nThe “add” sub-command creates a new key and validates the key. Returns the new key ID.\nFlags used by resticprofile only: Name Type Default Notes run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands send-after one or more nested SendMonitoringSection Send HTTP request(s) after a successful restic command send-after-fail one or more nested SendMonitoringSection Send HTTP request(s) after failed restic or shell commands send-before one or more nested SendMonitoringSection Send HTTP request(s) before a restic command send-finally one or more nested SendMonitoringSection Send HTTP request(s) always, after all other commands Flags passed to the restic command line: Name Type Default Notes host true / false OR hostname \"\" the hostname for new key. Boolean true is replaced with the hostname of the system. Examples: true, false, \"host\" . restic \u003e= 0.17.0 new-insecure-no-password true / false false add an empty password for the repository (insecure). restic \u003e= 0.17.0 new-password-file string \"\" file from which to read the new password. restic \u003e= 0.17.0 user string \"\" the username for new key. restic \u003e= 0.17.0 Tip Flags declared for the restic command line in section profile can be overridden in this section.",
    "description": "Section profile.key-add This section configures restic command key-add available since 0.17.0 . Information on command and flags is copied from the restic manual pages.\nThe “add” sub-command creates a new key and validates the key. Returns the new key ID.\nFlags used by resticprofile only: Name Type Default Notes run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands send-after one or more nested SendMonitoringSection Send HTTP request(s) after a successful restic command send-after-fail one or more nested SendMonitoringSection Send HTTP request(s) after failed restic or shell commands send-before one or more nested SendMonitoringSection Send HTTP request(s) before a restic command send-finally one or more nested SendMonitoringSection Send HTTP request(s) always, after all other commands Flags passed to the restic command line: Name Type Default Notes host true / false OR hostname \"\" the hostname for new key. Boolean true is replaced with the hostname of the system. Examples: true, false, \"host\" . restic \u003e= 0.17.0 new-insecure-no-password true / false false add an empty password for the repository (insecure). restic \u003e= 0.17.0 new-password-file string \"\" file from which to read the new password. restic \u003e= 0.17.0 user string \"\" the username for new key. restic \u003e= 0.17.0 Tip Flags declared for the restic command line in section profile can be overridden in this section.",
    "tags": [],
    "title": "key-add",
    "uri": "/reference/profile/key-add/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Reference \u003e  Section Profile",
    "content": "Section profile.key-list This section configures restic command key-list available since 0.17.0 . Information on command and flags is copied from the restic manual pages.\nThe “list” sub-command lists all the keys (passwords) associated with the repository. Returns the key ID, username, hostname, created time and if it’s the current key being used to access the repository.\nFlags used by resticprofile only: Name Type Default Notes run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands send-after one or more nested SendMonitoringSection Send HTTP request(s) after a successful restic command send-after-fail one or more nested SendMonitoringSection Send HTTP request(s) after failed restic or shell commands send-before one or more nested SendMonitoringSection Send HTTP request(s) before a restic command send-finally one or more nested SendMonitoringSection Send HTTP request(s) always, after all other commands Tip Flags declared for the restic command line in section profile can be overridden in this section.",
    "description": "Section profile.key-list This section configures restic command key-list available since 0.17.0 . Information on command and flags is copied from the restic manual pages.\nThe “list” sub-command lists all the keys (passwords) associated with the repository. Returns the key ID, username, hostname, created time and if it’s the current key being used to access the repository.\nFlags used by resticprofile only: Name Type Default Notes run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands send-after one or more nested SendMonitoringSection Send HTTP request(s) after a successful restic command send-after-fail one or more nested SendMonitoringSection Send HTTP request(s) after failed restic or shell commands send-before one or more nested SendMonitoringSection Send HTTP request(s) before a restic command send-finally one or more nested SendMonitoringSection Send HTTP request(s) always, after all other commands Tip Flags declared for the restic command line in section profile can be overridden in this section.",
    "tags": [],
    "title": "key-list",
    "uri": "/reference/profile/key-list/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Reference \u003e  Section Profile",
    "content": "Section profile.key-passwd This section configures restic command key-passwd available since 0.17.0 . Information on command and flags is copied from the restic manual pages.\nThe “passwd” sub-command creates a new key, validates the key and remove the old key ID. Returns the new key ID.\nFlags used by resticprofile only: Name Type Default Notes run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands send-after one or more nested SendMonitoringSection Send HTTP request(s) after a successful restic command send-after-fail one or more nested SendMonitoringSection Send HTTP request(s) after failed restic or shell commands send-before one or more nested SendMonitoringSection Send HTTP request(s) before a restic command send-finally one or more nested SendMonitoringSection Send HTTP request(s) always, after all other commands Flags passed to the restic command line: Name Type Default Notes host true / false OR hostname \"\" the hostname for new key. Boolean true is replaced with the hostname of the system. Examples: true, false, \"host\" . restic \u003e= 0.17.0 new-insecure-no-password true / false false add an empty password for the repository (insecure). restic \u003e= 0.17.0 new-password-file string \"\" file from which to read the new password. restic \u003e= 0.17.0 user string \"\" the username for new key. restic \u003e= 0.17.0 Tip Flags declared for the restic command line in section profile can be overridden in this section.",
    "description": "Section profile.key-passwd This section configures restic command key-passwd available since 0.17.0 . Information on command and flags is copied from the restic manual pages.\nThe “passwd” sub-command creates a new key, validates the key and remove the old key ID. Returns the new key ID.\nFlags used by resticprofile only: Name Type Default Notes run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands send-after one or more nested SendMonitoringSection Send HTTP request(s) after a successful restic command send-after-fail one or more nested SendMonitoringSection Send HTTP request(s) after failed restic or shell commands send-before one or more nested SendMonitoringSection Send HTTP request(s) before a restic command send-finally one or more nested SendMonitoringSection Send HTTP request(s) always, after all other commands Flags passed to the restic command line: Name Type Default Notes host true / false OR hostname \"\" the hostname for new key. Boolean true is replaced with the hostname of the system. Examples: true, false, \"host\" . restic \u003e= 0.17.0 new-insecure-no-password true / false false add an empty password for the repository (insecure). restic \u003e= 0.17.0 new-password-file string \"\" file from which to read the new password. restic \u003e= 0.17.0 user string \"\" the username for new key. restic \u003e= 0.17.0 Tip Flags declared for the restic command line in section profile can be overridden in this section.",
    "tags": [],
    "title": "key-passwd",
    "uri": "/reference/profile/key-passwd/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Reference",
    "content": "Section groups Config file format v1 uses a simplified groups section. Every named item below groups maps to one or more profile names (list of strings).\nFrom file format v2, every named item in the groups section is configuration structure following the format described below (see Configuration v2 for details):\nName Type Default Notes continue-on-error true / false auto Continue with the next profile on a failure, overrides “global.group-continue-on-error” description string Describe the group profiles one or more strings Names of the profiles belonging to this group schedules key =\u003e nested ScheduleConfig Allows to run the group on schedule for the specified command name (backup, copy, check, forget, prune)",
    "description": "Section groups Config file format v1 uses a simplified groups section. Every named item below groups maps to one or more profile names (list of strings).\nFrom file format v2, every named item in the groups section is configuration structure following the format described below (see Configuration v2 for details):\nName Type Default Notes continue-on-error true / false auto Continue with the next profile on a failure, overrides “global.group-continue-on-error” description string Describe the group profiles one or more strings Names of the profiles belonging to this group schedules key =\u003e nested ScheduleConfig Allows to run the group on schedule for the specified command name (backup, copy, check, forget, prune)",
    "tags": [],
    "title": "Section Groups",
    "uri": "/reference/groups/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Installation",
    "content": "Installation using Ansible Installation using Ansible is not streamlined, but here’s the playbook I’m using on my servers:\nPlaybooks resticprofile.yml This is very much work in progress. Once I get a stable ansible script I should publish it to Ansible Galaxy.\nThe playbook is installing (or upgrading):\nlatest restic binary to /usr/local/bin latest resticprofile binary to /usr/local/bin the resticprofile configuration file from a template file found in ./resticprofile/{{ inventory_hostname }}/profiles.* to /root/resticprofile/profiles.* password files that can be encrypted using ansible vault. These files are located in ./resticprofile/{{ inventory_hostname }}/keys/*: they will be decrypted and saved to /root/resticprofile/. other files (like files needed for --exclude-file, --files-from or anything else you need) from ./resticprofile/{{ inventory_hostname }}/copy/* to /root/resticprofile/ Requirements Each target machine must have one variable named arch containing the resticprofile OS \u0026 Arch. You can see a list of all the available OS \u0026 Arch couples on the releases page.\nTypically, a binary will be distributed using this convention:\nresticprofile-[VERSION]_[OS]_[ARCH].tar.gz\nYour host variables file should declare a arch variable containing the [OS]_[ARCH] part of the file name.\nExamples: arch: linux_amd64 or for a Raspberry pi 3+:\narch: linux_armv7 Note: I might find a way to detect this automatically at some point",
    "description": "Installation using Ansible Installation using Ansible is not streamlined, but here’s the playbook I’m using on my servers:\nPlaybooks resticprofile.yml This is very much work in progress. Once I get a stable ansible script I should publish it to Ansible Galaxy.\nThe playbook is installing (or upgrading):\nlatest restic binary to /usr/local/bin latest resticprofile binary to /usr/local/bin the resticprofile configuration file from a template file found in ./resticprofile/{{ inventory_hostname }}/profiles.* to /root/resticprofile/profiles.* password files that can be encrypted using ansible vault. These files are located in ./resticprofile/{{ inventory_hostname }}/keys/*: they will be decrypted and saved to /root/resticprofile/. other files (like files needed for --exclude-file, --files-from or anything else you need) from ./resticprofile/{{ inventory_hostname }}/copy/* to /root/resticprofile/ Requirements Each target machine must have one variable named arch containing the resticprofile OS \u0026 Arch. You can see a list of all the available OS \u0026 Arch couples on the releases page.",
    "tags": [],
    "title": "Ansible",
    "uri": "/installation/ansible/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Configuration file",
    "content": "The configuration may be split into multiple files by adding includes = \"glob-pattern\" to the main configuration file. E.g. the following profiles.conf loads configurations from conf.d and profiles.d:\n​ toml yaml hcl json version = \"1\" # Includes includes = [\"conf.d/*.conf\", \"profiles.d/*.yaml\", \"profiles.d/*.toml\"] # Defaults [global] initialize = true version: \"1\" includes: - \"conf.d/*.conf\" - \"profiles.d/*.yaml\" - \"profiles.d/*.toml\" global: initialize: true includes = [\"conf.d/*.conf\", \"profiles.d/*.yaml\", \"profiles.d/*.toml\"] global { initialize = true } { \"version\": \"1\", \"includes\": [ \"conf.d/*.conf\", \"profiles.d/*.yaml\", \"profiles.d/*.toml\" ], \"global\": { \"initialize\": true } } Included configuration files may use any supported format and settings are merged so that multiple files can extend the same profiles. The HCL format is special in that it cannot be mixed with other formats.\nWithin included files, the current configuration path is not changed. Path resolution remains relative to the path of the main configuration file.\nNote Included files cannot include nested files. Specifying includes inside an included file has no effect.\nConfiguration Merging Loading a configuration file involves loading the physical file from disk and applying all variables and templates prior to parsing the file in a supported format hcl, json, toml and yaml. This means variables and templates must create valid configuration markup that can be parsed or loading will fail.\nConfiguration files are loaded and applied in a fixed order:\nThe main configuration file is loaded first includes are iterated in declaration order: Every item may be a single file path or glob expression Glob expressions are resolved and iterated in alphabetical order All paths are resolved relative to configuration path Configuration files are loaded in the following order when assuming /etc/resticprofile/profiles.conf with includes = [\"first.conf\", \"conf.d/*.conf\", \"last.conf\"]:\n/etc/resticprofile/profiles.conf /etc/resticprofile/first.conf /etc/resticprofile/conf.d/00_a.conf /etc/resticprofile/conf.d/01_a.conf /etc/resticprofile/conf.d/01_b.conf /etc/resticprofile/last.conf Configuration merging follows the logic:\nConfiguration properties are replaced Configuration structure (tree) is merged What includes later overrides what defines earlier Lists of values or lists of objects are considered properties not config structure and will be replaced ​ profiles.yaml first.yaml second.yaml Final configuration version: \"1\" includes: - first.yaml - second.yaml default: backup: source: - /usr version: \"1\" default: initialize: false backup: source: - /etc - /opt version: \"1\" default: initialize: true backup: exclude: - .* version: \"1\" includes: - first.yaml - second.yaml default: initialize: true backup: exclude: - .* source: - /etc - /opt Tip You can use resticprofile [\u003cprofile-name\u003e.]show (or resticprofile [--name \u003cprofile-name\u003e] show) to see the resulting configuration after merging.\nNote resticprofile prior to v0.18.0 had a slightly different behaviour when merging configuration properties of a different type (e.g. number \u003c-\u003e text or list \u003c-\u003e single value). In such cases the existing value was not overridden by an included file, breaking the rule “what includes later overrides what defines earlier”.",
    "description": "The configuration may be split into multiple files by adding includes = \"glob-pattern\" to the main configuration file. E.g. the following profiles.conf loads configurations from conf.d and profiles.d:\n​ toml yaml hcl json version = \"1\" # Includes includes = [\"conf.d/*.conf\", \"profiles.d/*.yaml\", \"profiles.d/*.toml\"] # Defaults [global] initialize = true version: \"1\" includes: - \"conf.d/*.conf\" - \"profiles.d/*.yaml\" - \"profiles.d/*.toml\" global: initialize: true includes = [\"conf.d/*.conf\", \"profiles.d/*.yaml\", \"profiles.d/*.toml\"] global { initialize = true } { \"version\": \"1\", \"includes\": [ \"conf.d/*.conf\", \"profiles.d/*.yaml\", \"profiles.d/*.toml\" ], \"global\": { \"initialize\": true } } Included configuration files may use any supported format and settings are merged so that multiple files can extend the same profiles. The HCL format is special in that it cannot be mixed with other formats.",
    "tags": [],
    "title": "Includes",
    "uri": "/configuration/include/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Using resticprofile",
    "content": "Minimum memory required restic can be memory hungry. I’m running a few servers with no swap and I managed to kill some of them during a backup.\nFor that matter I’ve introduced a parameter in the global section called min-memory. The default value is 100MB. You can disable it by using a value of 0.\nIt compares against (total - used) which is probably the best way to know how much memory is available (that is including the memory used for disk buffers/cache).",
    "description": "Minimum memory required restic can be memory hungry. I’m running a few servers with no swap and I managed to kill some of them during a backup.\nFor that matter I’ve introduced a parameter in the global section called min-memory. The default value is 100MB. You can disable it by using a value of 0.\nIt compares against (total - used) which is probably the best way to know how much memory is available (that is including the memory used for disk buffers/cache).",
    "tags": [],
    "title": "Memory",
    "uri": "/usage/memory/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Reference \u003e  Section Profile",
    "content": "Section profile.key-remove This section configures restic command key-remove available since 0.17.0 . Information on command and flags is copied from the restic manual pages.\nThe “remove” sub-command removes the selected key ID. The “remove” command does not allow removing the current key being used to access the repository.\nFlags used by resticprofile only: Name Type Default Notes run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands send-after one or more nested SendMonitoringSection Send HTTP request(s) after a successful restic command send-after-fail one or more nested SendMonitoringSection Send HTTP request(s) after failed restic or shell commands send-before one or more nested SendMonitoringSection Send HTTP request(s) before a restic command send-finally one or more nested SendMonitoringSection Send HTTP request(s) always, after all other commands Tip Flags declared for the restic command line in section profile can be overridden in this section.",
    "description": "Section profile.key-remove This section configures restic command key-remove available since 0.17.0 . Information on command and flags is copied from the restic manual pages.\nThe “remove” sub-command removes the selected key ID. The “remove” command does not allow removing the current key being used to access the repository.\nFlags used by resticprofile only: Name Type Default Notes run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands send-after one or more nested SendMonitoringSection Send HTTP request(s) after a successful restic command send-after-fail one or more nested SendMonitoringSection Send HTTP request(s) after failed restic or shell commands send-before one or more nested SendMonitoringSection Send HTTP request(s) before a restic command send-finally one or more nested SendMonitoringSection Send HTTP request(s) always, after all other commands Tip Flags declared for the restic command line in section profile can be overridden in this section.",
    "tags": [],
    "title": "key-remove",
    "uri": "/reference/profile/key-remove/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Configuration file",
    "content": "Tip You can use resticprofile [\u003cprofile-name\u003e.]show (or resticprofile [--name \u003cprofile-name\u003e] show) to see the effect inheritance has on a profile\nProfile Inheritance Profiles can inherit from a parent profile. This allows to define the general behaviour and common configuration in a base profile while derived profiles only define what is specific, e.g. what needs to be included in the backup or which command hooks (e.g. run-before, run-after \u0026 run-finally) must be started.\nWhen assuming profile “backup-homes” inherits from profile “base”, then the effective configuration of “backup-homes” is built by merging the profile configuration of “backup-homes” into “base”.\nProfile configuration merging follows the same logic as configuration merging in includes:\nWhat defines in the parent profile is replaced by definitions from the derived profile Configuration structure is merged, configuration properties are replaced A profile declares that it inherits from a parent by setting the property inherit to the name of the parent profile There is no default inheritance. If inherit is not set, no inheritance applies ​ Profile ‘base’ (yaml) Profile ‘backup-homes’ (yaml) … after applying ‘inherit’ version: \"1\" base: initialize: true repository: local:/backup/my-repo password-file: my-repo.key retention: after-backup: true keep-last: 2 keep-hourly: 1 keep-daily: 1 keep-weekly: 1 backup: exclude: - \"*.\" - \"*~\" - \"/backup/*\" source: - / version: \"1\" backup-homes: inherit: base retention: keep-hourly: false keep-daily: 30 keep-weekly: 26 backup: source: - /home/ version: \"1\" backup-homes: initialize: true repository: local:/backup/my-repo password-file: my-repo.key retention: after-backup: true keep-last: 2 keep-hourly: false keep-daily: 30 keep-weekly: 26 backup: exclude: - \"*.\" - \"*~\" - \"/backup/*\" source: - /home/ Note Configurations prior to version 2, treat lists as if they were configuration structure. Instead of replacing the parent with the derived list entirely, a derived list is merged into the parent list using list-index as key.\nThis differs from how includes handle lists and may lead to unexpected results. In configuration file format version 2 the behavior was changed to match that of includes and extended with a deterministic way of pre- \u0026 appending to list properties.\nInheritance of List Properties Starting with configuration format version 2, lists are no longer considered configuration structure and are replaced in derived profiles in the same way as inheritance behaves for any non-list properties. For example, when the parent and child profile define the same list property like run-before or source, the declaration of the child property replaces the declaration of the parent property entirely.\nFor version 2, when the parent defined source = ['/my-files1', '/my-files2'] and the child source = ['/my-other-files'], then only /my-other-files will really make it into the backup.\nIn contrast to this, configurations in version 1 partially merge lists on the list index. E.g. when the parent profile defines 2 items and the child only one, then the first entry in parent is replaced with the single child item and the second parent item is derived into the child profile.\nFor version 1, when the parent defined source = ['/my-files1', '/my-files2'] and the child source = ['/my-other-files'], then /my-other-files and /my-files2 will make it into the backup.\nPrepend \u0026 Append to List Properties Config format version 2 Feature preview, may change without notice\nInheritance in configuration format version 2 can prepend and append to parent list properties. This feature replaces list merging of version 1.\nAssuming the parent profile declares the list property \u003clist-property\u003e:\n\u003clist-property\u003e... or \u003clist-property\u003e__APPEND appends to the list property ...\u003clist-property\u003e or \u003clist-property\u003e__PREPEND prepends to the list property ​ yaml toml version: 2 profiles: default: backup: exclude: - '.*' - '~*' derived-profile: inherit: default backup: exclude...: '.git' source: '/myrepo' version = 2 [profiles.default.backup] exclude = ['.*', '~*'] [profiles.derived-profile] inherit = 'default' [profiles.derived-profile.backup] exclude__APPEND = '.git' source = '/myrepo' In the examples above, the final value of exclude in derived-profile is ['.*', '~*', '.git'].\nMixins Config format version 2 Feature preview, may change without notice\nMixins offer an easy way to share pieces of configuration between profiles without forcing a hierarchy of inheritance. Mixins can be used at every level within the profile configuration, support parametrisation (vars) and similar to hierarchic inheritance, they can prepend or append to list properties in addition to setting or replacing properties.\nMixins are declared in section mixins as named objects. The contents of these objects are merged into the profile configuration wherever a use property references (uses) the mixin. Configuration merging is following the same logic as used in inheritance and includes. When use references multiple mixins, the mixins apply in the order they are referenced and can override each other (mixins referenced later override what earlier mixins defined).\nConfiguration values inside a mixin may be parametrized with variables following the syntax ${variable} or $variable. Defaults for variables can be defined inside the mixin with default-vars and use can specify variables before merging the mixin. In difference to configuration variables that expand prior to parsing, mixin variables expand when the mixin is merged and for this reason the syntax differs.\nUnlike configuration variables and templates, mixins create parsed configuration structure not config markup that requires parsing. This allows mixins to be defined in one supported config format (yaml, toml, json) while being used in any other supported format when the configuration is split into multiple includes.\n​ yaml yaml (with vars) toml toml (with vars) version: 2 mixins: name-of-mixin: config-key: config-value profiles: profile: # set config-key to config-value in \"profile\" use: name-of-mixin version: 2 mixins: name-of-mixin: default-vars: WHAT: World parametrized-config-key: Hello $WHAT profiles: profile: # set parametrized-config-key to \"Hello World\" in \"profile\" use: name-of-mixin profile-non-default: # set parametrized-config-key to \"Hello Mixin\" in \"profile-non-default\" use: - name: name-of-mixin WHAT: \"Mixin\" version = 2 [mixins.name-of-mixin] config-key = \"config-value\" [profiles.profile] # set config-key to config-value in \"profile\" use = \"name-of-mixin\" version = 2 [mixins.name-of-mixin] parametrized-config-key = \"Hello $WHAT\" [mixins.name-of-mixin.default-vars] WHAT = \"World\" [profiles.profile] # set parametrized-config-key to \"Hello World\" in \"profile\" use = \"name-of-mixin\" [profiles.profile-non-default] # set parametrized-config-key to \"Hello Mixin\" in \"profile-non-default\" use = { name = \"name-of-mixin\", WHAT = \"Mixin\" } Named Mixin Declaration Every named mixin object below the mixins section has the following structure (all properties are optional):\nProperty Purpose default-vars: \u003cvariable-name\u003e Default value for variable $\u003cvariable-name\u003e \u003cconfig-key\u003e Set \u003cconfig-key\u003e when the mixin is used \u003cconfig-key\u003e: \u003csub-key\u003e Set \u003csub-key\u003e below \u003cconfig-key\u003e \u003cconfig-key\u003e... or \u003cconfig-key\u003e__APPEND Change \u003cconfig-key\u003e to a list and append to it ...\u003cconfig-key\u003e or \u003cconfig-key\u003e__PREPEND Change \u003cconfig-key\u003e to a list and prepend to it Mixin Usage The use property can be placed at any depth inside the profile configuration and is referencing a single mixin, a list of mixin names or a list of names and use-objects.\nEvery use object within the use list has the following structure:\nProperty Purpose name Name of the mixin to use and merge in place of the use property vars: \u003cvariable-name\u003e Set mixin variable $\u003cvariable-name\u003e \u003cvariable-name\u003e Set mixin variable $\u003cvariable-name\u003e (short syntax) Mixins are applied to the configuration after processing all includes but prior to profile inheritance which means the use properties are not inherited but the result of applying use is inherited instead. What is defined by a mixin in a parent profile can still be overridden by a definition in a derived profile, but derived profiles can not change which mixins apply to their parent.\nList properties that have been inherited from a parent can be modified (append/prepend) and replaced by a mixin.\nMixin Example ​ yaml toml # file format version 2 version: 2 # mixin declarations mixins: alternate-repository: repository: local:/backup/alternate password-file: alternate-repo.key retain-last: default-vars: LAST: 30 retention: keep-last: $LAST keep-hourly: false keep-daily: false keep-weekly: false exclude-backup: exclude...: - \"/backup/*\" - \"*.bak*\" exclude-hidden: exclude...: - \"*.\" - \"*~\" # profile declarations profiles: select-some-and-retain-last-30: use: - alternate-repository - retain-last backup: use: - exclude-backup - exclude-hidden exclude: /tmp source: / select-all-and-retain-last-60: use: - alternate-repository - name: retain-last LAST: 60 backup: source: / # file format version 2 version = 2 # mixin declarations [mixins] [mixins.alternate-repository] repository = \"local:/backup/alternate\" password-file = \"alternate-repo.key\" [mixins.retain-last] default-vars = { LAST = 30 } [mixins.retain-last.retention] keep-last = \"$LAST\" keep-hourly = false keep-daily = false keep-weekly = false [mixins.exclude-backup] exclude__APPEND = [ \"/backup/*\", \"*.bak*\", ] [mixins.exclude-hidden] exclude__APPEND = [ \"*.\", \"*~\", ] # profile declarations [profiles] [profiles.select-some-and-retain-last-30] use = [\"alternate-repository\", \"retain-last\"] [profiles.some-keep-last-30.backup] use = [\"exclude-backup\", \"exclude-hidden\"] exclude = \"/tmp\" source = \"/\" [profiles.select-all-and-retain-last-60] use = [ \"alternate-repository\", { name = \"retain-last\", LAST = 60 }, ] [profiles.select-all-and-retain-last-60.backup] source = \"/\" Common Flags Profiles in resticprofile configure commandline options (flags) for restic commands. While a profile has several predefined common properties (repository, password-file, …), any arbitrary common flags can be set directly inside the profile and will be inherited by all command sections of the profile.\nResticprofile applies a filter (see global.restic-arguments-filter) to decide which flags are supported in which restic commands and automatically removes unsupported flags when building commandline options.\nFor example, a flag like insecure-tls can be set at profile level and will be used whenever restic is started with this profile. Most supported flags can be set in this way at profile level, see reference for details.\n​ toml yaml hcl json version = \"1\" [default] repository = \"rest:https://backup-host/my-repo\" insecure-tls = true [default.backup] source = \"/\" version: \"1\" default: repository: rest:https://backup-host/my-repo insecure-tls: true backup: source: / default { repository = \"rest:https://backup-host/my-repo\" insecure-tls = true backup { source = \"/\" } } { \"version\": \"1\", \"default\": { \"repository\": \"rest:https://backup-host/my-repo\", \"insecure-tls\": true, \"backup\": { \"source\": \"/\" } } } Resulting in the following restic commandline:\nresticprofile --dry-run backup ... dry-run: /usr/local/bin/restic backup --insecure-tls --repo rest:https://backup-host/my-repo / resticprofile --dry-run prune ... dry-run: /usr/local/bin/restic prune --insecure-tls --repo rest:https://backup-host/my-repo Tip The option --dry-run prints restic commands to console or log file. To see what flags are effectively used with each restic command involved in backup, use resticprofile --dry-run [\u003cprofile-name\u003e.]backup.",
    "description": "Tip You can use resticprofile [\u003cprofile-name\u003e.]show (or resticprofile [--name \u003cprofile-name\u003e] show) to see the effect inheritance has on a profile\nProfile Inheritance Profiles can inherit from a parent profile. This allows to define the general behaviour and common configuration in a base profile while derived profiles only define what is specific, e.g. what needs to be included in the backup or which command hooks (e.g. run-before, run-after \u0026 run-finally) must be started.",
    "tags": [],
    "title": "Inheritance",
    "uri": "/configuration/inheritance/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Installation",
    "content": "Installation from source It’s very easy to compile from the source code.\nEnsure your machine has the following:\ngit (use git-bash on Windows) Go compiler GNU Make (preinstalled on many Unix systems). On Debian-based distributions (e.g., Ubuntu), install the build-essential package. Compilation:\ngit clone https://github.com/creativeprojects/resticprofile.git cd resticprofile make build Your compiled binary (resticprofile or resticprofile.exe) is available in the current folder.\nTo install the binary in your user path:\nmake install To build all common platforms (build-mac, build-linux, build-pi \u0026 build-windows):\nmake build-all Alternatively, a go-only build (without GNU Make) is accomplished with:\ngit clone https://github.com/creativeprojects/resticprofile.git cd resticprofile go build -v -o resticprofile .",
    "description": "Installation from source It’s very easy to compile from the source code.\nEnsure your machine has the following:\ngit (use git-bash on Windows) Go compiler GNU Make (preinstalled on many Unix systems). On Debian-based distributions (e.g., Ubuntu), install the build-essential package. Compilation:\ngit clone https://github.com/creativeprojects/resticprofile.git cd resticprofile make build Your compiled binary (resticprofile or resticprofile.exe) is available in the current folder.\nTo install the binary in your user path:",
    "tags": [],
    "title": "Source",
    "uri": "/installation/source/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Reference \u003e  Section Profile",
    "content": "Section profile.list This section configures restic command list . Information on command and flags is copied from the restic manual pages.\nThe “list” command allows listing objects in the repository based on type.\nFlags used by resticprofile only: Name Type Default Notes run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands send-after one or more nested SendMonitoringSection Send HTTP request(s) after a successful restic command send-after-fail one or more nested SendMonitoringSection Send HTTP request(s) after failed restic or shell commands send-before one or more nested SendMonitoringSection Send HTTP request(s) before a restic command send-finally one or more nested SendMonitoringSection Send HTTP request(s) always, after all other commands Tip Flags declared for the restic command line in section profile can be overridden in this section.",
    "description": "Section profile.list This section configures restic command list . Information on command and flags is copied from the restic manual pages.\nThe “list” command allows listing objects in the repository based on type.\nFlags used by resticprofile only: Name Type Default Notes run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands send-after one or more nested SendMonitoringSection Send HTTP request(s) after a successful restic command send-after-fail one or more nested SendMonitoringSection Send HTTP request(s) after failed restic or shell commands send-before one or more nested SendMonitoringSection Send HTTP request(s) before a restic command send-finally one or more nested SendMonitoringSection Send HTTP request(s) always, after all other commands Tip Flags declared for the restic command line in section profile can be overridden in this section.",
    "tags": [],
    "title": "list",
    "uri": "/reference/profile/list/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Configuration file",
    "content": "Special case for the copy command section The copy command needs two repositories (and quite likely 2 different set of keys). You can configure a copy section like this:\n​ toml yaml hcl version = \"1\" [default] initialize = false repository = \"/backup/original\" password-file = \"key\" [default.copy] initialize = true repository = \"/backup/copy\" password-file = \"other_key\" version: \"1\" default: initialize: false repository: \"/backup/original\" password-file: key copy: initialize: true repository: \"/backup/copy\" password-file: other_key default { initialize = false repository = \"/backup/original\" password-file = \"key\" copy = { initialize = true repository = \"/backup/copy\" password-file = \"other_key\" } } You will note that the secondary repository doesn’t need to have a 2 behind its flags (repository2, password-file2, etc.) nor it is prefixed by a from for the more recent version of restic (from-repo, from-password-file, etc.). It’s because the flags are well separated in the configuration and there’s no ambiguity.\nInitialisation If you want to initialize the copy repository using the copy-chunker-params flag, it needs to be called initialize-copy-chunker-params instead. As such, this flag does not exist on the copy target which is why we need to prefix it.\n​ toml yaml hcl version = \"1\" [profile] initialize = false repository = \"/backup/original\" password-file = \"key\" [profile.copy] initialize = true initialize-copy-chunker-params = true repository = \"/backup/copy\" password-file = \"other_key\" version: \"1\" profile: initialize: false repository: \"/backup/original\" password-file: key copy: initialize: true initialize-copy-chunker-params: true repository: \"/backup/copy\" password-file: other_key profile { initialize = false repository = \"/backup/original\" password-file = \"key\" copy = { initialize = true initialize-copy-chunker-params = true repository = \"/backup/copy\" password-file = \"other_key\" } } Copy only some snapshots You can restrict the copy to only some snapshots using the snapshot option.\nThe snapshot parameter can be a snapshot ID or the latest keyword. You can use an array if multiple values are needed.\n​ toml yaml hcl version = \"1\" [profile] repository = \"/backup/original\" password-file = \"key\" [profile.copy] initialize = true initialize-copy-chunker-params = true repository = \"/backup/copy\" password-file = \"other_key\" snapshot = \"latest\" version: \"1\" profile: repository: \"/backup/original\" password-file: key copy: initialize: true initialize-copy-chunker-params: true repository: \"/backup/copy\" password-file: other_key snapshot: latest profile { repository = \"/backup/original\" password-file = \"key\" copy = { initialize = true initialize-copy-chunker-params = true repository = \"/backup/copy\" password-file = \"other_key\" snapshot = \"latest\" } }",
    "description": "Special case for the copy command section The copy command needs two repositories (and quite likely 2 different set of keys). You can configure a copy section like this:\n​ toml yaml hcl version = \"1\" [default] initialize = false repository = \"/backup/original\" password-file = \"key\" [default.copy] initialize = true repository = \"/backup/copy\" password-file = \"other_key\" version: \"1\" default: initialize: false repository: \"/backup/original\" password-file: key copy: initialize: true repository: \"/backup/copy\" password-file: other_key default { initialize = false repository = \"/backup/original\" password-file = \"key\" copy = { initialize = true repository = \"/backup/copy\" password-file = \"other_key\" } } You will note that the secondary repository doesn’t need to have a 2 behind its flags (repository2, password-file2, etc.) nor it is prefixed by a from for the more recent version of restic (from-repo, from-password-file, etc.). It’s because the flags are well separated in the configuration and there’s no ambiguity.",
    "tags": [],
    "title": "Copy command",
    "uri": "/configuration/copy/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Reference \u003e  Section Profile",
    "content": "Section profile.ls This section configures restic command ls . Information on command and flags is copied from the restic manual pages.\nThe “ls” command lists files and directories in a snapshot.\nThe special snapshot ID “latest” can be used to list files and directories of the latest snapshot in the repository. The –host flag can be used in conjunction to select the latest snapshot originating from a certain host only.\nFile listings can optionally be filtered by directories. Any positional arguments after the snapshot ID are interpreted as absolute directory paths, and only files inside those directories will be listed. If the –recursive flag is used, then the filter will allow traversing into matching directories’ subfolders. Any directory paths specified must be absolute (starting with a path separator); paths use the forward slash ‘/’ as separator.\nFile listings can be sorted by specifying –sort followed by one of the sort specifiers ‘(name|size|time=mtime|atime|ctime|extension)’. The sorting can be reversed by specifying –reverse.\nFlags used by resticprofile only: Name Type Default Notes run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands send-after one or more nested SendMonitoringSection Send HTTP request(s) after a successful restic command send-after-fail one or more nested SendMonitoringSection Send HTTP request(s) after failed restic or shell commands send-before one or more nested SendMonitoringSection Send HTTP request(s) before a restic command send-finally one or more nested SendMonitoringSection Send HTTP request(s) always, after all other commands Flags passed to the restic command line: Name Type Default Notes host true / false OR one or more hostnames only consider snapshots for this host, when snapshot ID “latest” is given (can be specified multiple times) (default: $RESTIC_HOST). Boolean true is replaced with the hostname of the system. Examples: true, false, \"host\" human-readable true / false false print sizes in human readable format. restic \u003e= 0.16.0 long true / false false use a long listing format showing size and mode ncdu true / false false output NCDU export format (pipe into ’ncdu -f -’). restic \u003e= 0.17.0 path true / false OR one or more strings only consider snapshots including this (absolute) path, when snapshot ID “latest” is given (can be specified multiple times, snapshots must include all specified paths). Boolean true is replaced with the paths from section “backup”. Examples: true, false, \"path\" recursive true / false false include files in subfolders of the listed directories reverse true / false false reverse sorted output. restic \u003e= 0.18.0 sort string name sort output by (name/size/time=mtime/atime/ctime/extension). restic \u003e= 0.18.0 tag true / false OR one or more strings only consider snapshots including tag[,tag,…], when snapshot ID “latest” is given. Boolean true is replaced with the tags from section “backup”. Examples: true, false, \"tag\" Tip Flags declared for the restic command line in section profile can be overridden in this section.",
    "description": "Section profile.ls This section configures restic command ls . Information on command and flags is copied from the restic manual pages.\nThe “ls” command lists files and directories in a snapshot.\nThe special snapshot ID “latest” can be used to list files and directories of the latest snapshot in the repository. The –host flag can be used in conjunction to select the latest snapshot originating from a certain host only.\nFile listings can optionally be filtered by directories. Any positional arguments after the snapshot ID are interpreted as absolute directory paths, and only files inside those directories will be listed. If the –recursive flag is used, then the filter will allow traversing into matching directories’ subfolders. Any directory paths specified must be absolute (starting with a path separator); paths use the forward slash ‘/’ as separator.",
    "tags": [],
    "title": "ls",
    "uri": "/reference/profile/ls/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Reference \u003e  Section Profile",
    "content": "Section profile.migrate This section configures restic command migrate . Information on command and flags is copied from the restic manual pages.\nThe “migrate” command checks which migrations can be applied for a repository and prints a list with available migration names. If one or more migration names are specified, these migrations are applied.\nFlags used by resticprofile only: Name Type Default Notes run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands send-after one or more nested SendMonitoringSection Send HTTP request(s) after a successful restic command send-after-fail one or more nested SendMonitoringSection Send HTTP request(s) after failed restic or shell commands send-before one or more nested SendMonitoringSection Send HTTP request(s) before a restic command send-finally one or more nested SendMonitoringSection Send HTTP request(s) always, after all other commands Flags passed to the restic command line: Name Type Default Notes force true / false false apply a migration a second time Tip Flags declared for the restic command line in section profile can be overridden in this section.",
    "description": "Section profile.migrate This section configures restic command migrate . Information on command and flags is copied from the restic manual pages.\nThe “migrate” command checks which migrations can be applied for a repository and prints a list with available migration names. If one or more migration names are specified, these migrations are applied.\nFlags used by resticprofile only: Name Type Default Notes run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands send-after one or more nested SendMonitoringSection Send HTTP request(s) after a successful restic command send-after-fail one or more nested SendMonitoringSection Send HTTP request(s) after failed restic or shell commands send-before one or more nested SendMonitoringSection Send HTTP request(s) before a restic command send-finally one or more nested SendMonitoringSection Send HTTP request(s) always, after all other commands Flags passed to the restic command line: Name Type Default Notes force true / false false apply a migration a second time Tip Flags declared for the restic command line in section profile can be overridden in this section.",
    "tags": [],
    "title": "migrate",
    "uri": "/reference/profile/migrate/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Reference \u003e  Section Profile",
    "content": "Section profile.mount This section configures restic command mount . Information on command and flags is copied from the restic manual pages.\nThe “mount” command mounts the repository via fuse to a directory. This is a read-only mount.\nIf you need a different template for directories that contain snapshots, you can pass a time template via –time-template and path templates via –path-template.\nExample time template without colons:\n–time-template “2006-01-02_15-04-05”\nYou need to specify a sample format for exactly the following timestamp:\nMon Jan 2 15:04:05 -0700 MST 2006\nFor details please see the documentation for time.Format() at: https://godoc.org/time#Time.Format\nFor path templates, you can use the following patterns which will be replaced: %i by short snapshot ID %I by long snapshot ID %u by username %h by hostname %t by tags %T by timestamp as specified by –time-template\nThe default path templates are: “ids/%i” “snapshots/%T” “hosts/%h/%T” “tags/%t/%T”\nFlags used by resticprofile only: Name Type Default Notes run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands send-after one or more nested SendMonitoringSection Send HTTP request(s) after a successful restic command send-after-fail one or more nested SendMonitoringSection Send HTTP request(s) after failed restic or shell commands send-before one or more nested SendMonitoringSection Send HTTP request(s) before a restic command send-finally one or more nested SendMonitoringSection Send HTTP request(s) always, after all other commands Flags passed to the restic command line: Name Type Default Notes allow-other true / false false allow other users to access the data in the mounted directory allow-root true / false false allow root user to access the data in the mounted directory. restic \u003c 0.10.0 host true / false OR one or more hostnames only consider snapshots for this host (can be specified multiple times) (default: $RESTIC_HOST). Boolean true is replaced with the hostname of the system. Examples: true, false, \"host\" no-default-permissions true / false false for ‘allow-other’, ignore Unix permissions and allow users to read all snapshot files owner-root true / false false use ‘root’ as the owner of files and dirs path true / false OR one or more strings only consider snapshots including this (absolute) path (can be specified multiple times, snapshots must include all specified paths). Boolean true is replaced with the paths from section “backup”. Examples: true, false, \"path\" path-template one or more strings set template for path names. restic \u003e= 0.14.0 snapshot-template string \"2006-01-02T15:04:05Z07:00\" set template to use for snapshot dirs. restic \u003c 0.14.0 tag true / false OR one or more strings only consider snapshots including tag[,tag,…]. Boolean true is replaced with the tags from section “backup”. Examples: true, false, \"tag\" time-template string \"2006-01-02T15:04:05Z07:00\" set template to use for times. restic \u003e= 0.14.0 Tip Flags declared for the restic command line in section profile can be overridden in this section.",
    "description": "Section profile.mount This section configures restic command mount . Information on command and flags is copied from the restic manual pages.\nThe “mount” command mounts the repository via fuse to a directory. This is a read-only mount.\nIf you need a different template for directories that contain snapshots, you can pass a time template via –time-template and path templates via –path-template.\nExample time template without colons:\n–time-template “2006-01-02_15-04-05”\nYou need to specify a sample format for exactly the following timestamp:",
    "tags": [],
    "title": "mount",
    "uri": "/reference/profile/mount/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Configuration file",
    "content": "Run commands before, after success or after failure resticprofile has 2 places where you can run commands around restic:\ncommands that will run before and after every restic command (snapshots, backup, check, forget, prune, mount, etc.). These are placed at the root of each profile and are always considered. commands that will only run before and after specific restic commands. These are placed in supported sections of your profiles (currently supported are backup, copy, dump, find, ls, mount, restore, snapshots, stats and tag). Here’s an example of all the external commands that you can run during the execution of a profile:\n​ toml yaml hcl json version = \"1\" [documents] run-before = 'echo \"== run-before profile $PROFILE_NAME and command $PROFILE_COMMAND\"' run-after = 'echo \"== run-after profile $PROFILE_NAME and command $PROFILE_COMMAND\"' run-after-fail = 'echo \"== ERROR in profile $PROFILE_NAME command ${PROFILE_COMMAND}: $ERROR_MESSAGE\"' run-finally = 'echo \"== run-finally from profile $PROFILE_NAME after command $PROFILE_COMMAND\"' [documents.backup] run-before = 'echo \"=== run-before backup in profile $PROFILE_NAME\"' run-after = 'echo \"=== run-after backup in profile $PROFILE_NAME\"' run-after-fail = 'echo \"=== ERROR in backup for profile ${PROFILE_NAME}: $ERROR_MESSAGE\"' run-finally = 'echo \"=== run-finally after backup in profile $PROFILE_NAME\"' source = \"~/Documents\" version: \"1\" documents: run-before: 'echo \"== run-before profile $PROFILE_NAME and command $PROFILE_COMMAND\"' run-after: 'echo \"== run-after profile $PROFILE_NAME and command $PROFILE_COMMAND\"' run-after-fail: 'echo \"== ERROR in profile $PROFILE_NAME command ${PROFILE_COMMAND}: $ERROR_MESSAGE\"' run-finally: 'echo \"== run-finally from profile $PROFILE_NAME after command $PROFILE_COMMAND\"' backup: run-before: 'echo \"=== run-before backup in profile $PROFILE_NAME\"' run-after: 'echo \"=== run-after backup in profile $PROFILE_NAME\"' run-after-fail: 'echo \"=== ERROR in backup for profile ${PROFILE_NAME}: $ERROR_MESSAGE\"' run-finally: 'echo \"=== run-finally after backup in profile $PROFILE_NAME\"' source: ~/Documents documents { run-before = \"echo \\\"== run-before profile $PROFILE_NAME and command $PROFILE_COMMAND\\\"\" run-after = \"echo \\\"== run-after profile $PROFILE_NAME and command $PROFILE_COMMAND\\\"\" run-after-fail = \"echo \\\"== ERROR in profile $PROFILE_NAME command ${PROFILE_COMMAND}: $ERROR_MESSAGE\\\"\" run-finally = \"echo \\\"== run-finally from profile $PROFILE_NAME after command $PROFILE_COMMAND\\\"\" backup = { run-before = \"echo \\\"=== run-before backup in profile $PROFILE_NAME\\\"\" run-after = \"echo \\\"=== run-after backup in profile $PROFILE_NAME\\\"\" run-after-fail = \"echo \\\"=== ERROR in backup for profile ${PROFILE_NAME}: $ERROR_MESSAGE\\\"\" run-finally = \"echo \\\"=== run-finally after backup in profile $PROFILE_NAME\\\"\" source = \"~/Documents\" } } { \"version\": \"1\", \"documents\": { \"run-before\": \"echo \\\"== run-before profile $PROFILE_NAME and command $PROFILE_COMMAND\\\"\", \"run-after\": \"echo \\\"== run-after profile $PROFILE_NAME and command $PROFILE_COMMAND\\\"\", \"run-after-fail\": \"echo \\\"== ERROR in profile $PROFILE_NAME command ${PROFILE_COMMAND}: $ERROR_MESSAGE\\\"\", \"run-finally\": \"echo \\\"== run-finally from profile $PROFILE_NAME after command $PROFILE_COMMAND\\\"\", \"backup\": { \"run-before\": \"echo \\\"=== run-before backup in profile $PROFILE_NAME\\\"\", \"run-after\": \"echo \\\"=== run-after backup in profile $PROFILE_NAME\\\"\", \"run-after-fail\": \"echo \\\"=== ERROR in backup for profile ${PROFILE_NAME}: $ERROR_MESSAGE\\\"\", \"run-finally\": \"echo \\\"=== run-finally after backup in profile $PROFILE_NAME\\\"\", \"source\": \"~/Documents\" } } } run-before, run-after, run-after-fail and run-finally can be a string, or an array of strings if you need to run more than one command\nA few environment variables will be set before running these commands:\nPROFILE_NAME PROFILE_COMMAND: backup, check, forget, etc. Additionally, for the run-after-fail commands, these environment variables will also be available:\nERROR_MESSAGE (and ERROR) containing the latest error message ERROR_COMMANDLINE containing the command line that failed ERROR_EXIT_CODE containing the exit code of the command line that failed ERROR_STDERR containing any message that the failed command sent to the standard error (stderr) The commands of run-finally get the environment of run-after-fail when run-before, run-after or restic failed.\nFailures to run commands in run-finally are logged but do not influence environment, return code nor running of further commands listed in run-finally. This makes it the perfect choice for custom cleanup tasks that must always run.\nAll other command errors (= non-zero return code from a command) will skip running further commands in the same list and/or abort the flow.\nOutput when running the example from above ➜ resticprofile documents.backup == run-before profile documents and command backup === run-before backup in profile documents ... processed 355 files, 11.722 MiB in 0:00 snapshot 3949d2fb saved ... === run-after backup in profile documents == run-after profile documents and command backup === run-finally after backup in profile documents == run-finally from profile documents after command backup Order of run-* during a backup The commands will be running in this order during a backup:\nrun-before from the profile - if error, go to run-after-fail run-before from the backup section - if error, go to run-after-fail from backup section run the restic backup (with check and retention if configured) - if error, go to run-after-fail from backup section run-after from the backup section - if error, go to run-after-fail from backup section run-after from the profile - if error, go to run-after-fail If error: run-after-fail from the backup section - if error, go to run-finally If error: run-after-fail from the profile - if error, go to run-finally run-finally from the backup section - if error, log and continue with next run-finally from the profile - if error, log and continue with next Maybe it’s easier to understand with a flow diagram:\nflowchart TB LOCK(set resticprofile lock) UNLOCK(delete resticprofile lock) PRB('run-before' from profile) PRA('run-after' from profile) subgraph Backup [ ] BRB('run-before' from backup section) BRA('run-after' from backup section) RUN(run restic backup with check and/or retention if configured) end subgraph Failure [ ] BFAIL('run-after-fail' from backup section) PFAIL('run-after-fail' from profile) end subgraph Finally [ ] direction TB BRF('run-finally' from backup section) PRF('run-finally' from profile) BRF --\u003e PRF end LOCK --\u003e PRB PRB --\u003e|Error| PFAIL PRB --\u003e|Success| BRB BRB --\u003e|Error| BFAIL BRB --\u003e|Success| RUN RUN --\u003e|Error| BFAIL RUN --\u003e|Success| BRA BRA --\u003e|Error| BFAIL BRA --\u003e|Success| PRA BFAIL --\u003e|Error| Finally BFAIL --\u003e PFAIL PRA --\u003e|Error| PFAIL PRA --\u003e|Success| Finally PFAIL --\u003e Finally Finally --\u003e UNLOCK style Backup fill:#9990,stroke:#9990 style Failure fill:#9990,stroke:#9990 style Finally fill:#9991,stroke:#9994,stroke-width:4px resticprofile lock The local resticprofile lock is surrounding the whole process. It means that the run-after-fail target is not called if the lock cannot be obtained. This is a limitation of the current implementation.\nPassing environment variables Environment variables can be adjusted and passed between shell commands \u0026 restic by writing one or more VARIABLE=VALUE into an env-file that is configured within the current profile. To simplify this for shell commands, the template function {{env}} can be used to get a temporary dotenv file that is automatically appended to the env-file list of the current profile and reloaded whenever modified.\n​ toml yaml hcl json version = \"1\" [documents] run-before = 'echo \"RESTIC_DEBUG=/restic-debug.log\" \u003e\u003e \"{{env}}\"' [documents.backup] run-before = 'echo \"restic debug is written to $RESTIC_DEBUG\"' version: \"1\" documents: run-before: 'echo \"RESTIC_DEBUG=/restic-debug.log\" \u003e\u003e \"{{env}}\"' backup: run-before: 'echo \"restic debug is written to $RESTIC_DEBUG\"' documents { run-before = \"echo \\\"RESTIC_DEBUG=/restic-debug.log\\\" \u003e\u003e \\\"{{env}}\\\"\" backup = { run-before = \"echo \\\"restic debug is written to $RESTIC_DEBUG\\\"\" } } { \"version\": \"1\", \"documents\": { \"run-before\": \"echo \\\"RESTIC_DEBUG=/restic-debug.log\\\" \u003e\u003e \\\"{{env}}\\\"\", \"backup\": { \"run-before\": \"echo \\\"restic debug is written to $RESTIC_DEBUG\\\"\" } } } Run commands on stream errors In addition to hooks around profile and command execution, resticprofile allows to monitor the standard error stream of the current running command and trigger a custom hook when an output error line matches a regular expression pattern.\n​ toml yaml hcl json version = \"1\" [default] [[default.stream-error]] pattern = \".+ERROR.+\" run = 'echo \"Found ERROR at least 5 times in ${PROFILE_COMMAND}. Last matched line:\"; cat - ' max-runs = 0 min-matches = 5 version: \"1\" default: stream-error: - pattern: \".+ERROR.+\" run: 'echo \"Found ERROR at least 5 times in ${PROFILE_COMMAND}. Last matched line:\"; cat - ' max-runs: 0 min-matches: 5 default { stream-error = { pattern = \".+ERROR.+\" run = \"echo \\\"Found ERROR at least 5 times in ${PROFILE_COMMAND}. Last matched line:\\\"; cat - \" max-runs = 0 min-matches = 5 } } { \"version\": \"1\", \"default\": { \"stream-error\": [ { \"pattern\": \".+ERROR.+\", \"run\": \"echo \\\"Found ERROR at least 5 times in ${PROFILE_COMMAND}. Last matched line:\\\"; cat - \", \"max-runs\": 0, \"min-matches\": 5 } ] } } The config structure stream-error can be defined multiple times within a profile and consists of the following properties:\npattern: a regular expression pattern matched against every line of stderr. run: the command to run when pattern is found in stderr. max-runs: maximum number of times that run is started for a single monitored command (or 0 for no limit). min-matches: minimum number of times that pattern must match before starting run. The run command inherits the environment of the monitored command on a pattern match, which always includes:\nPROFILE_NAME PROFILE_COMMAND: backup, check, forget, etc. Stdin of the run command is populated with the error output line that matched the pattern. Using \"cat -\" in run effectively prints the line that triggered the action.\nThe following example shows how this could have been used with restic to address check failures caused by over usage of /tmp/ (restic fixed this problem in 0.14.0):\n​ toml yaml version = \"1\" [default] [[default.stream-error]] pattern = \"/tmp/restic-check-cache.+no space left on device\" run = \"rm -Rf /tmp/restic-check-cache*\" [[default.stream-error]] pattern = \"mkdir /tmp/restic-check-cache.+no such file or directory\" run = \"cat - | cut -d : -f 2 - | grep -E 'mkdir /tmp[^ \\\\.]+$' | sed 's/mkdir/mkdir -p/' - | sh\" version: \"1\" default: stream-error: - pattern: \"/tmp/restic-check-cache.+no space left on device\" run: \"rm -Rf /tmp/restic-check-cache*\" - pattern: \"mkdir /tmp/restic-check-cache.+no such file or directory\" run: \"cat - | cut -d : -f 2 - | grep -E 'mkdir /tmp[^ \\\\.]+$' | sed 's/mkdir/mkdir -p/' - | sh\"",
    "description": "Run commands before, after success or after failure resticprofile has 2 places where you can run commands around restic:\ncommands that will run before and after every restic command (snapshots, backup, check, forget, prune, mount, etc.). These are placed at the root of each profile and are always considered. commands that will only run before and after specific restic commands. These are placed in supported sections of your profiles (currently supported are backup, copy, dump, find, ls, mount, restore, snapshots, stats and tag). Here’s an example of all the external commands that you can run during the execution of a profile:",
    "tags": [
      "Monitoring"
    ],
    "title": "Command Hooks",
    "uri": "/configuration/run_hooks/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Using resticprofile",
    "content": "restic is already using a lock to avoid running some operations at the same time.\nSince resticprofile can run several commands in a profile, it could be better to run the whole batch in a lock so nobody can interfere in the meantime.\nFor this to happen you can specify a lock file in each profile:\n​ toml yaml hcl json version = \"1\" [src] lock = \"/tmp/resticprofile-profile-src.lock\" [src.backup] check-before = true exclude = [ \"/**/.git\" ] source = [ \"~/go\" ] [src.retention] after-backup = true before-backup = false compact = false keep-within = \"30d\" prune = true version: \"1\" src: lock: \"/tmp/resticprofile-profile-src.lock\" backup: check-before: true exclude: - /**/.git source: - ~/go retention: after-backup: true before-backup: false compact: false keep-within: 30d prune: true \"src\" = { \"lock\" = \"/tmp/resticprofile-profile-src.lock\" \"backup\" = { \"check-before\" = true \"exclude\" = [\"/**/.git\"] \"source\" = [\"~/go\"] } \"retention\" = { \"after-backup\" = true \"before-backup\" = false \"compact\" = false \"keep-within\" = \"30d\" \"prune\" = true } } { \"version\": \"1\", \"src\": { \"lock\": \"/tmp/resticprofile-profile-src.lock\", \"backup\": { \"check-before\": true, \"exclude\": [ \"/**/.git\" ], \"source\": [ \"~/go\" ] }, \"retention\": { \"after-backup\": true, \"before-backup\": false, \"compact\": false, \"keep-within\": \"30d\", \"prune\": true } } } For this profile, a lock will be set using the file /tmp/resticprofile-profile-src.lock for the duration of the profile: check, backup and retention (via the forget command)\nPlease note restic locks and resticprofile locks are completely independent\nStale locks In some cases, resticprofile as well as restic may leave a lock behind if the process died (or the machine rebooted).\nFor that matter, if you add the flag force-inactive-lock to your profile, resticprofile will detect and remove stale locks:\nresticprofile locks: Check for the presence of a process with the PID indicated in the lockfile. If it can’t find any, it will try to delete the lock and continue the operation (locking again, running profile and so on…) restic locks: Evaluate if a restic command failed on acquiring a lock. If the lock is older than restic-stale-lock-age, invoke restic unlock and retry the command that failed (can be disabled by setting restic-stale-lock-age to 0, default is 1h). ​ toml yaml hcl json version = \"1\" [global] restic-stale-lock-age = \"2h\" [src] lock = \"/tmp/resticprofile-profile-src.lock\" force-inactive-lock = true version: \"1\" global: restic-stale-lock-age: 2h src: lock: \"/tmp/resticprofile-profile-src.lock\" force-inactive-lock: true \"global\" = { \"restic-stale-lock-age\" = \"2h\" } \"src\" = { \"lock\" = \"/tmp/resticprofile-profile-src.lock\" \"force-inactive-lock\" = true } { \"version\": \"1\", \"global\": { \"restic-stale-lock-age\": \"2h\" }, \"src\": { \"lock\": \"/tmp/resticprofile-profile-src.lock\", \"force-inactive-lock\": true } } Lock wait By default, restic and resticprofile fail when a lock cannot be acquired as another process is currently holding it.\nDepending on the use case (e.g. scheduled backups), it may be more appropriate to wait on another process to finish instead of failing immediately.\nFor that matter, if you add the commandline flag --lock-wait or configure schedules with schedule-lock-wait, resticprofile will wait on other backup processes:\nresticprofile locks: Retry acquiring the lockfile until it either succeeds (when the other resticprofile process released the lock) or fail as the lock-wait duration has passed without success. restic locks: Evaluate if a restic command failed on acquiring a lock. If the lock is not considered stale, retry the restic command every restic-lock-retry-after (default 1 minute) until it acquired the lock, or fail as the lock-wait duration has passed. Note: The lock wait duration is cumulative. If various locks in one profile-run require lock wait, the total wait time may not exceed the duration that was specified.\nrestic lock management resticprofile can retry restic commands that fail on acquiring a lock and can also ask restic to unlock stale locks. The behaviour is controlled by 2 settings inside the global section:\n​ toml yaml hcl json version = \"1\" [global] # Retry a restic command that failed on acquiring a lock every minute # (at least), for up to the time specified in \"--lock-wait duration\". restic-lock-retry-after = \"1m\" # Ask restic to unlock a stale lock when its age is more than 2 hours # and the option \"force-inactive-lock\" is enabled in the profile. restic-stale-lock-age = \"2h\" version: \"1\" global: # Retry a restic command that failed on acquiring a lock every minute # (at least), for up to the time specified in \"--lock-wait duration\". restic-lock-retry-after: 1m # Ask restic to unlock a stale lock when its age is more than 2 hours # and the option \"force-inactive-lock\" is enabled in the profile. restic-stale-lock-age: 2h \"global\" = { # Retry a restic command that failed on acquiring a lock every minute # (at least), for up to the time specified in \"--lock-wait duration\". \"restic-lock-retry-after\" = \"1m\" # Ask restic to unlock a stale lock when its age is more than 2 hours # and the option \"force-inactive-lock\" is enabled in the profile. \"restic-stale-lock-age\" = \"2h\" } { \"version\": \"1\", \"global\": { \"restic-lock-retry-after\": \"1m\", \"restic-stale-lock-age\": \"2h\" } } If restic lock management is not desired, it can be disabled by setting both values to 0.",
    "description": "restic is already using a lock to avoid running some operations at the same time.\nSince resticprofile can run several commands in a profile, it could be better to run the whole batch in a lock so nobody can interfere in the meantime.\nFor this to happen you can specify a lock file in each profile:\n​ toml yaml hcl json version = \"1\" [src] lock = \"/tmp/resticprofile-profile-src.lock\" [src.backup] check-before = true exclude = [ \"/**/.git\" ] source = [ \"~/go\" ] [src.retention] after-backup = true before-backup = false compact = false keep-within = \"30d\" prune = true version: \"1\" src: lock: \"/tmp/resticprofile-profile-src.lock\" backup: check-before: true exclude: - /**/.git source: - ~/go retention: after-backup: true before-backup: false compact: false keep-within: 30d prune: true \"src\" = { \"lock\" = \"/tmp/resticprofile-profile-src.lock\" \"backup\" = { \"check-before\" = true \"exclude\" = [\"/**/.git\"] \"source\" = [\"~/go\"] } \"retention\" = { \"after-backup\" = true \"before-backup\" = false \"compact\" = false \"keep-within\" = \"30d\" \"prune\" = true } } { \"version\": \"1\", \"src\": { \"lock\": \"/tmp/resticprofile-profile-src.lock\", \"backup\": { \"check-before\": true, \"exclude\": [ \"/**/.git\" ], \"source\": [ \"~/go\" ] }, \"retention\": { \"after-backup\": true, \"before-backup\": false, \"compact\": false, \"keep-within\": \"30d\", \"prune\": true } } } For this profile, a lock will be set using the file /tmp/resticprofile-profile-src.lock for the duration of the profile: check, backup and retention (via the forget command)",
    "tags": [],
    "title": "Locks",
    "uri": "/usage/locks/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Schedules",
    "content": "resticprofile accepts these commands:\nschedule unschedule status These commands operate on the profile or group selected by --name, or on all profiles when --all is passed.\nWarning Before version 0.29.0, the --name flag on a group selected all profiles in the group for scheduling, similar to running the schedule command on each profile individually.\nVersion 0.29.0 introduced group scheduling: The group schedule works at the group level and runs all profiles one by one when triggered.\nExamples:\nresticprofile --name profile schedule resticprofile --name group schedule resticprofile schedule --all Schedules are always independent, regardless of whether they are created with --all or from a single profile.\nschedule command Install all schedules defined in the selected profile(s).\nNote: On systemd, you need to start the timer once to enable it. Otherwise, it will only be enabled on the next reboot. If you don’t want to start (and enable) it now, pass the --no-start flag to the command.\nIf you use the --all flag to schedule all profiles at once, use either user mode or system mode. Combining both will not schedule tasks properly:\nIf the user is not privileged, only user tasks will be scheduled. If the user is privileged, all schedules will be system schedules. Tip Before version v0.30.0, resticprofile did not keep a state of the schedule and unschedule commands. If you needed to make many changes to your profiles (e.g., moving, renaming, deleting), it was recommended to unschedule everything using the --all flag before making changes. This is no longer necessary since version v0.30.0.\nunschedule command Remove all schedules defined on the selected profile, or all profiles using the --all flag.\nBefore version v0.30.0, the --all flag didn’t remove schedules on deleted or renamed profiles.\nNote The behavior of the unschedule command changed in version v0.30.0:\nIt now deletes any schedule associated with the profile name, or any profile in the configuration file with --all (including deleted profiles).\nstatus command Print the status of all installed schedules for the selected profile(s).\nThe status command output depends on the OS. Refer to the examples for expected output.\nrun-schedule command This command is used by the scheduler to tell resticprofile to execute within a schedule. It sets the proper log output (schedule-log) and other schedule-specific flags.\nIf you’re scheduling resticprofile manually, use this command. It executes the profile with all schedule-* parameters defined in the profile.\nThis command takes one argument: the command name followed by the profile name, separated by an @ sign.\nresticprofile run-schedule backup@profile Info For the run-schedule command, you cannot specify the profile name using the --name flag.",
    "description": "resticprofile accepts these commands:\nschedule unschedule status These commands operate on the profile or group selected by --name, or on all profiles when --all is passed.\nWarning Before version 0.29.0, the --name flag on a group selected all profiles in the group for scheduling, similar to running the schedule command on each profile individually.\nVersion 0.29.0 introduced group scheduling: The group schedule works at the group level and runs all profiles one by one when triggered.",
    "tags": [],
    "title": "Schedule Commands",
    "uri": "/schedules/commands/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Installation",
    "content": "After installation, upgrade resticprofile to the latest release with this command:\nresticprofile self-update Package Managers The self-update command is generally unavailable when installed through a package manager like Homebrew or Scoop. Use the package manager’s upgrade feature instead.\nResticprofile checks for new versions from GitHub releases and prompts you to update. Use the -q or --quiet flag to update automatically without prompting.\nresticprofile --quiet self-update or\nresticprofile self-update --quiet",
    "description": "After installation, upgrade resticprofile to the latest release with this command:\nresticprofile self-update Package Managers The self-update command is generally unavailable when installed through a package manager like Homebrew or Scoop. Use the package manager’s upgrade feature instead.\nResticprofile checks for new versions from GitHub releases and prompts you to update. Use the -q or --quiet flag to update automatically without prompting.",
    "tags": [],
    "title": "Upgrade",
    "uri": "/installation/upgrade/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Reference \u003e  Section Profile",
    "content": "Section profile.options This section configures restic command options available since 0.18.0 . Information on command and flags is copied from the restic manual pages.\nThe “options” command prints a list of extended options.\nFlags used by resticprofile only: Name Type Default Notes run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands send-after one or more nested SendMonitoringSection Send HTTP request(s) after a successful restic command send-after-fail one or more nested SendMonitoringSection Send HTTP request(s) after failed restic or shell commands send-before one or more nested SendMonitoringSection Send HTTP request(s) before a restic command send-finally one or more nested SendMonitoringSection Send HTTP request(s) always, after all other commands Tip Flags declared for the restic command line in section profile can be overridden in this section.",
    "description": "Section profile.options This section configures restic command options available since 0.18.0 . Information on command and flags is copied from the restic manual pages.\nThe “options” command prints a list of extended options.\nFlags used by resticprofile only: Name Type Default Notes run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands send-after one or more nested SendMonitoringSection Send HTTP request(s) after a successful restic command send-after-fail one or more nested SendMonitoringSection Send HTTP request(s) after failed restic or shell commands send-before one or more nested SendMonitoringSection Send HTTP request(s) before a restic command send-finally one or more nested SendMonitoringSection Send HTTP request(s) always, after all other commands Tip Flags declared for the restic command line in section profile can be overridden in this section.",
    "tags": [],
    "title": "options",
    "uri": "/reference/profile/options/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Reference \u003e  Section Profile",
    "content": "Section profile.prune This section configures restic command prune . Information on command and flags is copied from the restic manual pages.\nThe “prune” command checks the repository and removes data that is not referenced and therefore not needed any more.\nFlags used by resticprofile only: Name Type Default Notes run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands schedule one or more strings OR nested ScheduleConfig Configures the scheduled execution of this profile section. Can be times in systemd timer format or a config structure. Examples: hourly, daily, weekly, monthly, 10:00,14:00,18:00,22:00, Wed,Fri 17:48, *-*-15 02:45, Mon..Fri 00:30 schedule-after-network-online true / false Don’t start this schedule when the network is offline (supported in “systemd”) schedule-capture-environment one or more strings RESTIC_* Set names (or glob expressions) of environment variables to capture during schedule creation. The captured environment is applied prior to “profile.env” when running the schedule. Whether capturing is supported depends on the type of scheduler being used (supported in “systemd” and “launchd”) schedule-ignore-on-battery true / false false Don’t start this schedule when running on battery schedule-ignore-on-battery-less-than integer Don’t start this schedule when running on battery and the state of charge is less than this percentage. Examples: 20, 33, 50, 75 schedule-lock-mode string default Specify how locks are used when running on schedule - see schedules/configuration/. Is one of default, fail, ignore schedule-lock-wait integer OR duration Set the maximum time to wait for acquiring locks when running on schedule. Examples: 150s, 15m, 30m, 45m, 1h, 2h30m schedule-log string Redirect the output into a log file or to syslog when running on schedule. Examples: /resticprofile.log, syslog-tcp://syslog-server:514, syslog:server, syslog: schedule-permission string auto Specify whether the schedule runs with system or user privileges - see schedules/configuration/. Is one of auto, system, user, user_logged_on schedule-priority string standard Set the priority at which the schedule is run. Is one of background, standard send-after one or more nested SendMonitoringSection Send HTTP request(s) after a successful restic command send-after-fail one or more nested SendMonitoringSection Send HTTP request(s) after failed restic or shell commands send-before one or more nested SendMonitoringSection Send HTTP request(s) before a restic command send-finally one or more nested SendMonitoringSection Send HTTP request(s) always, after all other commands Flags passed to the restic command line: Name Type Default Notes dry-run true / false false do not modify the repository, just print what would be done. restic \u003e= 0.12.0 max-repack-size string \"\" stop after repacking this much data in total (allowed suffixes for size: k/K, m/M, g/G, t/T). restic \u003e= 0.12.0 max-unused string \"5%\" tolerate given limit of unused data (absolute value in bytes with suffixes k/K, m/M, g/G, t/T, a value in % or the word ‘unlimited’). restic \u003e= 0.12.0 repack-cacheable-only true / false false only repack packs which are cacheable. restic \u003e= 0.12.0 repack-small true / false false repack pack files below 80% of target pack size. restic \u003e= 0.14.0 repack-smaller-than string \"\" pack below-limit packfiles (allowed suffixes: k/K, m/M). restic \u003e= 0.18.0 repack-uncompressed true / false false repack all uncompressed data. restic \u003e= 0.14.0 unsafe-recover-no-free-space string \"\" UNSAFE, READ THE DOCUMENTATION BEFORE USING! Try to recover a repository stuck with no free space. Do not use without trying out ‘prune –max-repack-size 0’ first. restic \u003e= 0.14.0 Tip Flags declared for the restic command line in section profile can be overridden in this section.",
    "description": "Section profile.prune This section configures restic command prune . Information on command and flags is copied from the restic manual pages.\nThe “prune” command checks the repository and removes data that is not referenced and therefore not needed any more.\nFlags used by resticprofile only: Name Type Default Notes run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands schedule one or more strings OR nested ScheduleConfig Configures the scheduled execution of this profile section. Can be times in systemd timer format or a config structure. Examples: hourly, daily, weekly, monthly, 10:00,14:00,18:00,22:00, Wed,Fri 17:48, *-*-15 02:45, Mon..Fri 00:30 schedule-after-network-online true / false Don’t start this schedule when the network is offline (supported in “systemd”) schedule-capture-environment one or more strings RESTIC_* Set names (or glob expressions) of environment variables to capture during schedule creation. The captured environment is applied prior to “profile.env” when running the schedule. Whether capturing is supported depends on the type of scheduler being used (supported in “systemd” and “launchd”) schedule-ignore-on-battery true / false false Don’t start this schedule when running on battery schedule-ignore-on-battery-less-than integer Don’t start this schedule when running on battery and the state of charge is less than this percentage. Examples: 20, 33, 50, 75 schedule-lock-mode string default Specify how locks are used when running on schedule - see schedules/configuration/. Is one of default, fail, ignore schedule-lock-wait integer OR duration Set the maximum time to wait for acquiring locks when running on schedule. Examples: 150s, 15m, 30m, 45m, 1h, 2h30m schedule-log string Redirect the output into a log file or to syslog when running on schedule. Examples: /resticprofile.log, syslog-tcp://syslog-server:514, syslog:server, syslog: schedule-permission string auto Specify whether the schedule runs with system or user privileges - see schedules/configuration/. Is one of auto, system, user, user_logged_on schedule-priority string standard Set the priority at which the schedule is run. Is one of background, standard send-after one or more nested SendMonitoringSection Send HTTP request(s) after a successful restic command send-after-fail one or more nested SendMonitoringSection Send HTTP request(s) after failed restic or shell commands send-before one or more nested SendMonitoringSection Send HTTP request(s) before a restic command send-finally one or more nested SendMonitoringSection Send HTTP request(s) always, after all other commands Flags passed to the restic command line: Name Type Default Notes dry-run true / false false do not modify the repository, just print what would be done. restic \u003e= 0.12.0 max-repack-size string \"\" stop after repacking this much data in total (allowed suffixes for size: k/K, m/M, g/G, t/T). restic \u003e= 0.12.0 max-unused string \"5%\" tolerate given limit of unused data (absolute value in bytes with suffixes k/K, m/M, g/G, t/T, a value in % or the word ‘unlimited’). restic \u003e= 0.12.0 repack-cacheable-only true / false false only repack packs which are cacheable. restic \u003e= 0.12.0 repack-small true / false false repack pack files below 80% of target pack size. restic \u003e= 0.14.0 repack-smaller-than string \"\" pack below-limit packfiles (allowed suffixes: k/K, m/M). restic \u003e= 0.18.0 repack-uncompressed true / false false repack all uncompressed data. restic \u003e= 0.14.0 unsafe-recover-no-free-space string \"\" UNSAFE, READ THE DOCUMENTATION BEFORE USING! Try to recover a repository stuck with no free space. Do not use without trying out ‘prune –max-repack-size 0’ first. restic \u003e= 0.14.0 Tip Flags declared for the restic command line in section profile can be overridden in this section.",
    "tags": [],
    "title": "prune",
    "uri": "/reference/profile/prune/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Configuration file",
    "content": "Send HTTP messages before and after a job As well as being able to run shell commands, you can now send HTTP messages before, after (success or failure) running a restic command.\nThe sections that allow sending HTTP hooks are:\nbackup copy check forget prune Tip You might notice that’s the same sections that can also be scheduled\nEach of these commands can send 4 different types of hooks:\nsend-before send-after send-after-fail send-finally The configuration is the same for each of these 4 types of hooks:\nName Required Default Notes url Yes None URL of your Webhook method No GET This is the HTTP method (GET, POST, HEAD, etc.) skip-tls-verification No False This is not recommended: Use only if you’re using your own server with a self-signed certificate headers No User-Agent set to resticprofile This is a subsection with a list of name and value body No Empty Used to send data to the Webhook (POST, PUT, PATCH) body-template No None Template file to generate the body (in go template format) Example sending monitoring information to healthchecks.io: ​ toml yaml hcl json version = \"1\" [profile] [profile.backup] source = \"/source\" exclude = [ \"/**/.git/\" ] schedule = [ \"*:00,30\" ] schedule-permission = \"user\" # you can have more than one target [[profile.backup.send-before]] method = \"HEAD\" url = \"https://hc-ping.com/831e288e-1293-46f8-ac31-70ea7f875650/start\" [[profile.backup.send-before]] method = \"HEAD\" url = \"https://httpstat.us/400\" # you can have more than one target [[profile.backup.send-after]] method = \"HEAD\" url = \"https://hc-ping.com/831e288e-1293-46f8-ac31-70ea7f875650\" [[profile.backup.send-after]] method = \"HEAD\" url = \"https://httpstat.us/500\" [profile.backup.send-after-fail] method = \"POST\" url = \"https://hc-ping.com/831e288e-1293-46f8-ac31-70ea7f875650/fail\" body = \"${ERROR}\\n\\n${ERROR_STDERR}\" [[profile.backup.send-after-fail.headers]] name = \"Content-Type\" value = \"text/plain; charset=UTF-8\" [profile.check] schedule = [ \"*:15\" ] [profile.check.send-before] method = \"HEAD\" url = \"https://hc-ping.com/e0f62e41-b75f-450f-8cdd-7f25e466d2dc/start\" [profile.check.send-after] method = \"HEAD\" url = \"https://hc-ping.com/e0f62e41-b75f-450f-8cdd-7f25e466d2dc\" [profile.retention] after-backup = true version: \"1\" profile: backup: source: \"/source\" exclude: - \"/**/.git/\" schedule: - \"*:00,30\" schedule-permission: user # you can have more than one target send-before: - method: HEAD url: https://hc-ping.com/831e288e-1293-46f8-ac31-70ea7f875650/start - method: HEAD url: https://httpstat.us/400 # you can have more than one target send-after: - method: HEAD url: https://hc-ping.com/831e288e-1293-46f8-ac31-70ea7f875650 - method: HEAD url: https://httpstat.us/500 send-after-fail: method: POST url: https://hc-ping.com/831e288e-1293-46f8-ac31-70ea7f875650/fail body: \"${ERROR}\\n\\n${ERROR_STDERR}\" headers: - name: Content-Type value: \"text/plain; charset=UTF-8\" check: schedule: - \"*:15\" send-before: method: HEAD url: https://hc-ping.com/e0f62e41-b75f-450f-8cdd-7f25e466d2dc/start send-after: method: HEAD url: https://hc-ping.com/e0f62e41-b75f-450f-8cdd-7f25e466d2dc retention: after-backup: true \"profile\" { \"backup\" = { \"source\" = \"/source\" \"exclude\" = [\"/**/.git/\"] \"schedule\" = [\"*:00,30\"] \"schedule-permission\" = \"user\" \"send-before\" = { \"method\" = \"HEAD\" \"url\" = \"https://hc-ping.com/831e288e-1293-46f8-ac31-70ea7f875650/start\" } \"send-before\" = { \"method\" = \"HEAD\" \"url\" = \"https://httpstat.us/400\" } \"send-after\" = { \"method\" = \"HEAD\" \"url\" = \"https://hc-ping.com/831e288e-1293-46f8-ac31-70ea7f875650\" } \"send-after\" = { \"method\" = \"HEAD\" \"url\" = \"https://httpstat.us/500\" } \"send-after-fail\" = { \"method\" = \"POST\" \"url\" = \"https://hc-ping.com/831e288e-1293-46f8-ac31-70ea7f875650/fail\" \"body\" = \"${ERROR}\\n\\n${ERROR_STDERR}\" \"headers\" = { \"name\" = \"Content-Type\" \"value\" = \"text/plain; charset=UTF-8\" } } } \"check\" = { \"schedule\" = [\"*:15\"] \"send-before\" = { \"method\" = \"HEAD\" \"url\" = \"https://hc-ping.com/e0f62e41-b75f-450f-8cdd-7f25e466d2dc/start\" } \"send-after\" = { \"method\" = \"HEAD\" \"url\" = \"https://hc-ping.com/e0f62e41-b75f-450f-8cdd-7f25e466d2dc\" } } \"retention\" = { \"after-backup\" = true } } { \"version\": \"1\", \"profile\": { \"backup\": { \"source\": \"/source\", \"exclude\": [ \"/**/.git/\" ], \"schedule\": [ \"*:00,30\" ], \"schedule-permission\": \"user\", \"send-before\": [ { \"method\": \"HEAD\", \"url\": \"https://hc-ping.com/831e288e-1293-46f8-ac31-70ea7f875650/start\" }, { \"method\": \"HEAD\", \"url\": \"https://httpstat.us/400\" } ], \"send-after\": [ { \"method\": \"HEAD\", \"url\": \"https://hc-ping.com/831e288e-1293-46f8-ac31-70ea7f875650\" }, { \"method\": \"HEAD\", \"url\": \"https://httpstat.us/500\" } ], \"send-after-fail\": { \"method\": \"POST\", \"url\": \"https://hc-ping.com/831e288e-1293-46f8-ac31-70ea7f875650/fail\", \"body\": \"${ERROR}\\n\\n${ERROR_STDERR}\", \"headers\": [ { \"name\": \"Content-Type\", \"value\": \"text/plain; charset=UTF-8\" } ] } }, \"check\": { \"schedule\": [ \"*:15\" ], \"send-before\": { \"method\": \"HEAD\", \"url\": \"https://hc-ping.com/e0f62e41-b75f-450f-8cdd-7f25e466d2dc/start\" }, \"send-after\": { \"method\": \"HEAD\", \"url\": \"https://hc-ping.com/e0f62e41-b75f-450f-8cdd-7f25e466d2dc\" } }, \"retention\": { \"after-backup\": true } } } A few environment variables will be available to construct the url and the body:\nPROFILE_NAME PROFILE_COMMAND: backup, check, forget, etc. Additionally, for the send-after-fail hooks, these environment variables will be available:\nERROR containing the latest error message ERROR_COMMANDLINE containing the command line that failed ERROR_EXIT_CODE containing the exit code of the command line that failed ERROR_STDERR containing any message that the failed command sent to the standard error (stderr) The send-finally hooks are also getting the environment of send-after-fail when any previous operation has failed (except any send operation).\nFailures in any send-* are logged but do not influence environment or return code.\norder of send-* Here’s the flow of HTTP hooks:\ngraph TD LOCK(set resticprofile lock) UNLOCK(delete resticprofile lock) LOCK --\u003e SB SB('send-before') --\u003e RUN RUN(run restic command, or group of commands) RUN --\u003e|Success| SA RUN --\u003e|Error| SAF SA('send-after') --\u003e SF SAF('send-after-fail') --\u003e SF SF('send-finally') SF --\u003e UNLOCK resticprofile lock The local resticprofile lock is surrounding the whole process. It means that the run-after-fail target is not called if the lock cannot be obtained. This is a limitation of the current implementation.\nbody-template You can use a standard go template to build the webhook body. It has to be defined in a separate file (otherwise it would clash with the configuration as a go template itself).\nThe object passed as an argument to the template is:\nProfileName string ProfileCommand string Error ErrorContext Stdout string The type ErrorContext is available after an error occurred (otherwise all fields are blank):\nMessage string CommandLine string ExitCode string Stderr string Here’s an example of a body file:\n{ \"profileName\": \"{{ .ProfileName }}\", \"profileCommand\": \"{{ .ProfileCommand }}\", \"exitCode\": \"{{ .Error.ExitCode }}\" } The field exitCode will be blank if no error occured.\nAnd here’s an example of a configuration using a body template:\n​ toml yaml hcl json version = \"1\" [profile] [profile.backup] source = \"/source\" [profile.backup.send-finally] method = \"POST\" url = \"https://my/monitoring.example.com/\" body-template = \"body-template.json\" [[profile.backup.send-finally.headers]] name = \"Content-Type\" value = \"application/json\" version: \"1\" profile: backup: source: \"/source\" send-finally: method: POST url: https://my/monitoring.example.com/ body-template: body-template.json headers: - name: Content-Type value: \"application/json\" \"profile\" { \"backup\" = { \"source\" = \"/source\" \"send-finally\" = { \"method\" = \"POST\" \"url\" = \"https://my/monitoring.example.com/\" \"body-template\" = \"body-template.json\" \"headers\" = { \"name\" = \"Content-Type\" \"value\" = \"application/json\" } } } } { \"version\": \"1\", \"profile\": { \"backup\": { \"source\": \"/source\", \"send-finally\": { \"method\": \"POST\", \"url\": \"https://my/monitoring.example.com/\", \"body-template\": \"body-template.json\", \"headers\": [ { \"name\": \"Content-Type\", \"value\": \"application/json\" } ] } } } } Self-signed certificates If your monitoring system is using self-signed certificates, you can import them in resticprofile (and you don’t need to rely on the skip-tls-verification flag)\nThe parameter is in the global section and is called ca-certificates: it contains a list of certificate files (PEM).\ntimeout The default timeout for all HTTP requests is 30 seconds.\nYou can change the default timeout in the global section with a parameter called send-timeout.\nThe format is like:\n30s 2m 1m20s global configuration example ​ toml yaml hcl json version = \"1\" [global] send-timeout = \"10s\" ca-certificates = [ \"ca-chain.cert.pem\" ] version: \"1\" global: send-timeout: 10s ca-certificates: - ca-chain.cert.pem global { send-timeout = \"10s\" ca-certificates = \"ca-chain.cert.pem\" } { \"version\": \"1\", \"global\": { \"send-timeout\": \"10s\", \"ca-certificates\": [ \"ca-chain.cert.pem\" ] } }",
    "description": "Send HTTP messages before and after a job As well as being able to run shell commands, you can now send HTTP messages before, after (success or failure) running a restic command.\nThe sections that allow sending HTTP hooks are:\nbackup copy check forget prune Tip You might notice that’s the same sections that can also be scheduled\nEach of these commands can send 4 different types of hooks:",
    "tags": [
      "Monitoring",
      "Healthchecks.io"
    ],
    "title": "HTTP Hooks",
    "uri": "/configuration/http_hooks/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Reference \u003e  Section Profile",
    "content": "Section profile.rebuild-index This section configures restic command rebuild-index removed in 0.16.0 . Information on command and flags is copied from the restic manual pages.\nThe “rebuild-index” command creates a new index based on the pack files in the repository.\nFlags used by resticprofile only: Name Type Default Notes run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands send-after one or more nested SendMonitoringSection Send HTTP request(s) after a successful restic command send-after-fail one or more nested SendMonitoringSection Send HTTP request(s) after failed restic or shell commands send-before one or more nested SendMonitoringSection Send HTTP request(s) before a restic command send-finally one or more nested SendMonitoringSection Send HTTP request(s) always, after all other commands Flags passed to the restic command line: Name Type Default Notes read-all-packs true / false false read all pack files to generate new index from scratch. restic \u003e= 0.12.0 Tip Flags declared for the restic command line in section profile can be overridden in this section.",
    "description": "Section profile.rebuild-index This section configures restic command rebuild-index removed in 0.16.0 . Information on command and flags is copied from the restic manual pages.\nThe “rebuild-index” command creates a new index based on the pack files in the repository.\nFlags used by resticprofile only: Name Type Default Notes run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands send-after one or more nested SendMonitoringSection Send HTTP request(s) after a successful restic command send-after-fail one or more nested SendMonitoringSection Send HTTP request(s) after failed restic or shell commands send-before one or more nested SendMonitoringSection Send HTTP request(s) before a restic command send-finally one or more nested SendMonitoringSection Send HTTP request(s) always, after all other commands Flags passed to the restic command line: Name Type Default Notes read-all-packs true / false false read all pack files to generate new index from scratch. restic \u003e= 0.12.0 Tip Flags declared for the restic command line in section profile can be overridden in this section.",
    "tags": [],
    "title": "rebuild-index",
    "uri": "/reference/profile/rebuild-index/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Reference \u003e  Section Profile",
    "content": "Section profile.recover This section configures restic command recover . Information on command and flags is copied from the restic manual pages.\nThe “recover” command builds a new snapshot from all directories it can find in the raw data of the repository which are not referenced in an existing snapshot. It can be used if, for example, a snapshot has been removed by accident with “forget”.\nFlags used by resticprofile only: Name Type Default Notes run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands send-after one or more nested SendMonitoringSection Send HTTP request(s) after a successful restic command send-after-fail one or more nested SendMonitoringSection Send HTTP request(s) after failed restic or shell commands send-before one or more nested SendMonitoringSection Send HTTP request(s) before a restic command send-finally one or more nested SendMonitoringSection Send HTTP request(s) always, after all other commands Tip Flags declared for the restic command line in section profile can be overridden in this section.",
    "description": "Section profile.recover This section configures restic command recover . Information on command and flags is copied from the restic manual pages.\nThe “recover” command builds a new snapshot from all directories it can find in the raw data of the repository which are not referenced in an existing snapshot. It can be used if, for example, a snapshot has been removed by accident with “forget”.\nFlags used by resticprofile only: Name Type Default Notes run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands send-after one or more nested SendMonitoringSection Send HTTP request(s) after a successful restic command send-after-fail one or more nested SendMonitoringSection Send HTTP request(s) after failed restic or shell commands send-before one or more nested SendMonitoringSection Send HTTP request(s) before a restic command send-finally one or more nested SendMonitoringSection Send HTTP request(s) always, after all other commands Tip Flags declared for the restic command line in section profile can be overridden in this section.",
    "tags": [],
    "title": "recover",
    "uri": "/reference/profile/recover/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Reference \u003e  Section Profile",
    "content": "Section profile.repair This section configures restic command repair available since 0.16.0 . Information on command and flags is copied from the restic manual pages.\nRepair the repository\nFlags used by resticprofile only: Name Type Default Notes run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands send-after one or more nested SendMonitoringSection Send HTTP request(s) after a successful restic command send-after-fail one or more nested SendMonitoringSection Send HTTP request(s) after failed restic or shell commands send-before one or more nested SendMonitoringSection Send HTTP request(s) before a restic command send-finally one or more nested SendMonitoringSection Send HTTP request(s) always, after all other commands Tip Flags declared for the restic command line in section profile can be overridden in this section.",
    "description": "Section profile.repair This section configures restic command repair available since 0.16.0 . Information on command and flags is copied from the restic manual pages.\nRepair the repository\nFlags used by resticprofile only: Name Type Default Notes run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands send-after one or more nested SendMonitoringSection Send HTTP request(s) after a successful restic command send-after-fail one or more nested SendMonitoringSection Send HTTP request(s) after failed restic or shell commands send-before one or more nested SendMonitoringSection Send HTTP request(s) before a restic command send-finally one or more nested SendMonitoringSection Send HTTP request(s) always, after all other commands Tip Flags declared for the restic command line in section profile can be overridden in this section.",
    "tags": [],
    "title": "repair",
    "uri": "/reference/profile/repair/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Reference",
    "content": "Type: true / false Is a boolean value to toggle a flag or specific behaviour that has to match the syntax for booleans in the used file format. Type: numeric \u0026 integer Is a numeric value (whole-number for integer) that has to match the syntax for numbers in the used file format. Type: string Is a sequence of UTF-8 characters that usually have to be placed in quotes and must match the syntax for strings in the used file format. Type: duration A duration string is a sequence of decimal numbers, each with optional fraction and a unit suffix, such as “300ms”, “-1.5h” or “2h45m”. Valid time units are “ns”, “us” (or “µs”), “ms”, “s”, “m”, “h”. Type: uri An uri string must be a valid URI or URL. Type: hostname A hostname string must be a valid hostname or FQDN. Type: one or more [type]s Indicates that multiple values of [type] can be specified as a list. The list syntax depends on the used file format. Type: one or more nested [type] Is a value or a list of values that follow the configuration structure declared in [type]. Type: key =\u003e [type] Is a value that is configuration structure of string keys and values of [type]. Type: key =\u003e value Is a value that is configuration structure of string keys and values of any type.",
    "description": "Type: true / false Is a boolean value to toggle a flag or specific behaviour that has to match the syntax for booleans in the used file format. Type: numeric \u0026 integer Is a numeric value (whole-number for integer) that has to match the syntax for numbers in the used file format. Type: string Is a sequence of UTF-8 characters that usually have to be placed in quotes and must match the syntax for strings in the used file format. Type: duration A duration string is a sequence of decimal numbers, each with optional fraction and a unit suffix, such as “300ms”, “-1.5h” or “2h45m”. Valid time units are “ns”, “us” (or “µs”), “ms”, “s”, “m”, “h”. Type: uri An uri string must be a valid URI or URL. Type: hostname A hostname string must be a valid hostname or FQDN. Type: one or more [type]s Indicates that multiple values of [type] can be specified as a list. The list syntax depends on the used file format. Type: one or more nested [type] Is a value or a list of values that follow the configuration structure declared in [type]. Type: key =\u003e [type] Is a value that is configuration structure of string keys and values of [type]. Type: key =\u003e value Is a value that is configuration structure of string keys and values of any type.",
    "tags": [],
    "title": "Value types",
    "uri": "/reference/value-types/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Using resticprofile",
    "content": "Info This section is mostly copied from the restic documentation:\nBacking up your system without running restic as root\nBacking up your system without running resticprofile as root Creating a complete backup of a machine requires a privileged process that is able to read all files. On UNIX-like systems this is traditionally the root user. Processes running as root have superpower. They cannot only read all files but do also have the power to modify the system in any possible way.\nWith great power comes great responsibility. If a process running as root malfunctions, is exploited, or simply configured in a wrong way it can cause any possible damage to the system. This means you only want to run programs as root that you trust completely. And even if you trust a program, it is good and common practice to run it with the least possible privileges.\nCapabilities on Linux Fortunately, Linux has functionality to divide root’s power into single separate capabilities. You can remove these from a process running as root to restrict it. And you can add capabilities to a process running as a normal user, which is what we are going to do.\nFull backup without root To be able to completely backup a system, restic has to read all the files. Luckily Linux knows a capability that allows precisely this. We can assign this single capability to restic and then run it as an unprivileged user.\nFirst we create a new user called restic that is going to create the backups:\nuseradd --system --create-home --shell /sbin/nologin restic Then we download and install the resticprofile and restic binary into the user’s home directory (please refer to the respective installation sections). Let’s save both binaries in the ~/bin directory.\nBefore we assign any special capability to the binaries, we restrict their permissions so that only root and the newly created restic user can execute them. Otherwise another - possibly untrusted - user could misuse the privileged binaries to circumvent file access controls.\nchown root:restic ~restic/bin/restic chmod 750 ~restic/bin/restic chown root:restic ~restic/bin/resticprofile chmod 750 ~restic/bin/resticprofile Finally we can use setcap to add an extended attribute to the binaries. On every execution the system will read the extended attribute, interpret it and assign capabilities accordingly.\nsetcap cap_dac_read_search=+ep ~restic/bin/restic setcap cap_dac_read_search=pie ~restic/bin/resticprofile Warning The capabilities of the setcap command only applies to this specific copy of the binaries. If you run restic self-update or in any other way replace or update the binaries, the capabilities you added above will not be in effect for the new binaries. To mitigate this, simply run the setcap commands again, to make sure that the new binaries have the same and intended capabilities.\nFrom now on the user restic can run resticprofile to backup the whole system.\nsudo -u restic /home/restic/bin/resticprofile backup",
    "description": "Info This section is mostly copied from the restic documentation:\nBacking up your system without running restic as root\nBacking up your system without running resticprofile as root Creating a complete backup of a machine requires a privileged process that is able to read all files. On UNIX-like systems this is traditionally the root user. Processes running as root have superpower. They cannot only read all files but do also have the power to modify the system in any possible way.",
    "tags": [],
    "title": "No root backup on Linux",
    "uri": "/usage/noroot/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Configuration file",
    "content": "Templates are a great way to compose configuration profiles.\nPlease keep in mind that yaml files are sensitive to the number of spaces. Also if you declare a block already declared, it overrides the previous declaration (instead of merging them).\nFor that matter, configuration templates are probably more useful if you use the toml or hcl configuration format.\nHere’s a simple example\n{{ define \"hello\" }} hello = \"world\" {{ end }} To use the content of this template anywhere in your configuration, simply call it:\n{{ template \"hello\" . }} Note the dot after the name: it’s used to pass the variables to the template. Without it, all your variables (like .Profile.Name) would display \u003cno value\u003e.\nHere’s a working example:\n​ toml yaml hcl json # # This is an example of configuration using nested templates # # nested template declarations # this template declaration won't appear here in the configuration file # it will only appear when called by { { template \"backup_root\" . } } {{ define \"backup_root\" }} exclude = [ \"{{ .Profile.Name }}-backup.log\" ] exclude-file = [ \"{{ .ConfigDir }}/root-excludes\", \"{{ .ConfigDir }}/excludes\" ] exclude-caches = true tag = [ \"root\" ] source = [ \"/\" ] {{ end }} version = \"1\" [global] priority = \"low\" ionice = true ionice-class = 2 ionice-level = 6 [base] status-file = \"{{ .Env.HOME }}/status.json\" [base.snapshots] host = true [base.retention] host = true after-backup = true keep-within = \"30d\" ######################################################### [nas] inherit = \"base\" repository = \"rest:http://{{ .Env.BACKUP_REST_USER }}:{{ .Env.BACKUP_REST_PASSWORD }}@nas:8000/root\" password-file = \"nas-key\" # root [nas-root] inherit = \"nas\" [nas-root.backup] # get the content of \"backup_root\" defined at the top {{ template \"backup_root\" . }} schedule = \"01:47\" schedule-permission = \"system\" schedule-log = \"{{ .Profile.Name }}-backup.log\" ######################################################### [azure] inherit = \"base\" repository = \"azure:restic:/\" password-file = \"azure-key\" lock = \"/tmp/resticprofile-azure.lock\" [azure.backup] schedule-permission = \"system\" schedule-log = \"{{ .Profile.Name }}-backup.log\" # root [azure-root] inherit = \"azure\" [azure-root.backup] # get the content of \"backup_root\" defined at the top {{ template \"backup_root\" . }} schedule = \"03:58\" # mysql [azure-mysql] inherit = \"azure\" [azure-mysql.backup] tag = [ \"mysql\" ] run-before = [ \"rm -f /tmp/mysqldumpall.sql\", \"mysqldump -u{{ .Env.MYSQL_BACKUP_USER }} -p{{ .Env.MYSQL_BACKUP_PASSWORD }} --all-databases \u003e /tmp/mysqldumpall.sql\" ] source = \"/tmp/mysqldumpall.sql\" run-after = [ \"rm -f /tmp/mysqldumpall.sql\" ] schedule = \"03:18\" # # This is an example of configuration using nested templates # # nested template declarations # this template declaration won't appear here in the configuration file # it will only appear when called by { { template \"backup_root\" . } } {{ define \"backup_root\" }} exclude: - '{{ .Profile.Name }}-backup.log' exclude-file: - '{{ .ConfigDir }}/root-excludes' - '{{ .ConfigDir }}/excludes' exclude-caches: true tag: - root source: - / {{ end }} version: \"1\" global: priority: low ionice: true ionice-class: 2 ionice-level: 6 base: status-file: '{{ .Env.HOME }}/status.json' snapshots: host: true retention: host: true after-backup: true keep-within: 30d nas: inherit: base repository: \u003e- rest:http://{{ .Env.BACKUP_REST_USER }}:{{ .Env.BACKUP_REST_PASSWORD }}@nas:8000/root password-file: nas-key nas-root: inherit: nas backup: # get the content of \"backup_root\" defined at the top {{ template \"backup_root\" . }} schedule: '01:47' schedule-permission: system schedule-log: '{{ .Profile.Name }}-backup.log' azure: inherit: base repository: 'azure:restic:/' password-file: azure-key lock: /tmp/resticprofile-azure.lock backup: schedule-permission: system schedule-log: '{{ .Profile.Name }}-backup.log' azure-root: inherit: azure backup: # get the content of \"backup_root\" defined at the top {{ template \"backup_root\" . }} schedule: '03:58' azure-mysql: inherit: azure backup: tag: - mysql run-before: - rm -f /tmp/mysqldumpall.sql - \u003e- mysqldump -u{{ .Env.MYSQL_BACKUP_USER }} -p{{ .Env.MYSQL_BACKUP_PASSWORD }} --all-databases \u003e /tmp/mysqldumpall.sql source: /tmp/mysqldumpall.sql run-after: - rm -f /tmp/mysqldumpall.sql schedule: '03:18' # # This is an example of configuration using nested templates # # nested template declarations # this template declaration won't appear here in the configuration file # it will only appear when called by { { template \"backup_root\" . } } {{ define \"backup_root\" }} \"exclude\" = [\"{{ .Profile.Name }}-backup.log\"] \"exclude-file\" = [\"{{ .ConfigDir }}/root-excludes\", \"{{ .ConfigDir }}/excludes\"] \"exclude-caches\" = true \"tag\" = [\"root\"] \"source\" = [\"/\"] {{end}} \"global\" = { \"priority\" = \"low\" \"ionice\" = true \"ionice-class\" = 2 \"ionice-level\" = 6 } \"base\" = { \"status-file\" = \"{{ .Env.HOME }}/status.json\" \"snapshots\" = { \"host\" = true } \"retention\" = { \"host\" = true \"after-backup\" = true \"keep-within\" = \"30d\" } } \"nas\" = { \"inherit\" = \"base\" \"repository\" = \"rest:http://{{ .Env.BACKUP_REST_USER }}:{{ .Env.BACKUP_REST_PASSWORD }}@nas:8000/root\" \"password-file\" = \"nas-key\" } \"nas-root\" = { \"inherit\" = \"nas\" \"backup\" = { # get the content of \"backup_root\" defined at the top {{ template \"backup_root\" . }} \"schedule\" = \"01:47\" \"schedule-permission\" = \"system\" \"schedule-log\" = \"{{ .Profile.Name }}-backup.log\" } } \"azure\" = { \"inherit\" = \"base\" \"repository\" = \"azure:restic:/\" \"password-file\" = \"azure-key\" \"lock\" = \"/tmp/resticprofile-azure.lock\" \"backup\" = { \"schedule-permission\" = \"system\" \"schedule-log\" = \"{{ .Profile.Name }}-backup.log\" } } \"azure-root\" = { \"inherit\" = \"azure\" \"backup\" = { # get the content of \"backup_root\" defined at the top {{ template \"backup_root\" . }} \"schedule\" = \"03:58\" } } \"azure-mysql\" = { \"inherit\" = \"azure\" \"backup\" = { \"tag\" = [\"mysql\"] \"run-before\" = [\"rm -f /tmp/mysqldumpall.sql\", \"mysqldump -u{{ .Env.MYSQL_BACKUP_USER }} -p{{ .Env.MYSQL_BACKUP_PASSWORD }} --all-databases \u003e /tmp/mysqldumpall.sql\"] \"source\" = \"/tmp/mysqldumpall.sql\" \"run-after\" = [\"rm -f /tmp/mysqldumpall.sql\"] \"schedule\" = \"03:18\" } } {{ define \"backup_root\" }} \"exclude\": [ \"{{ .Profile.Name }}-backup.log\" ], \"exclude-file\": [ \"{{ .ConfigDir }}/root-excludes\", \"{{ .ConfigDir }}/excludes\" ], \"exclude-caches\": true, \"tag\": [ \"root\" ], \"source\": [ \"/\" ], {{ end }} { \"version\": \"1\", \"global\": { \"priority\": \"low\", \"ionice\": true, \"ionice-class\": 2, \"ionice-level\": 6 }, \"base\": { \"status-file\": \"{{ .Env.HOME }}/status.json\", \"snapshots\": { \"host\": true }, \"retention\": { \"host\": true, \"after-backup\": true, \"keep-within\": \"30d\" } }, \"nas\": { \"inherit\": \"base\", \"repository\": \"rest:http://{{ .Env.BACKUP_REST_USER }}:{{ .Env.BACKUP_REST_PASSWORD }}@nas:8000/root\", \"password-file\": \"nas-key\" }, \"nas-root\": { \"inherit\": \"nas\", \"backup\": { {{ template \"backup_root\" . }} \"schedule\": \"01:47\", \"schedule-permission\": \"system\", \"schedule-log\": \"{{ .Profile.Name }}-backup.log\" } }, \"azure\": { \"inherit\": \"base\", \"repository\": \"azure:restic:/\", \"password-file\": \"azure-key\", \"lock\": \"/tmp/resticprofile-azure.lock\", \"backup\": { \"schedule-permission\": \"system\", \"schedule-log\": \"{{ .Profile.Name }}-backup.log\" } }, \"azure-root\": { \"inherit\": \"azure\", \"backup\": { {{ template \"backup_root\" . }} \"schedule\": \"03:58\" } }, \"azure-mysql\": { \"inherit\": \"azure\", \"backup\": { \"tag\": [ \"mysql\" ], \"run-before\": [ \"rm -f /tmp/mysqldumpall.sql\", \"mysqldump -u{{ .Env.MYSQL_BACKUP_USER }} -p{{ .Env.MYSQL_BACKUP_PASSWORD }} --all-databases \u003e /tmp/mysqldumpall.sql\" ], \"source\": \"/tmp/mysqldumpall.sql\", \"run-after\": [ \"rm -f /tmp/mysqldumpall.sql\" ], \"schedule\": \"03:18\" } } } Debugging your template and variable expansion If for some reason you don’t understand why resticprofile is not loading your configuration file, you can display the generated configuration after executing the template (and replacing the variables and everything) using the --trace flag. We will see it in action in a moment.\nLimitations of using templates There’s something to be aware of when dealing with templates: at the time the template is compiled, it has no knowledge of what the end configuration should look like: it has no knowledge of profiles for example. Here is a non-working example of what I mean:\nversion = \"1\" {{ define \"retention\" }} [{{ .Profile.Name }}.retention] after-backup = true before-backup = false compact = false keep-within = \"30d\" prune = true {{ end }} [src] password-file = \"{{ .ConfigDir }}/{{ .Profile.Name }}-key\" repository = \"/backup/{{ .Now.Weekday }}\" lock = \"$HOME/resticprofile-profile-{{ .Profile.Name }}.lock\" initialize = true [src.backup] source = \"{{ .Env.HOME }}/go/src\" check-before = true exclude = [\"/**/.git\"] exclude-caches = true tag = [\"{{ .Profile.Name }}\", \"dev\"] {{ template \"retention\" . }} [src.snapshots] tag = [\"{{ .Profile.Name }}\", \"dev\"] [other] password-file = \"{{ .ConfigDir }}/{{ .Profile.Name }}-key\" repository = \"/backup/{{ .Now.Weekday }}\" lock = \"$HOME/resticprofile-profile-{{ .Profile.Name }}.lock\" initialize = true {{ template \"retention\" . }} Here we define a template retention that we use twice. When you ask for a configuration of a profile, either src or other the template will change all occurrences of { .Profile.Name } to the name of the profile, no matter where it is inside the file.\n% resticprofile -c examples/parse-error.toml -n src show 2020/11/06 21:39:48 cannot load configuration file: cannot parse toml configuration: While parsing config: (35, 6): duplicated tables exit status 1 Run the command again, this time asking a display of the compiled version of the configuration:\n% resticprofile -c examples/parse-error.toml -n src --trace show 2020/11/06 21:48:20 resticprofile 0.10.0-dev compiled with go1.15.3 2020/11/06 21:48:20 Resulting configuration for profile 'default': ==================== 1: 2: 3: [src] 4: password-file = \"/Users/CP/go/src/resticprofile/examples/default-key\" 5: repository = \"/backup/Friday\" 6: lock = \"$HOME/resticprofile-profile-default.lock\" 7: initialize = true 8: 9: [src.backup] 10: source = \"/Users/CP/go/src\" 11: check-before = true 12: exclude = [\"/**/.git\"] 13: exclude-caches = true 14: tag = [\"default\", \"dev\"] 15: 16: 17: [default.retention] 18: after-backup = true 19: before-backup = false 20: compact = false 21: keep-within = \"30d\" 22: prune = true 23: 24: 25: [src.snapshots] 26: tag = [\"default\", \"dev\"] 27: 28: [other] 29: password-file = \"/Users/CP/go/src/resticprofile/examples/default-key\" 30: repository = \"/backup/Friday\" 31: lock = \"$HOME/resticprofile-profile-default.lock\" 32: initialize = true 33: 34: 35: [default.retention] 36: after-backup = true 37: before-backup = false 38: compact = false 39: keep-within = \"30d\" 40: prune = true 41: 42: ==================== 2020/11/06 21:48:20 cannot load configuration file: cannot parse toml configuration: While parsing config: (35, 6): duplicated tables exit status 1 As you can see in lines 17 and 35, there are 2 sections of the same name. They could be both called [src.retention], but actually the reason why they’re both called [default.retention] is that resticprofile is doing a first pass to load the [global] section using a profile name of default.\nThe fix for this configuration is very simple though, just remove the section name from the template:\n{{ define \"retention\" }} after-backup = true before-backup = false compact = false keep-within = \"30d\" prune = true {{ end }} version = \"1\" [src] password-file = \"{{ .ConfigDir }}/{{ .Profile.Name }}-key\" repository = \"/backup/{{ .Now.Weekday }}\" lock = \"$HOME/resticprofile-profile-{{ .Profile.Name }}.lock\" initialize = true [src.backup] source = \"{{ .Env.HOME }}/go/src\" check-before = true exclude = [\"/**/.git\"] exclude-caches = true tag = [\"{{ .Profile.Name }}\", \"dev\"] [src.retention] {{ template \"retention\" . }} [src.snapshots] tag = [\"{{ .Profile.Name }}\", \"dev\"] [other] password-file = \"{{ .ConfigDir }}/{{ .Profile.Name }}-key\" repository = \"/backup/{{ .Now.Weekday }}\" lock = \"$HOME/resticprofile-profile-{{ .Profile.Name }}.lock\" initialize = true [other.retention] {{ template \"retention\" . }} And now you no longer end up with duplicated sections.\nDocumentation on template, variable expansion and other configuration scripting There are a lot more you can do with configuration templates. If you’re brave enough, you can read the full documentation of the Go templates.\nFor a more end-user kind of documentation, you can also read hugo documentation on templates which is using the same Go implementation, but don’t talk much about the developer side of it. Please note there are some functions only made available by hugo though, resticprofile adds its own set of functions.\nTemplate functions resticprofile supports the following set of own functions in all templates:\n{{ \"some string\" | contains \"some\" }} =\u003e true {{ \"some string\" | matches \"^.+str.+$\" }} =\u003e true {{ \"some old string\" | replace \"old\" \"new\" }} =\u003e some new string {{ \"some old string\" | replaceR \"(old)\" \"$1 and new\" }} =\u003e some old and new string {{ \"some old string\" | regex \"(old)\" \"$1 and new\" }} =\u003e some old and new string (regex is an alias to replaceR) {{ \"ABC\" | lower }} =\u003e abc {{ \"abc\" | upper }} =\u003e ABC {{ \" A \" | trim }} =\u003e A {{ \"--A-\" | trimPrefix \"--\" }} =\u003e A- {{ \"--A-\" | trimSuffix \"-\" }} =\u003e --A {{ range $v := \"A,B,C\" | split \",\" }} ({{ $v }}) {{ end }} =\u003e (A) (B) (C) {{ \"A,B,C\" | split \",\" | join \";\" }} =\u003e A;B;C {{ \"A, B, C\" | splitR \"\\\\s*,\\\\s*\" | join \";\" }} =\u003e A;B;C {{ range $v := list \"A\" \"B\" \"C\" }} ({{ $v }}) {{ end }} =\u003e (A) (B) (C) {{ with map \"k1\" \"v1\" \"k2\" \"v2\" }} {{ .k1 }}-{{ .k2 }} {{ end }} =\u003e v1-v2 {{ with list \"A\" \"B\" \"C\" \"D\" | map }} {{ ._0 }}-{{ ._1 }}-{{ ._3 }} {{ end }} =\u003e A-B-D {{ with list \"A\" \"B\" \"C\" \"D\" | map \"key\" }} {{ .key | join \"-\" }} {{ end }} =\u003e A-B-C-D {{ tempDir }} =\u003e /tmp/resticprofile.../t - unique OS specific existing temporary directory {{ tempFile \"filename\" }} =\u003e /tmp/resticprofile.../t/filename - unique OS specific existing temporary file {{ env }} =\u003e /tmp/resticprofile.../t/profile.env - unique OS specific existing temporary file that is added to the current profile env-files list All {{ temp* }} functions guarantee that returned temporary directories and files are existing \u0026 writable. When resticprofile ends, temporary directories and files are removed.\nThe {{ env }} function is a special case of {{ tempFile ... }} returning a path to a file in dotenv file format that can be used in shell commands to alter the environment. On posix compatible file systems, the file is accessible only by the user that started resticprofile. Further it is automatically added to the env-file list of the current profile.\nThe following functions can be used to encode data (e.g. when dealing with arbitrary input):\n{{ \"a \u0026 b\\n\" | js }} =\u003e a \\u0026 b\\u000A - JSON string equivalent of the input (builtin) {{ \"a \u0026 b\\n\" | html }} =\u003e a \u0026amp; b\\n - HTML text escaped input (builtin) {{ \"a \u0026 b\\n\" | urlquery }} =\u003e a+%26+b%0A - URL query escaped input (builtin) {{ \"plain\" | base64 }} =\u003e cGxhaW4= - Base64 encoded input {{ \"plain\" | hex }} =\u003e 706c61696e - Hexadecimal encoded input Tip Encode with js when creating strings in YAML, TOML or JSON configuration files, e.g.: \"{{ .Env.MY_VAR | js }}\". This ensures the markup remains correct and can be parsed regardless of the input data.\nPlease refer to the official documentation for the general syntax and set of default functions provided in go text templates.",
    "description": "Templates are a great way to compose configuration profiles.\nPlease keep in mind that yaml files are sensitive to the number of spaces. Also if you declare a block already declared, it overrides the previous declaration (instead of merging them).\nFor that matter, configuration templates are probably more useful if you use the toml or hcl configuration format.\nHere’s a simple example\n{{ define \"hello\" }} hello = \"world\" {{ end }} To use the content of this template anywhere in your configuration, simply call it:",
    "tags": [],
    "title": "Templates",
    "uri": "/configuration/templates/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Reference \u003e  Section Profile",
    "content": "Section profile.repair-index This section configures restic command repair-index available since 0.16.0 . Information on command and flags is copied from the restic manual pages.\nThe “repair index” command creates a new index based on the pack files in the repository.\nFlags used by resticprofile only: Name Type Default Notes run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands send-after one or more nested SendMonitoringSection Send HTTP request(s) after a successful restic command send-after-fail one or more nested SendMonitoringSection Send HTTP request(s) after failed restic or shell commands send-before one or more nested SendMonitoringSection Send HTTP request(s) before a restic command send-finally one or more nested SendMonitoringSection Send HTTP request(s) always, after all other commands Flags passed to the restic command line: Name Type Default Notes read-all-packs true / false false read all pack files to generate new index from scratch. restic \u003e= 0.16.0 Tip Flags declared for the restic command line in section profile can be overridden in this section.",
    "description": "Section profile.repair-index This section configures restic command repair-index available since 0.16.0 . Information on command and flags is copied from the restic manual pages.\nThe “repair index” command creates a new index based on the pack files in the repository.\nFlags used by resticprofile only: Name Type Default Notes run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands send-after one or more nested SendMonitoringSection Send HTTP request(s) after a successful restic command send-after-fail one or more nested SendMonitoringSection Send HTTP request(s) after failed restic or shell commands send-before one or more nested SendMonitoringSection Send HTTP request(s) before a restic command send-finally one or more nested SendMonitoringSection Send HTTP request(s) always, after all other commands Flags passed to the restic command line: Name Type Default Notes read-all-packs true / false false read all pack files to generate new index from scratch. restic \u003e= 0.16.0 Tip Flags declared for the restic command line in section profile can be overridden in this section.",
    "tags": [],
    "title": "repair-index",
    "uri": "/reference/profile/repair-index/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Configuration file",
    "content": "Variable expansion in configuration file You might want to reuse the same configuration (or bits of it) on different environments. One way of doing it is to create a generic configuration where specific bits can be replaced by a variable.\nThere are two kinds of variables: template variables: These variables are fixed once the full configuration file is loaded: includes are loaded, and inheritance is resolved. These variables are replaced by their value before the configuration is parsed. runtime variables: These variables are replaced by their value after the configuration is parsed. In other words: these variables are replaced by their value just before the command is executed. Template variables Pre-defined variables The syntax for using a pre-defined variable is:\n{{ .VariableName }} The list of pre-defined variables is:\nVariable Type Description .Profile.Name string Profile name .Now time.Time object Now object: see explanation bellow .StartupDir string Current directory at the time resticprofile was started .CurrentDir string Current directory at the time a profile is executed .ConfigDir string Directory where the configuration was loaded from .TempDir string OS temporary directory (might not exist) .BinaryDir string Directory where resticprofile was started from (since v0.18.0) .OS string GOOS name: “windows”, “linux”, “darwin”, etc. (since v0.21.0) .Arch string GOARCH name: “386”, “amd64”, “arm64”, etc. (since v0.21.0) .Hostname string Host name .Env.{NAME} string Environment variable ${NAME} Environment variables are accessible using .Env. followed by the (upper case) name of the environment variable.\nExample: {{ .Env.HOME }} will be replaced by your home directory (on unixes). The equivalent on Windows would be {{ .Env.USERPROFILE }}.\nDefault and fallback values for an empty or unset variable can be declared with {{ ... | or ... }}. For example {{ .Env.HOME | or .Env.USERPROFILE | or \"/fallback-homedir\" }} will try to resolve $HOME, if empty try to resolve $USERPROFILE and finally default to /fallback-homedir if none of the env variables are defined.\nThe variables .OS and .Arch are filled with the target platform that resticprofile was compiled for (see releases for more information on existing precompiled platform binaries).\nFor variables that are objects, you can call all public fields or methods on it. For example, for the variable .Now (time.Time) you can use:\n(.Now.AddDate years months days) .Now.Day .Now.Format layout .Now.Hour .Now.Minute .Now.Month .Now.Second .Now.UTC .Now.Unix .Now.Weekday .Now.Year .Now.YearDay Time can be formatted with .Now.Format layout, for example {{ .Now.Format \"2006-01-02T15:04:05Z07:00\" }} formats the current time as RFC3339 timestamp. Check time.Time#constants for more layout examples.\nThe variable .Now also allows to derive a relative Time. For example {{ (.Now.AddDate 0 -6 -14).Format \"2006-01-02\" }} formats a date that is 6 months and 14 days before now.\nExample You can use a combination of inheritance and variables in the resticprofile configuration file like so:\n​ toml yaml hcl json version = \"1\" [generic] password-file = \"{{ .ConfigDir }}/{{ .Profile.Name }}-key\" repository = \"/backup/{{ .Now.Weekday }}\" lock = \"$HOME/resticprofile-profile-{{ .Profile.Name }}.lock\" initialize = true [generic.backup] check-before = true exclude = [ \"/**/.git\" ] exclude-caches = true one-file-system = false run-after = \"echo All Done!\" run-before = [ \"echo Hello {{ .Env.LOGNAME }}\", \"echo current dir: {{ .CurrentDir }}\", \"echo config dir: {{ .ConfigDir }}\", \"echo profile started at {{ .Now.Format \"02 Jan 06 15:04 MST\" }}\" ] tag = [ \"{{ .Profile.Name }}\", \"dev\" ] [generic.retention] after-backup = true before-backup = false compact = false keep-within = \"30d\" prune = true tag = [ \"{{ .Profile.Name }}\", \"dev\" ] [generic.snapshots] tag = [ \"{{ .Profile.Name }}\", \"dev\" ] [src] inherit = \"generic\" [src.backup] source = [ \"{{ .Env.HOME }}/go/src\" ] [src.check] # Weekday is an integer from 0 to 6 (starting from Sunday) # Nice trick to add 1 to an integer: https://stackoverflow.com/a/72465098 read-data-subset = \"{{ len (printf \"a%*s\" .Now.Weekday \"\") }}/7\" --- version: \"1\" generic: password-file: \"{{ .ConfigDir }}/{{ .Profile.Name }}-key\" repository: \"/backup/{{ .Now.Weekday }}\" lock: \"$HOME/resticprofile-profile-{{ .Profile.Name }}.lock\" initialize: true backup: check-before: true exclude: - /**/.git exclude-caches: true one-file-system: false run-after: echo All Done! run-before: - \"echo Hello {{ .Env.LOGNAME }}\" - \"echo current dir: {{ .CurrentDir }}\" - \"echo config dir: {{ .ConfigDir }}\" - \"echo profile started at {{ .Now.Format \"02 Jan 06 15:04 MST\" }}\" tag: - \"{{ .Profile.Name }}\" - dev retention: after-backup: true before-backup: false compact: false keep-within: 30d prune: true tag: - \"{{ .Profile.Name }}\" - dev snapshots: tag: - \"{{ .Profile.Name }}\" - dev src: inherit: generic backup: source: - \"{{ .Env.HOME }}/go/src\" check: # Weekday is an integer from 0 to 6 (starting from Sunday) # Nice trick to add 1 to an integer: https://stackoverflow.com/a/72465098 read-data-subset: \"{{ len (printf \"a%*s\" .Now.Weekday \"\") }}/7\" \"generic\" = { \"password-file\" = \"{{ .ConfigDir }}/{{ .Profile.Name }}-key\" \"repository\" = \"/backup/{{ .Now.Weekday }}\" \"lock\" = \"$HOME/resticprofile-profile-{{ .Profile.Name }}.lock\" \"initialize\" = true \"backup\" = { \"check-before\" = true \"exclude\" = [\"/**/.git\"] \"exclude-caches\" = true \"one-file-system\" = false \"run-after\" = \"echo All Done!\" \"run-before\" = [\"echo Hello {{ .Env.LOGNAME }}\", \"echo current dir: {{ .CurrentDir }}\", \"echo config dir: {{ .ConfigDir }}\", \"echo profile started at {{ .Now.Format \"02 Jan 06 15:04 MST\" }}\"] \"tag\" = [\"{{ .Profile.Name }}\", \"dev\"] } \"retention\" = { \"after-backup\" = true \"before-backup\" = false \"compact\" = false \"keep-within\" = \"30d\" \"prune\" = true \"tag\" = [\"{{ .Profile.Name }}\", \"dev\"] } \"snapshots\" = { \"tag\" = [\"{{ .Profile.Name }}\", \"dev\"] } } \"src\" = { \"inherit\" = \"generic\" \"backup\" = { \"source\" = [\"{{ .Env.HOME }}/go/src\"] } \"check\" = { # Weekday is an integer from 0 to 6 (starting from Sunday) # Nice trick to add 1 to an integer: https://stackoverflow.com/a/72465098 \"read-data-subset\" = \"{{ len (printf \"a%*s\" .Now.Weekday \"\") }}/7\" } } { \"version\": \"1\", \"generic\": { \"password-file\": \"{{ .ConfigDir }}/{{ .Profile.Name }}-key\", \"repository\": \"/backup/{{ .Now.Weekday }}\", \"lock\": \"$HOME/resticprofile-profile-{{ .Profile.Name }}.lock\", \"initialize\": true, \"backup\": { \"check-before\": true, \"exclude\": [ \"/**/.git\" ], \"exclude-caches\": true, \"one-file-system\": false, \"run-after\": \"echo All Done!\", \"run-before\": [ \"echo Hello {{ .Env.LOGNAME }}\", \"echo current dir: {{ .CurrentDir }}\", \"echo config dir: {{ .ConfigDir }}\", \"echo profile started at {{ .Now.Format \"02 Jan 06 15:04 MST\" }}\" ], \"tag\": [ \"{{ .Profile.Name }}\", \"dev\" ] }, \"retention\": { \"after-backup\": true, \"before-backup\": false, \"compact\": false, \"keep-within\": \"30d\", \"prune\": true, \"tag\": [ \"{{ .Profile.Name }}\", \"dev\" ] }, \"snapshots\": { \"tag\": [ \"{{ .Profile.Name }}\", \"dev\" ] } }, \"src\": { \"inherit\": \"generic\", \"backup\": { \"source\": [ \"{{ .Env.HOME }}/go/src\" ] }, \"check\": { \"read-data-subset\": \"{{ len (printf \"a%*s\" .Now.Weekday \"\") }}/7\" } } } This is obviously not a real world example, but it shows many of the possibilities you can do with variable expansion.\nTo check the generated configuration, you can use the resticprofile show command:\n% resticprofile -c examples/template.yaml -n src show global: default-command: snapshots restic-lock-retry-after: 1m0s restic-stale-lock-age: 2h0m0s min-memory: 100 send-timeout: 30s profile src: repository: /backup/Monday password-file: /Users/CP/go/src/resticprofile/examples/src-key initialize: true lock: /Users/CP/resticprofile-profile-src.lock backup: check-before: true run-before: echo Hello CP echo current dir: /Users/CP/go/src/resticprofile echo config dir: /Users/CP/go/src/resticprofile/examples echo profile started at 05 Sep 22 17:39 BST run-after: echo All Done! source: /Users/CP/go/src exclude: /**/.git exclude-caches: true tag: src dev retention: after-backup: true keep-within: 30d path: /Users/CP/go/src prune: true tag: src dev check: read-data-subset: 2/7 snapshots: tag: src dev As you can see, the src profile inherited from the generic profile. The tags {{ .Profile.Name }} got replaced by the name of the current profile src. Now you can reuse the same generic configuration in another profile.\nYou might have noticed the read-data-subset in the check section which will read a seventh of the data every day, meaning the whole repository data will be checked over a week. You can find more information about this trick.\nHand-made variables You can also define variables yourself. Hand-made variables starts with a $ (PHP anyone?) and get declared and assigned with the := operator (Pascal anyone?).\nInfo You can only use double quotes \" to declare the string, single quotes ' are not allowed. You can also use backticks to declare the string.\nHere’s an example:\n# declare and assign a value to the variable {{ $name := \"something\" }} profile: # put the content of the variable here tag: \"{{ $name }}\" Note Variables are only valid in the file they are declared in. They cannot be shared in files loaded via include.\nVariables can be redefined using the = operator. The new value will be used from the point of redefinition to the end of the file.\n# declare and assign a value to the variable {{ $name := \"something\" }} # reassign a new value to the variable {{ $name = \"something else\" }} Windows path inside a variable Windows path are using backslashes \\ and are interpreted as escape characters in the configuration file. To use a Windows path inside a variable, you have a few options:\nyou can escape the backslashes with another backslash. you can use forward slashes / instead of backslashes. Windows is able to use forward slashes in paths. you can use the backtick to declare the string instead of a double quote. For example:\n# double backslash {{ $path := \"C:\\\\Users\\\\CP\\\\Documents\" }} # forward slash {{ $path := \"C:/Users/CP/Documents\" }} # backticks {{ $path := `C:\\Users\\CP\\Documents` }} Example Here’s an example of a configuration on Linux where I use a variable $mountpoint set to a USB drive mount point:\n​ toml yaml hcl json version = \"1\" [global] priority = \"low\" {{ $mountpoint := \"/mnt/external\" }} [default] repository = \"local:{{ $mountpoint }}/backup\" password-file = \"key\" run-before = \"mount {{ $mountpoint }}\" run-after = \"umount {{ $mountpoint }}\" run-after-fail = \"umount {{ $mountpoint }}\" [default.backup] exclude-caches = true source = [ \"/etc\", \"/var/lib/libvirt\" ] check-after = true version: \"1\" global: priority: low {{ $mountpoint := \"/mnt/external\" }} default: repository: 'local:{{ $mountpoint }}/backup' password-file: key run-before: 'mount {{ $mountpoint }}' run-after: 'umount {{ $mountpoint }}' run-after-fail: 'umount {{ $mountpoint }}' backup: exclude-caches: true source: - /etc - /var/lib/libvirt check-after: true global { priority = \"low\" } {{ $mountpoint := \"/mnt/external\" }} default { repository = \"local:{{ $mountpoint }}/backup\" password-file = \"key\" run-before = \"mount {{ $mountpoint }}\" run-after = \"umount {{ $mountpoint }}\" run-after-fail = \"umount {{ $mountpoint }}\" backup { exclude-caches = true source = [ \"/etc\", \"/var/lib/libvirt\" ] check-after = true } } {{ $mountpoint := \"/mnt/external\" }} { \"version\": \"1\", \"global\": { \"priority\": \"low\" }, \"default\": { \"repository\": \"local:{{ $mountpoint }}/backup\", \"password-file\": \"key\", \"run-before\": \"mount {{ $mountpoint }}\", \"run-after\": \"umount {{ $mountpoint }}\", \"run-after-fail\": \"umount {{ $mountpoint }}\", \"backup\": { \"exclude-caches\": true, \"source\": [ \"/etc\", \"/var/lib/libvirt\" ], \"check-after\": true } } } Runtime variable expansion Variable expansion as described in the previous section using the {{ .Var }} syntax refers to template variables that are expanded prior to parsing the configuration file. This means they must be used carefully to create correct config markup, but they are also very flexible.\nThere is also unix style variable expansion using the ${variable} or $variable syntax on configuration values that expand after the config file was parsed. Values that take a file path or path expression and a few others support this expansion.\nIf not specified differently, these variables resolve to the corresponding environment variable or to an empty value if no such environment variable exists. Exceptions are mixins where $variable style is used for parametrisation and the profile config flag prometheus-push-job.\nExample Backup current dir ($PWD) but prevent backup of $HOME where the repository is located:\n​ toml yaml hcl json version = \"1\" [default] repository = \"local:${HOME}/backup\" password-file = \"${HOME}/backup.key\" [default.backup] source = \"$PWD\" exclude = [\"$HOME/**\", \".*\", \"~*\"] version: \"1\" default: repository: 'local:${HOME}/backup' password-file: '${HOME}/backup.key' backup: source: '$PWD' exclude: ['$HOME/**', '.*', '~*'] default { repository = \"local:${HOME}/backup\" password-file = \"${HOME}/backup.key\" backup { source = [ \"$PWD\" ] exclude = [ \"$HOME/**\", \".*\", \"~*\" ] } } { \"default\": { \"repository\": \"local:${HOME}/backup\", \"password-file\": \"${HOME}/backup.key\", \"backup\": { \"source\": [ \"$PWD\" ], \"exclude\": [ \"$HOME/**\", \".*\", \"~*\" ] } } } Tip Use $$ to escape a single $ in configuration values that support variable expansion. E.g. on Windows you might want to exclude $RECYCLE.BIN. Specify it as: exclude = [\"$$RECYCLE.BIN\"].",
    "description": "Variable expansion in configuration file You might want to reuse the same configuration (or bits of it) on different environments. One way of doing it is to create a generic configuration where specific bits can be replaced by a variable.\nThere are two kinds of variables: template variables: These variables are fixed once the full configuration file is loaded: includes are loaded, and inheritance is resolved. These variables are replaced by their value before the configuration is parsed. runtime variables: These variables are replaced by their value after the configuration is parsed. In other words: these variables are replaced by their value just before the command is executed. Template variables Pre-defined variables The syntax for using a pre-defined variable is:",
    "tags": [],
    "title": "Variables",
    "uri": "/configuration/variables/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Reference \u003e  Section Profile",
    "content": "Section profile.repair-packs This section configures restic command repair-packs available since 0.16.1 . Information on command and flags is copied from the restic manual pages.\nWARNING: The CLI for this command is experimental and will likely change in the future!\nThe “repair packs” command extracts intact blobs from the specified pack files, rebuilds the index to remove the damaged pack files and removes the pack files from the repository.\nFlags used by resticprofile only: Name Type Default Notes run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands send-after one or more nested SendMonitoringSection Send HTTP request(s) after a successful restic command send-after-fail one or more nested SendMonitoringSection Send HTTP request(s) after failed restic or shell commands send-before one or more nested SendMonitoringSection Send HTTP request(s) before a restic command send-finally one or more nested SendMonitoringSection Send HTTP request(s) always, after all other commands Tip Flags declared for the restic command line in section profile can be overridden in this section.",
    "description": "Section profile.repair-packs This section configures restic command repair-packs available since 0.16.1 . Information on command and flags is copied from the restic manual pages.\nWARNING: The CLI for this command is experimental and will likely change in the future!\nThe “repair packs” command extracts intact blobs from the specified pack files, rebuilds the index to remove the damaged pack files and removes the pack files from the repository.\nFlags used by resticprofile only: Name Type Default Notes run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands send-after one or more nested SendMonitoringSection Send HTTP request(s) after a successful restic command send-after-fail one or more nested SendMonitoringSection Send HTTP request(s) after failed restic or shell commands send-before one or more nested SendMonitoringSection Send HTTP request(s) before a restic command send-finally one or more nested SendMonitoringSection Send HTTP request(s) always, after all other commands Tip Flags declared for the restic command line in section profile can be overridden in this section.",
    "tags": [],
    "title": "repair-packs",
    "uri": "/reference/profile/repair-packs/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Reference \u003e  Section Profile",
    "content": "Section profile.repair-snapshots This section configures restic command repair-snapshots available since 0.16.0 . Information on command and flags is copied from the restic manual pages.\nThe “repair snapshots” command repairs broken snapshots. It scans the given snapshots and generates new ones with damaged directories and file contents removed. If the broken snapshots are deleted, a prune run will be able to clean up the repository.\nThe command depends on a correct index, thus make sure to run “repair index” first!\nFlags used by resticprofile only: Name Type Default Notes run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands send-after one or more nested SendMonitoringSection Send HTTP request(s) after a successful restic command send-after-fail one or more nested SendMonitoringSection Send HTTP request(s) after failed restic or shell commands send-before one or more nested SendMonitoringSection Send HTTP request(s) before a restic command send-finally one or more nested SendMonitoringSection Send HTTP request(s) always, after all other commands Flags passed to the restic command line: Name Type Default Notes dry-run true / false false do not do anything, just print what would be done. restic \u003e= 0.16.0 forget true / false false remove original snapshots after creating new ones. restic \u003e= 0.16.0 host true / false OR one or more hostnames only consider snapshots for this host (can be specified multiple times) (default: $RESTIC_HOST). Boolean true is replaced with the hostname of the system. Examples: true, false, \"host\" . restic \u003e= 0.16.0 path true / false OR one or more strings only consider snapshots including this (absolute) path (can be specified multiple times, snapshots must include all specified paths). Boolean true is replaced with the paths from section “backup”. Examples: true, false, \"path\" . restic \u003e= 0.16.0 tag true / false OR one or more strings only consider snapshots including tag[,tag,…]. Boolean true is replaced with the tags from section “backup”. Examples: true, false, \"tag\" . restic \u003e= 0.16.0 Tip Flags declared for the restic command line in section profile can be overridden in this section.",
    "description": "Section profile.repair-snapshots This section configures restic command repair-snapshots available since 0.16.0 . Information on command and flags is copied from the restic manual pages.\nThe “repair snapshots” command repairs broken snapshots. It scans the given snapshots and generates new ones with damaged directories and file contents removed. If the broken snapshots are deleted, a prune run will be able to clean up the repository.\nThe command depends on a correct index, thus make sure to run “repair index” first!",
    "tags": [],
    "title": "repair-snapshots",
    "uri": "/reference/profile/repair-snapshots/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Reference \u003e  Section Profile",
    "content": "Section profile.restore This section configures restic command restore . Information on command and flags is copied from the restic manual pages.\nThe “restore” command extracts the data from a snapshot from the repository to a directory.\nThe special snapshotID “latest” can be used to restore the latest snapshot in the repository.\nTo only restore a specific subfolder, you can use the “snapshotID:subfolder” syntax, where “subfolder” is a path within the snapshot.\nFlags used by resticprofile only: Name Type Default Notes run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands send-after one or more nested SendMonitoringSection Send HTTP request(s) after a successful restic command send-after-fail one or more nested SendMonitoringSection Send HTTP request(s) after failed restic or shell commands send-before one or more nested SendMonitoringSection Send HTTP request(s) before a restic command send-finally one or more nested SendMonitoringSection Send HTTP request(s) always, after all other commands Flags passed to the restic command line: Name Type Default Notes delete true / false false delete files from target directory if they do not exist in snapshot. Use ‘–dry-run -vv’ to check what would be deleted. restic \u003e= 0.17.0 dry-run true / false false do not write any data, just show what would be done. restic \u003e= 0.17.0 exclude one or more strings exclude a pattern exclude-file one or more strings read exclude patterns from a file. restic \u003e= 0.17.0 exclude-xattr one or more strings exclude xattr by pattern. restic \u003e= 0.18.0 host true / false OR one or more hostnames only consider snapshots for this host, when snapshot ID “latest” is given (can be specified multiple times) (default: $RESTIC_HOST). Boolean true is replaced with the hostname of the system. Examples: true, false, \"host\" iexclude one or more strings same as –exclude pattern but ignores the casing of filenames. restic \u003e= 0.10.0 iexclude-file one or more strings same as –exclude-file but ignores casing of filenames in patterns. restic \u003e= 0.17.0 iinclude one or more strings same as –include pattern but ignores the casing of filenames. restic \u003e= 0.10.0 iinclude-file one or more strings same as –include-file but ignores casing of filenames in patterns. restic \u003e= 0.17.0 include one or more strings include a pattern include-file one or more strings read include patterns from a file. restic \u003e= 0.17.0 include-xattr one or more strings include xattr by pattern. restic \u003e= 0.18.0 overwrite string always overwrite behavior, one of (always/if-changed/if-newer/never). restic \u003e= 0.17.0 path true / false OR one or more strings only consider snapshots including this (absolute) path, when snapshot ID “latest” is given (can be specified multiple times, snapshots must include all specified paths). Boolean true is replaced with the paths from section “backup”. Examples: true, false, \"path\" sparse true / false false restore files as sparse. restic \u003e= 0.15.0 tag true / false OR one or more strings only consider snapshots including tag[,tag,…], when snapshot ID “latest” is given. Boolean true is replaced with the tags from section “backup”. Examples: true, false, \"tag\" target string \"\" directory to extract data to verify true / false false verify restored files content Tip Flags declared for the restic command line in section profile can be overridden in this section.",
    "description": "Section profile.restore This section configures restic command restore . Information on command and flags is copied from the restic manual pages.\nThe “restore” command extracts the data from a snapshot from the repository to a directory.\nThe special snapshotID “latest” can be used to restore the latest snapshot in the repository.\nTo only restore a specific subfolder, you can use the “snapshotID:subfolder” syntax, where “subfolder” is a path within the snapshot.",
    "tags": [],
    "title": "restore",
    "uri": "/reference/profile/restore/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Reference",
    "content": "resticprofile provides a JSON schema for v1 \u0026 v2 configuration files. The schema may be used to validate configuration files in JSON format (and possibly others), see JSON schema for details.\nJSON schema URLs for any restic version:\nConfig V1: https://creativeprojects.github.io/resticprofile/jsonschema/config-1.json Config V2: https://creativeprojects.github.io/resticprofile/jsonschema/config-2.json JSON schema URLs for a specific restic version:\n.../config-1-restic-{MAJOR}-{MINOR}.json .../config-2-restic-{MAJOR}-{MINOR}.json Available URLs:\nhttps://creativeprojects.github.io/resticprofile/jsonschema/config-2-restic-0-18.json https://creativeprojects.github.io/resticprofile/jsonschema/config-1-restic-0-18.json https://creativeprojects.github.io/resticprofile/jsonschema/config-2-restic-0-17.json https://creativeprojects.github.io/resticprofile/jsonschema/config-1-restic-0-17.json https://creativeprojects.github.io/resticprofile/jsonschema/config-2-restic-0-16.json https://creativeprojects.github.io/resticprofile/jsonschema/config-1-restic-0-16.json https://creativeprojects.github.io/resticprofile/jsonschema/config-2-restic-0-16.json https://creativeprojects.github.io/resticprofile/jsonschema/config-1-restic-0-16.json https://creativeprojects.github.io/resticprofile/jsonschema/config-2-restic-0-16.json https://creativeprojects.github.io/resticprofile/jsonschema/config-1-restic-0-16.json https://creativeprojects.github.io/resticprofile/jsonschema/config-2-restic-0-15.json https://creativeprojects.github.io/resticprofile/jsonschema/config-1-restic-0-15.json https://creativeprojects.github.io/resticprofile/jsonschema/config-2-restic-0-14.json https://creativeprojects.github.io/resticprofile/jsonschema/config-1-restic-0-14.json https://creativeprojects.github.io/resticprofile/jsonschema/config-2-restic-0-13.json https://creativeprojects.github.io/resticprofile/jsonschema/config-1-restic-0-13.json https://creativeprojects.github.io/resticprofile/jsonschema/config-2-restic-0-12.json https://creativeprojects.github.io/resticprofile/jsonschema/config-1-restic-0-12.json https://creativeprojects.github.io/resticprofile/jsonschema/config-2-restic-0-11.json https://creativeprojects.github.io/resticprofile/jsonschema/config-1-restic-0-11.json https://creativeprojects.github.io/resticprofile/jsonschema/config-2-restic-0-10.json https://creativeprojects.github.io/resticprofile/jsonschema/config-1-restic-0-10.json https://creativeprojects.github.io/resticprofile/jsonschema/config-2-restic-0-9.json https://creativeprojects.github.io/resticprofile/jsonschema/config-1-restic-0-9.json",
    "description": "resticprofile provides a JSON schema for v1 \u0026 v2 configuration files. The schema may be used to validate configuration files in JSON format (and possibly others), see JSON schema for details.\nJSON schema URLs for any restic version:\nConfig V1: https://creativeprojects.github.io/resticprofile/jsonschema/config-1.json Config V2: https://creativeprojects.github.io/resticprofile/jsonschema/config-2.json JSON schema URLs for a specific restic version:\n.../config-1-restic-{MAJOR}-{MINOR}.json .../config-2-restic-{MAJOR}-{MINOR}.json Available URLs:\nhttps://creativeprojects.github.io/resticprofile/jsonschema/config-2-restic-0-18.json https://creativeprojects.github.io/resticprofile/jsonschema/config-1-restic-0-18.json https://creativeprojects.github.io/resticprofile/jsonschema/config-2-restic-0-17.json https://creativeprojects.github.io/resticprofile/jsonschema/config-1-restic-0-17.json https://creativeprojects.github.io/resticprofile/jsonschema/config-2-restic-0-16.json https://creativeprojects.github.io/resticprofile/jsonschema/config-1-restic-0-16.json https://creativeprojects.github.io/resticprofile/jsonschema/config-2-restic-0-16.json https://creativeprojects.github.io/resticprofile/jsonschema/config-1-restic-0-16.json https://creativeprojects.github.io/resticprofile/jsonschema/config-2-restic-0-16.json https://creativeprojects.github.io/resticprofile/jsonschema/config-1-restic-0-16.json https://creativeprojects.github.io/resticprofile/jsonschema/config-2-restic-0-15.json https://creativeprojects.github.io/resticprofile/jsonschema/config-1-restic-0-15.json https://creativeprojects.github.io/resticprofile/jsonschema/config-2-restic-0-14.json https://creativeprojects.github.io/resticprofile/jsonschema/config-1-restic-0-14.json https://creativeprojects.github.io/resticprofile/jsonschema/config-2-restic-0-13.json https://creativeprojects.github.io/resticprofile/jsonschema/config-1-restic-0-13.json https://creativeprojects.github.io/resticprofile/jsonschema/config-2-restic-0-12.json https://creativeprojects.github.io/resticprofile/jsonschema/config-1-restic-0-12.json https://creativeprojects.github.io/resticprofile/jsonschema/config-2-restic-0-11.json https://creativeprojects.github.io/resticprofile/jsonschema/config-1-restic-0-11.json https://creativeprojects.github.io/resticprofile/jsonschema/config-2-restic-0-10.json https://creativeprojects.github.io/resticprofile/jsonschema/config-1-restic-0-10.json https://creativeprojects.github.io/resticprofile/jsonschema/config-2-restic-0-9.json https://creativeprojects.github.io/resticprofile/jsonschema/config-1-restic-0-9.json",
    "tags": [],
    "title": "JSON Schema",
    "uri": "/reference/json-schema/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Reference \u003e  Section Profile",
    "content": "Section profile.retention This section configures restic command forget . Information on command and flags is copied from the restic manual pages.\nThe “forget” command removes snapshots according to a policy. All snapshots are first divided into groups according to “–group-by”, and after that the policy specified by the “–keep-” options is applied to each group individually. If there are not enough snapshots to keep one for each duration related “–keep-{within-,}” option, the oldest snapshot in the group is kept additionally.\nPlease note that this command really only deletes the snapshot object in the repository, which is a reference to data stored there. In order to remove the unreferenced data after “forget” was run successfully, see the “prune” command.\nPlease also read the documentation for “forget” to learn about some important security considerations.\nFlags used by resticprofile only: Name Type Default Notes after-backup true / false Apply retention after the backup command succeeded. Defaults to true in configuration format v2 if any “keep-*” flag is set and “before-backup” is unset before-backup true / false Apply retention before starting the backup command schedule one or more strings OR nested ScheduleConfig Configures the scheduled execution of this profile section. Can be times in systemd timer format or a config structure. Examples: hourly, daily, weekly, monthly, 10:00,14:00,18:00,22:00, Wed,Fri 17:48, *-*-15 02:45, Mon..Fri 00:30 schedule-after-network-online true / false Don’t start this schedule when the network is offline (supported in “systemd”) schedule-capture-environment one or more strings RESTIC_* Set names (or glob expressions) of environment variables to capture during schedule creation. The captured environment is applied prior to “profile.env” when running the schedule. Whether capturing is supported depends on the type of scheduler being used (supported in “systemd” and “launchd”) schedule-ignore-on-battery true / false false Don’t start this schedule when running on battery schedule-ignore-on-battery-less-than integer Don’t start this schedule when running on battery and the state of charge is less than this percentage. Examples: 20, 33, 50, 75 schedule-lock-mode string default Specify how locks are used when running on schedule - see schedules/configuration/. Is one of default, fail, ignore schedule-lock-wait integer OR duration Set the maximum time to wait for acquiring locks when running on schedule. Examples: 150s, 15m, 30m, 45m, 1h, 2h30m schedule-log string Redirect the output into a log file or to syslog when running on schedule. Examples: /resticprofile.log, syslog-tcp://syslog-server:514, syslog:server, syslog: schedule-permission string auto Specify whether the schedule runs with system or user privileges - see schedules/configuration/. Is one of auto, system, user, user_logged_on schedule-priority string standard Set the priority at which the schedule is run. Is one of background, standard Flags passed to the restic command line: Name Type Default Notes compact true / false false use compact output format dry-run true / false false do not delete anything, just print what would be done group-by string host,paths group snapshots by host, paths and/or tags, separated by comma (disable grouping with ‘’) host true / false OR one or more hostnames only consider snapshots for this host (can be specified multiple times) (default: $RESTIC_HOST). Boolean true is replaced with the hostname that applies in section “backup”. Defaults to true for config version 2 in “retention”. Examples: true, false, \"host\" keep-daily integer 0 keep the last n daily snapshots (use ‘unlimited’ to keep all daily snapshots) keep-hourly integer 0 keep the last n hourly snapshots (use ‘unlimited’ to keep all hourly snapshots) keep-last integer 0 keep the last n snapshots (use ‘unlimited’ to keep all snapshots) keep-monthly integer 0 keep the last n monthly snapshots (use ‘unlimited’ to keep all monthly snapshots) keep-tag one or more strings keep snapshots with this taglist keep-weekly integer 0 keep the last n weekly snapshots (use ‘unlimited’ to keep all weekly snapshots) keep-within string keep snapshots that are newer than duration (eg. 1y5m7d2h) relative to the latest snapshot keep-within-daily string keep daily snapshots that are newer than duration (eg. 1y5m7d2h) relative to the latest snapshot. restic \u003e= 0.13.0 keep-within-hourly string keep hourly snapshots that are newer than duration (eg. 1y5m7d2h) relative to the latest snapshot. restic \u003e= 0.13.0 keep-within-monthly string keep monthly snapshots that are newer than duration (eg. 1y5m7d2h) relative to the latest snapshot. restic \u003e= 0.13.0 keep-within-weekly string keep weekly snapshots that are newer than duration (eg. 1y5m7d2h) relative to the latest snapshot. restic \u003e= 0.13.0 keep-within-yearly string keep yearly snapshots that are newer than duration (eg. 1y5m7d2h) relative to the latest snapshot. restic \u003e= 0.13.0 keep-yearly integer 0 keep the last n yearly snapshots (use ‘unlimited’ to keep all yearly snapshots) max-repack-size string \"\" stop after repacking this much data in total (allowed suffixes for size: k/K, m/M, g/G, t/T). restic \u003e= 0.12.0 max-unused string \"5%\" tolerate given limit of unused data (absolute value in bytes with suffixes k/K, m/M, g/G, t/T, a value in % or the word ‘unlimited’). restic \u003e= 0.12.0 path true / false OR one or more strings only consider snapshots including this (absolute) path (can be specified multiple times, snapshots must include all specified paths). Boolean true is replaced with the paths from section “backup”. Defaults to true in “retention”. Examples: true, false, \"path\" prune true / false false automatically run the ‘prune’ command if snapshots have been removed repack-cacheable-only true / false false only repack packs which are cacheable. restic \u003e= 0.12.0 repack-small true / false false repack pack files below 80% of target pack size. restic \u003e= 0.14.0 repack-smaller-than string \"\" pack below-limit packfiles (allowed suffixes: k/K, m/M). restic \u003e= 0.18.0 repack-uncompressed true / false false repack all uncompressed data. restic \u003e= 0.14.0 tag true / false OR one or more strings only consider snapshots including tag[,tag,…]. Boolean true is replaced with the tags from section “backup”. Defaults to true for config version 2 in “retention”. Examples: true, false, \"tag\" unsafe-allow-remove-all true / false false allow deleting all snapshots of a snapshot group. restic \u003e= 0.17.0 Tip Flags declared for the restic command line in section profile can be overridden in this section.",
    "description": "Section profile.retention This section configures restic command forget . Information on command and flags is copied from the restic manual pages.\nThe “forget” command removes snapshots according to a policy. All snapshots are first divided into groups according to “–group-by”, and after that the policy specified by the “–keep-” options is applied to each group individually. If there are not enough snapshots to keep one for each duration related “–keep-{within-,}” option, the oldest snapshot in the group is kept additionally.",
    "tags": [],
    "title": "retention",
    "uri": "/reference/profile/retention/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Installation",
    "content": "Using resticprofile from a docker image You can run resticprofile in a Docker container, which is the easiest way to install and update resticprofile and restic simultaneously.\nHowever, you must mount your backup source (and local destination, if applicable) as a Docker volume. On macOS, backups may be slower due to the known performance issues with mounted volumes.\nRegistries The officiel image is available on docker hub\ndocker pull creativeprojects/resticprofile:latest as well as on Github Container Registry\ndocker pull ghcr.io/creativeprojects/resticprofile:latest Configuration By default, the resticprofile container starts at /resticprofile. So you can feed a configuration this way:\ndocker run -it --rm -v $PWD/examples:/resticprofile ghcr.io/creativeprojects/resticprofile You can list your profiles:\ndocker run -it --rm -v $PWD/examples:/resticprofile ghcr.io/creativeprojects/resticprofile profiles Container host name Each time a container starts, it is assigned a random name.\nTo set a specific hostname, use the -h or --hostname flag with docker run:\ndocker run -it --rm -v $PWD:/resticprofile -h my-hostname ghcr.io/creativeprojects/resticprofile -n profile backup Platforms The resticprofile docker image is available in these 2 platforms:\nlinux/amd64 linux/arm64/v8 (compatible with raspberry pi 64bits) rclone The resticprofile docker image also includes the latest version of rclone.\nContainer imager release cycle The Docker image is automatically uploaded to both registries when a new release is published on GitHub. The latest tag is updated to match the release.\nEach week, the latest image is rebuilt to include updates from Restic, Rclone, and the Alpine base image.\nAfter every commit to the main branch, another image is updated and tagged as nightly. This image may be unstable and is not recommended for production use.\nScheduling with docker compose There’s an example in the contribution section how to schedule backups in a long running container. The configuration needs to specify crond as a scheduler.\nSee contrib",
    "description": "Using resticprofile from a docker image You can run resticprofile in a Docker container, which is the easiest way to install and update resticprofile and restic simultaneously.\nHowever, you must mount your backup source (and local destination, if applicable) as a Docker volume. On macOS, backups may be slower due to the known performance issues with mounted volumes.\nRegistries The officiel image is available on docker hub\ndocker pull creativeprojects/resticprofile:latest as well as on Github Container Registry",
    "tags": [],
    "title": "Docker",
    "uri": "/installation/docker/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Schedules",
    "content": "Examples of scheduling commands under Windows Note If you create a task with user permission under Windows, you will need to enter your password to validate the task.\nIt’s a requirement of the task scheduler. I’m inviting you to review the code to make sure I’m not emailing your password to myself. Seriously you shouldn’t trust anyone.\nExample of the schedule command under Windows (with git bash):\n$ resticprofile -c examples/windows.yaml -n self schedule Analyzing backup schedule 1/2 ================================= Original form: Mon..Fri *:00,15,30,45 Normalized form: Mon..Fri *-*-* *:00,15,30,45:00 Next elapse: Wed Jul 22 21:30:00 BST 2020 (in UTC): Wed Jul 22 20:30:00 UTC 2020 From now: 1m52s left Analyzing backup schedule 2/2 ================================= Original form: Sat,Sun 0,12:00 Normalized form: Sat,Sun *-*-* 00,12:00:00 Next elapse: Sat Jul 25 00:00:00 BST 2020 (in UTC): Fri Jul 24 23:00:00 UTC 2020 From now: 50h31m52s left Creating task for user Creative Projects Task Scheduler requires your Windows password to validate the task: 2020/07/22 21:28:15 scheduled job self/backup created Analyzing retention schedule 1/1 ================================= Original form: sun 3:30 Normalized form: Sun *-*-* 03:30:00 Next elapse: Sun Jul 26 03:30:00 BST 2020 (in UTC): Sun Jul 26 02:30:00 UTC 2020 From now: 78h1m44s left 2020/07/22 21:28:22 scheduled job self/retention created To see the status of the triggers, you can use the status command:\n$ resticprofile -c examples/windows.yaml -n self status Analyzing backup schedule 1/2 ================================= Original form: Mon..Fri *:00,15,30,45 Normalized form: Mon..Fri *-*-* *:00,15,30,45:00 Next elapse: Wed Jul 22 21:30:00 BST 2020 (in UTC): Wed Jul 22 20:30:00 UTC 2020 From now: 14s left Analyzing backup schedule 2/2 ================================= Original form: Sat,Sun 0,12:* Normalized form: Sat,Sun *-*-* 00,12:*:00 Next elapse: Sat Jul 25 00:00:00 BST 2020 (in UTC): Fri Jul 24 23:00:00 UTC 2020 From now: 50h29m46s left Task: \\resticprofile backup\\self backup User: Creative Projects Working Dir: D:\\Source\\resticprofile Exec: D:\\Source\\resticprofile\\resticprofile.exe --no-ansi --config examples/windows.yaml --name self backup Enabled: true State: ready Missed runs: 0 Last Run Time: 2020-07-22 21:30:00 +0000 UTC Last Result: 0 Next Run Time: 2020-07-22 21:45:00 +0000 UTC Analyzing retention schedule 1/1 ================================= Original form: sun 3:30 Normalized form: Sun *-*-* 03:30:00 Next elapse: Sun Jul 26 03:30:00 BST 2020 (in UTC): Sun Jul 26 02:30:00 UTC 2020 From now: 77h59m46s left Task: \\resticprofile backup\\self retention User: Creative Projects Working Dir: D:\\Source\\resticprofile Exec: D:\\Source\\resticprofile\\resticprofile.exe --no-ansi --config examples/windows.yaml --name self forget Enabled: true State: ready Missed runs: 0 Last Run Time: 1999-11-30 00:00:00 +0000 UTC Last Result: 267011 Next Run Time: 2020-07-26 03:30:00 +0000 UTC To remove the schedule, use the unschedule command:\n$ resticprofile -c examples/windows.yaml -n self unschedule 2020/07/22 21:34:51 scheduled job self/backup removed 2020/07/22 21:34:51 scheduled job self/retention removed Examples of scheduling commands under Linux With this example of configuration for Linux:\n​ toml yaml hcl json version = \"1\" [default] password-file = \"key\" repository = \"/tmp/backup\" [test1] inherit = \"default\" [test1.backup] source = \"./\" schedule = \"*:00,15,30,45\" schedule-permission = \"user\" schedule-lock-wait = \"15m\" [test1.check] schedule = \"*-*-1\" schedule-permission = \"user\" schedule-lock-wait = \"15m\" version: \"1\" default: password-file: key repository: /tmp/backup test1: inherit: default backup: source: ./ schedule: \"*:00,15,30,45\" schedule-permission: user schedule-lock-wait: 15m check: schedule: \"*-*-1\" schedule-permission: user schedule-lock-wait: 15m \"default\" = { \"password-file\" = \"key\" \"repository\" = \"/tmp/backup\" } \"test1\" = { \"inherit\" = \"default\" \"backup\" = { \"source\" = \"./\" \"schedule\" = \"*:00,15,30,45\" \"schedule-permission\" = \"user\" \"schedule-lock-wait\" = \"15m\" } \"check\" = { \"schedule\" = \"*-*-1\" \"schedule-permission\" = \"user\" \"schedule-lock-wait\" = \"15m\" } } { \"version\": \"1\", \"default\": { \"password-file\": \"key\", \"repository\": \"/tmp/backup\" }, \"test1\": { \"inherit\": \"default\", \"backup\": { \"source\": \"./\", \"schedule\": \"*:00,15,30,45\", \"schedule-permission\": \"user\", \"schedule-lock-wait\": \"15m\" }, \"check\": { \"schedule\": \"*-*-1\", \"schedule-permission\": \"user\", \"schedule-lock-wait\": \"15m\" } } } $ resticprofile -c examples/linux.yaml -n test1 schedule Analyzing backup schedule 1/1 ================================= Original form: *:00,15,30,45 Normalized form: *-*-* *:00,15,30,45:00 Next elapse: Thu 2020-07-23 17:15:00 BST (in UTC): Thu 2020-07-23 16:15:00 UTC From now: 6min left 2020/07/23 17:08:51 writing /home/user/.config/systemd/user/resticprofile-backup@profile-test1.service 2020/07/23 17:08:51 writing /home/user/.config/systemd/user/resticprofile-backup@profile-test1.timer Created symlink /home/user/.config/systemd/user/timers.target.wants/resticprofile-backup@profile-test1.timer → /home/user/.config/systemd/user/resticprofile-backup@profile-test1.timer. 2020/07/23 17:08:51 scheduled job test1/backup created Analyzing check schedule 1/1 ================================= Original form: *-*-1 Normalized form: *-*-01 00:00:00 Next elapse: Sat 2020-08-01 00:00:00 BST (in UTC): Fri 2020-07-31 23:00:00 UTC From now: 1 weeks 1 days left 2020/07/23 17:08:51 writing /home/user/.config/systemd/user/resticprofile-check@profile-test1.service 2020/07/23 17:08:51 writing /home/user/.config/systemd/user/resticprofile-check@profile-test1.timer Created symlink /home/user/.config/systemd/user/timers.target.wants/resticprofile-check@profile-test1.timer → /home/user/.config/systemd/user/resticprofile-check@profile-test1.timer. 2020/07/23 17:08:51 scheduled job test1/check created The status command shows a combination of journalctl displaying errors (only) in the last month and systemctl status:\n$ resticprofile -c examples/linux.yaml -n test1 status Analyzing backup schedule 1/1 ================================= Original form: *:00,15,30,45 Normalized form: *-*-* *:00,15,30,45:00 Next elapse: Tue 2020-07-28 15:15:00 BST (in UTC): Tue 2020-07-28 14:15:00 UTC From now: 4min 44s left Recent log (\u003e= warning in the last month) ========================================== -- Logs begin at Wed 2020-06-17 11:09:19 BST, end at Tue 2020-07-28 15:10:10 BST. -- Jul 27 20:48:01 Desktop76 systemd[2986]: Failed to start resticprofile backup for profile test1 in examples/linux.yaml. Jul 27 21:00:55 Desktop76 systemd[2986]: Failed to start resticprofile backup for profile test1 in examples/linux.yaml. Jul 27 21:15:34 Desktop76 systemd[2986]: Failed to start resticprofile backup for profile test1 in examples/linux.yaml. Systemd timer status ===================== ● resticprofile-backup@profile-test1.timer - backup timer for profile test1 in examples/linux.yaml Loaded: loaded (/home/user/.config/systemd/user/resticprofile-backup@profile-test1.timer; enabled; vendor preset: enabled) Active: active (waiting) since Tue 2020-07-28 15:10:06 BST; 8s ago Trigger: Tue 2020-07-28 15:15:00 BST; 4min 44s left Jul 28 15:10:06 Desktop76 systemd[2951]: Started backup timer for profile test1 in examples/linux.yaml. Analyzing check schedule 1/1 ================================= Original form: *-*-1 Normalized form: *-*-01 00:00:00 Next elapse: Sat 2020-08-01 00:00:00 BST (in UTC): Fri 2020-07-31 23:00:00 UTC From now: 3 days left Recent log (\u003e= warning in the last month) ========================================== -- Logs begin at Wed 2020-06-17 11:09:19 BST, end at Tue 2020-07-28 15:10:10 BST. -- Jul 27 19:39:59 Desktop76 systemd[2986]: Failed to start resticprofile check for profile test1 in examples/linux.yaml. Systemd timer status ===================== ● resticprofile-check@profile-test1.timer - check timer for profile test1 in examples/linux.yaml Loaded: loaded (/home/user/.config/systemd/user/resticprofile-check@profile-test1.timer; enabled; vendor preset: enabled) Active: active (waiting) since Tue 2020-07-28 15:10:07 BST; 7s ago Trigger: Sat 2020-08-01 00:00:00 BST; 3 days left Jul 28 15:10:07 Desktop76 systemd[2951]: Started check timer for profile test1 in examples/linux.yaml. And unschedule:\n$ resticprofile -c examples/linux.yaml -n test1 unschedule Removed /home/user/.config/systemd/user/timers.target.wants/resticprofile-backup@profile-test1.timer. 2020/07/23 17:13:42 scheduled job test1/backup removed Removed /home/user/.config/systemd/user/timers.target.wants/resticprofile-check@profile-test1.timer. 2020/07/23 17:13:42 scheduled job test1/check removed Examples of scheduling commands under macOS Here’s an example of scheduling a backup profile named azure-dev:\n% resticprofile -n azure-dev schedule 2025/03/30 18:40:13 using configuration file: profiles.yaml Profile (or Group) azure-dev: backup schedule ============================================= Original form: 22:22 Normalized form: *-*-* 22:22:00 Next elapse: Sun Mar 30 22:22:00 BST 2025 (in UTC): Sun Mar 30 21:22:00 UTC 2025 From now: 3h41m46s left 2025/03/30 18:40:13 scheduled job azure-dev/backup created Info In some cases, macOS may request permission to access the network, an external volume (like a USB drive), or a protected directory. A message window will appear while the backup runs in the background.\nYou may want to start the task now so you can grant special permissions:\nRetrieve the task name using the status command: % resticprofile -n azure-dev status 2025/03/30 18:40:21 using configuration file: profiles.yaml Profile (or Group) azure-dev: backup schedule ============================================= Original form: *-*-* 22:22:00 Normalized form: *-*-* 22:22:00 Next elapse: Sun Mar 30 22:22:00 BST 2025 (in UTC): Sun Mar 30 21:22:00 UTC 2025 From now: 3h41m38s left service: local.resticprofile.azure-dev.backup permission: user program: /usr/local/bin/resticprofile working directory: /Users/cp/resticprofile stdout path: local.resticprofile.azure-dev.backup.log stderr path: local.resticprofile.azure-dev.backup.log state: not running runs (*): 0 last exit code (*): (never exited) * : since last (re)schedule or last reboot The name of the task can be seen on the line service: ...\nstart the task manually % launchctl start local.resticprofile.azure-dev.backup You can check the task is currently running:\n2025/03/30 18:42:07 using configuration file: profiles.yaml Profile (or Group) azure-dev: backup schedule ============================================= Original form: *-*-* 22:22:00 Normalized form: *-*-* 22:22:00 Next elapse: Sun Mar 30 22:22:00 BST 2025 (in UTC): Sun Mar 30 21:22:00 UTC 2025 From now: 3h39m52s left service: local.resticprofile.azure-dev.backup permission: user program: /usr/local/bin/resticprofile working directory: /Users/cp/resticprofile stdout path: local.resticprofile.azure-dev.backup.log stderr path: local.resticprofile.azure-dev.backup.log state: running runs (*): 1 last exit code (*): (never exited) * : since last (re)schedule or last reboot",
    "description": "Examples of scheduling commands under Windows Note If you create a task with user permission under Windows, you will need to enter your password to validate the task.\nIt’s a requirement of the task scheduler. I’m inviting you to review the code to make sure I’m not emailing your password to myself. Seriously you shouldn’t trust anyone.\nExample of the schedule command under Windows (with git bash):",
    "tags": [],
    "title": "Schedule Examples",
    "uri": "/schedules/examples/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Configuration file",
    "content": "Warnings from restic Until version 0.13.0, resticprofile was always considering a restic warning as an error. This will remain the default. But the version 0.13.0 introduced a parameter to avoid this behaviour and consider that the backup was successful instead.\nA restic warning occurs when it cannot read some files, but a snapshot was successfully created.\nno-error-on-warning ​ toml yaml hcl json version = \"1\" [profile] [profile.backup] no-error-on-warning = true version: \"1\" profile: backup: no-error-on-warning: true \"profile\" = { \"backup\" = { \"no-error-on-warning\" = true } } { \"version\": \"1\", \"profile\": { \"backup\": { \"no-error-on-warning\": true } } }",
    "description": "Warnings from restic Until version 0.13.0, resticprofile was always considering a restic warning as an error. This will remain the default. But the version 0.13.0 introduced a parameter to avoid this behaviour and consider that the backup was successful instead.\nA restic warning occurs when it cannot read some files, but a snapshot was successfully created.\nno-error-on-warning ​ toml yaml hcl json version = \"1\" [profile] [profile.backup] no-error-on-warning = true version: \"1\" profile: backup: no-error-on-warning: true \"profile\" = { \"backup\" = { \"no-error-on-warning\" = true } } { \"version\": \"1\", \"profile\": { \"backup\": { \"no-error-on-warning\": true } } }",
    "tags": [],
    "title": "Warnings",
    "uri": "/configuration/warnings/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Reference \u003e  Section Profile",
    "content": "Section profile.rewrite This section configures restic command rewrite available since 0.15.0 . Information on command and flags is copied from the restic manual pages.\nThe “rewrite” command excludes files from existing snapshots. It creates new snapshots containing the same data as the original ones, but without the files you specify to exclude. All metadata (time, host, tags) will be preserved.\nThe snapshots to rewrite are specified using the –host, –tag and –path options, or by providing a list of snapshot IDs. Please note that specifying neither any of these options nor a snapshot ID will cause the command to rewrite all snapshots.\nThe special tag ‘rewrite’ will be added to the new snapshots to distinguish them from the original ones, unless –forget is used. If the –forget option is used, the original snapshots will instead be directly removed from the repository.\nPlease note that the –forget option only removes the snapshots and not the actual data stored in the repository. In order to delete the no longer referenced data, use the “prune” command.\nWhen rewrite is used with the –snapshot-summary option, a new snapshot is created containing statistics summary data. Only two fields in the summary will be non-zero: TotalFilesProcessed and TotalBytesProcessed.\nWhen rewrite is called with one of the –exclude options, TotalFilesProcessed and TotalBytesProcessed will be updated in the snapshot summary.\nFlags used by resticprofile only: Name Type Default Notes run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands send-after one or more nested SendMonitoringSection Send HTTP request(s) after a successful restic command send-after-fail one or more nested SendMonitoringSection Send HTTP request(s) after failed restic or shell commands send-before one or more nested SendMonitoringSection Send HTTP request(s) before a restic command send-finally one or more nested SendMonitoringSection Send HTTP request(s) always, after all other commands Flags passed to the restic command line: Name Type Default Notes dry-run true / false false do not do anything, just print what would be done. restic \u003e= 0.15.0 exclude one or more strings exclude a pattern. restic \u003e= 0.15.0 exclude-file one or more strings read exclude patterns from a file. restic \u003e= 0.15.0 forget true / false false remove original snapshots after creating new ones. restic \u003e= 0.15.0 host true / false OR one or more hostnames only consider snapshots for this host (can be specified multiple times) (default: $RESTIC_HOST). Boolean true is replaced with the hostname of the system. Examples: true, false, \"host\" . restic \u003e= 0.15.0 iexclude one or more strings same as –exclude pattern but ignores the casing of filenames. restic \u003e= 0.15.0 iexclude-file one or more strings same as –exclude-file but ignores casing of filenames in patterns. restic \u003e= 0.15.0 new-host string \"\" replace hostname. restic \u003e= 0.17.0 new-time string \"\" replace time of the backup. restic \u003e= 0.17.0 path true / false OR one or more strings only consider snapshots including this (absolute) path (can be specified multiple times, snapshots must include all specified paths). Boolean true is replaced with the paths from section “backup”. Examples: true, false, \"path\" . restic \u003e= 0.15.0 snapshot-summary true / false false create snapshot summary record if it does not exist. restic \u003e= 0.18.0 tag true / false OR one or more strings only consider snapshots including tag[,tag,…]. Boolean true is replaced with the tags from section “backup”. Examples: true, false, \"tag\" . restic \u003e= 0.15.0 Tip Flags declared for the restic command line in section profile can be overridden in this section.",
    "description": "Section profile.rewrite This section configures restic command rewrite available since 0.15.0 . Information on command and flags is copied from the restic manual pages.\nThe “rewrite” command excludes files from existing snapshots. It creates new snapshots containing the same data as the original ones, but without the files you specify to exclude. All metadata (time, host, tags) will be preserved.\nThe snapshots to rewrite are specified using the –host, –tag and –path options, or by providing a list of snapshot IDs. Please note that specifying neither any of these options nor a snapshot ID will cause the command to rewrite all snapshots.",
    "tags": [],
    "title": "rewrite",
    "uri": "/reference/profile/rewrite/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Reference \u003e  Section Profile",
    "content": "Section profile.snapshots This section configures restic command snapshots . Information on command and flags is copied from the restic manual pages.\nThe “snapshots” command lists all snapshots stored in the repository.\nFlags used by resticprofile only: Name Type Default Notes run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands send-after one or more nested SendMonitoringSection Send HTTP request(s) after a successful restic command send-after-fail one or more nested SendMonitoringSection Send HTTP request(s) after failed restic or shell commands send-before one or more nested SendMonitoringSection Send HTTP request(s) before a restic command send-finally one or more nested SendMonitoringSection Send HTTP request(s) always, after all other commands Flags passed to the restic command line: Name Type Default Notes compact true / false false use compact output format group-by string group snapshots by host, paths and/or tags, separated by comma. restic \u003e= 0.10.0 host true / false OR one or more hostnames only consider snapshots for this host (can be specified multiple times) (default: $RESTIC_HOST). Boolean true is replaced with the hostname of the system. Examples: true, false, \"host\" last true / false false only show the last snapshot for each host and path. restic \u003c 0.13.0 latest integer 0 only show the last n snapshots for each host and path. restic \u003e= 0.13.0 path true / false OR one or more strings only consider snapshots including this (absolute) path (can be specified multiple times, snapshots must include all specified paths). Boolean true is replaced with the paths from section “backup”. Examples: true, false, \"path\" tag true / false OR one or more strings only consider snapshots including tag[,tag,…]. Boolean true is replaced with the tags from section “backup”. Examples: true, false, \"tag\" Tip Flags declared for the restic command line in section profile can be overridden in this section.",
    "description": "Section profile.snapshots This section configures restic command snapshots . Information on command and flags is copied from the restic manual pages.\nThe “snapshots” command lists all snapshots stored in the repository.\nFlags used by resticprofile only: Name Type Default Notes run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands send-after one or more nested SendMonitoringSection Send HTTP request(s) after a successful restic command send-after-fail one or more nested SendMonitoringSection Send HTTP request(s) after failed restic or shell commands send-before one or more nested SendMonitoringSection Send HTTP request(s) before a restic command send-finally one or more nested SendMonitoringSection Send HTTP request(s) always, after all other commands Flags passed to the restic command line: Name Type Default Notes compact true / false false use compact output format group-by string group snapshots by host, paths and/or tags, separated by comma. restic \u003e= 0.10.0 host true / false OR one or more hostnames only consider snapshots for this host (can be specified multiple times) (default: $RESTIC_HOST). Boolean true is replaced with the hostname of the system. Examples: true, false, \"host\" last true / false false only show the last snapshot for each host and path. restic \u003c 0.13.0 latest integer 0 only show the last n snapshots for each host and path. restic \u003e= 0.13.0 path true / false OR one or more strings only consider snapshots including this (absolute) path (can be specified multiple times, snapshots must include all specified paths). Boolean true is replaced with the paths from section “backup”. Examples: true, false, \"path\" tag true / false OR one or more strings only consider snapshots including tag[,tag,…]. Boolean true is replaced with the tags from section “backup”. Examples: true, false, \"tag\" Tip Flags declared for the restic command line in section profile can be overridden in this section.",
    "tags": [],
    "title": "snapshots",
    "uri": "/reference/profile/snapshots/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Reference \u003e  Section Profile",
    "content": "Section profile.stats This section configures restic command stats . Information on command and flags is copied from the restic manual pages.\nThe “stats” command walks one or multiple snapshots in a repository and accumulates statistics about the data stored therein. It reports on the number of unique files and their sizes, according to one of the counting modes as given by the –mode flag.\nIt operates on all snapshots matching the selection criteria or all snapshots if nothing is specified. The special snapshot ID “latest” is also supported. Some modes make more sense over just a single snapshot, while others are useful across all snapshots, depending on what you are trying to calculate.\nThe modes are:\nrestore-size: (default) Counts the size of the restored files. files-by-contents: Counts total size of unique files, where a file is considered unique if it has unique contents. raw-data: Counts the size of blobs in the repository, regardless of how many files reference them. blobs-per-file: A combination of files-by-contents and raw-data. Refer to the online manual for more details about each mode.\nFlags used by resticprofile only: Name Type Default Notes run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands send-after one or more nested SendMonitoringSection Send HTTP request(s) after a successful restic command send-after-fail one or more nested SendMonitoringSection Send HTTP request(s) after failed restic or shell commands send-before one or more nested SendMonitoringSection Send HTTP request(s) before a restic command send-finally one or more nested SendMonitoringSection Send HTTP request(s) always, after all other commands Flags passed to the restic command line: Name Type Default Notes host true / false OR one or more hostnames only consider snapshots for this host (can be specified multiple times) (default: $RESTIC_HOST). Boolean true is replaced with the hostname of the system. Examples: true, false, \"host\" mode string \"restore-size\" counting mode: restore-size (default), files-by-contents, blobs-per-file or raw-data path true / false OR one or more strings only consider snapshots including this (absolute) path (can be specified multiple times, snapshots must include all specified paths). Boolean true is replaced with the paths from section “backup”. Examples: true, false, \"path\" . restic \u003e= 0.10.0 tag true / false OR one or more strings only consider snapshots including tag[,tag,…]. Boolean true is replaced with the tags from section “backup”. Examples: true, false, \"tag\" . restic \u003e= 0.10.0 Tip Flags declared for the restic command line in section profile can be overridden in this section.",
    "description": "Section profile.stats This section configures restic command stats . Information on command and flags is copied from the restic manual pages.\nThe “stats” command walks one or multiple snapshots in a repository and accumulates statistics about the data stored therein. It reports on the number of unique files and their sizes, according to one of the counting modes as given by the –mode flag.\nIt operates on all snapshots matching the selection criteria or all snapshots if nothing is specified. The special snapshot ID “latest” is also supported. Some modes make more sense over just a single snapshot, while others are useful across all snapshots, depending on what you are trying to calculate.",
    "tags": [],
    "title": "stats",
    "uri": "/reference/profile/stats/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Reference \u003e  Section Profile",
    "content": "Section profile.tag This section configures restic command tag . Information on command and flags is copied from the restic manual pages.\nThe “tag” command allows you to modify tags on exiting snapshots.\nYou can either set/replace the entire set of tags on a snapshot, or add tags to/remove tags from the existing set.\nWhen no snapshot-ID is given, all snapshots matching the host, tag and path filter criteria are modified.\nFlags used by resticprofile only: Name Type Default Notes run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands send-after one or more nested SendMonitoringSection Send HTTP request(s) after a successful restic command send-after-fail one or more nested SendMonitoringSection Send HTTP request(s) after failed restic or shell commands send-before one or more nested SendMonitoringSection Send HTTP request(s) before a restic command send-finally one or more nested SendMonitoringSection Send HTTP request(s) always, after all other commands Flags passed to the restic command line: Name Type Default Notes add one or more strings tags which will be added to the existing tags in the format tag[,tag,…] host true / false OR one or more hostnames only consider snapshots for this host (can be specified multiple times) (default: $RESTIC_HOST). Boolean true is replaced with the hostname of the system. Examples: true, false, \"host\" path true / false OR one or more strings only consider snapshots including this (absolute) path (can be specified multiple times, snapshots must include all specified paths). Boolean true is replaced with the paths from section “backup”. Examples: true, false, \"path\" remove one or more strings tags which will be removed from the existing tags in the format tag[,tag,…] set one or more strings tags which will replace the existing tags in the format tag[,tag,…] tag true / false OR one or more strings only consider snapshots including tag[,tag,…]. Boolean true is replaced with the tags from section “backup”. Examples: true, false, \"tag\" Tip Flags declared for the restic command line in section profile can be overridden in this section.",
    "description": "Section profile.tag This section configures restic command tag . Information on command and flags is copied from the restic manual pages.\nThe “tag” command allows you to modify tags on exiting snapshots.\nYou can either set/replace the entire set of tags on a snapshot, or add tags to/remove tags from the existing set.\nWhen no snapshot-ID is given, all snapshots matching the host, tag and path filter criteria are modified.\nFlags used by resticprofile only: Name Type Default Notes run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands send-after one or more nested SendMonitoringSection Send HTTP request(s) after a successful restic command send-after-fail one or more nested SendMonitoringSection Send HTTP request(s) after failed restic or shell commands send-before one or more nested SendMonitoringSection Send HTTP request(s) before a restic command send-finally one or more nested SendMonitoringSection Send HTTP request(s) always, after all other commands Flags passed to the restic command line: Name Type Default Notes add one or more strings tags which will be added to the existing tags in the format tag[,tag,…] host true / false OR one or more hostnames only consider snapshots for this host (can be specified multiple times) (default: $RESTIC_HOST). Boolean true is replaced with the hostname of the system. Examples: true, false, \"host\" path true / false OR one or more strings only consider snapshots including this (absolute) path (can be specified multiple times, snapshots must include all specified paths). Boolean true is replaced with the paths from section “backup”. Examples: true, false, \"path\" remove one or more strings tags which will be removed from the existing tags in the format tag[,tag,…] set one or more strings tags which will replace the existing tags in the format tag[,tag,…] tag true / false OR one or more strings only consider snapshots including tag[,tag,…]. Boolean true is replaced with the tags from section “backup”. Examples: true, false, \"tag\" Tip Flags declared for the restic command line in section profile can be overridden in this section.",
    "tags": [],
    "title": "tag",
    "uri": "/reference/profile/tag/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Reference \u003e  Section Profile",
    "content": "Section profile.unlock This section configures restic command unlock . Information on command and flags is copied from the restic manual pages.\nThe “unlock” command removes stale locks that have been created by other restic processes.\nFlags used by resticprofile only: Name Type Default Notes run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands send-after one or more nested SendMonitoringSection Send HTTP request(s) after a successful restic command send-after-fail one or more nested SendMonitoringSection Send HTTP request(s) after failed restic or shell commands send-before one or more nested SendMonitoringSection Send HTTP request(s) before a restic command send-finally one or more nested SendMonitoringSection Send HTTP request(s) always, after all other commands Flags passed to the restic command line: Name Type Default Notes remove-all true / false false remove all locks, even non-stale ones Tip Flags declared for the restic command line in section profile can be overridden in this section.",
    "description": "Section profile.unlock This section configures restic command unlock . Information on command and flags is copied from the restic manual pages.\nThe “unlock” command removes stale locks that have been created by other restic processes.\nFlags used by resticprofile only: Name Type Default Notes run-after one or more strings Run shell command(s) after a successful restic command run-after-fail one or more strings Run shell command(s) after failed restic or shell commands run-before one or more strings Run shell command(s) before a restic command run-finally one or more strings Run shell command(s) always, after all other commands send-after one or more nested SendMonitoringSection Send HTTP request(s) after a successful restic command send-after-fail one or more nested SendMonitoringSection Send HTTP request(s) after failed restic or shell commands send-before one or more nested SendMonitoringSection Send HTTP request(s) before a restic command send-finally one or more nested SendMonitoringSection Send HTTP request(s) always, after all other commands Flags passed to the restic command line: Name Type Default Notes remove-all true / false false remove all locks, even non-stale ones Tip Flags declared for the restic command line in section profile can be overridden in this section.",
    "tags": [],
    "title": "unlock",
    "uri": "/reference/profile/unlock/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Configuration file",
    "content": "By default, restic is running with the default priority. It means it will get equal share of the resources with other processes.\nYou can lower the priority of restic to avoid slowing down other processes. This is especially useful when you run restic on a production server.\nNice You can use these values for the priority parameter, string or numeric values are both valid:\nString value “nice” equivalent on unixes Notes Idle 19 Background 1 15 This mode is NOT recommended on Windows 11 1 Low 10 Normal 0 Default priority when unspecified High -10 Highest -20 IO Nice This setting is only available on Linux. It allows you to set the disks IO priority of restic.\nInfo This setting is only affecting access to local disks. It has no effect on any network access.\nMore information about ionice “class” and “level” can be found here.\nExamples ​ toml yaml hcl version = \"1\" [global] # priority is using priority class on windows, and \"nice\" on unixes priority = \"low\" # ionice is available on Linux only ionice = true ionice-class = 2 ionice-level = 6 version: \"1\" global: # priority is using priority class on windows, and \"nice\" on unixes priority: low # ionice is available on Linux only ionice: true ionice-class: 2 ionice-level: 6 global { # priority is using priority class on windows, and \"nice\" on unixes priority = \"low\" # ionice is available on Linux only ionice = true ionice-class = 2 ionice-level = 6 } Warnings In some cases (mostly before version v0.27.0), resticprofile won’t be able to set the priority of restic.\nA warning message like this will be displayed:\ncannot set process group priority, restic will run with the default priority: operation not permitted This either means:\nresticprofile is running inside docker you are using a tight security linux distribution which is launching every process inside a new container resticprofile is running in WSL you’re running an older version of resticprofile (\u003c v0.27.0) It seems that the implementation of the background mode is broken in Windows 11. Even though undocumented, it is widely reported that the process has a limit of 32MB of memory. Please use Idle or Low on Windows 11. ↩︎ ↩︎",
    "description": "By default, restic is running with the default priority. It means it will get equal share of the resources with other processes.\nYou can lower the priority of restic to avoid slowing down other processes. This is especially useful when you run restic on a production server.\nNice You can use these values for the priority parameter, string or numeric values are both valid:\nString value “nice” equivalent on unixes Notes Idle 19 Background 1 15 This mode is NOT recommended on Windows 11 1 Low 10 Normal 0 Default priority when unspecified High -10 Highest -20 IO Nice This setting is only available on Linux. It allows you to set the disks IO priority of restic.",
    "tags": [],
    "title": "Priority",
    "uri": "/configuration/priority/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Configuration file",
    "content": "This feature is available for:\nmacOS Windows Linux with systemd (logind) There’s a global parameter called prevent-sleep that you can set to true, and resticprofile will prevent your system from idle sleeping.\nPlease note:\nit will not prevent a sleep if the system is running on batteries it will not prevent a sleep triggered by a user action: using the sleep button, closing the laptop lid, etc.",
    "description": "This feature is available for:\nmacOS Windows Linux with systemd (logind) There’s a global parameter called prevent-sleep that you can set to true, and resticprofile will prevent your system from idle sleeping.\nPlease note:\nit will not prevent a sleep if the system is running on batteries it will not prevent a sleep triggered by a user action: using the sleep button, closing the laptop lid, etc.",
    "tags": [],
    "title": "Preventing system sleep",
    "uri": "/configuration/sleep/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Configuration file",
    "content": "By default resticprofile will display all logs (from itself and restic) to the console.\nYou can redirect the logs to a local file, a temporary file or a syslog server.\nDestination The log destination syntax is a such:\n- redirects all the logs to the console / stdout (is the default log destination) filename redirects all the logs to the local file called filename temp:filename redirects all the logs to a temporary file available during the whole session, and deleted afterwards. syslog:, syslog://syslog_server[:514] or syslog-tcp://syslog_server[:514] redirects all the logs to a local or remote syslog server. Alternative configurations for remote servers are: udp://syslog_server:514 \u0026 tcp://syslog_server:514. Note Logging to syslog is not available on Windows.\nTip If the location cannot be opened, resticprofile will default to send the logs to the console.\nDefault You can adjust the default log destination in the global section:\n​ toml yaml hcl json version = \"1\" [global] log = \"resticprofile.log\" [global.schedule-defaults] log = \"scheduled-resticprofile.log\" version: \"1\" global: log: \"resticprofile.log\" schedule-defaults: log: \"scheduled-resticprofile.log\" \"global\" { \"log\" = \"resticprofile.log\" \"schedule-defaults\" { \"log\" = \"scheduled-resticprofile.log\" } } { \"version\": \"1\", \"global\": { \"log\": \"resticprofile.log\", \"schedule-defaults\": { \"log\": \"scheduled-resticprofile.log\" } } } Command line You can redirect the logs on the command line with the --log flag:\nresticprofile --log backup.log backup On a schedule You can keep the logs displayed on the console when you run resticprofile commands manually, but send the logs somewhere else when resticprofile is started from a schedule.\n​ toml yaml hcl json version = \"1\" [profile] [profile.backup] schedule = \"*:00,30\" schedule-priority = \"background\" schedule-log = \"profile-backup.log\" version: \"1\" profile: backup: schedule: '*:00,30' schedule-priority: background schedule-log: profile-backup.log \"profile\" \"backup\" { \"schedule\" = \"*:00,30\" \"schedule-priority\" = \"background\" \"schedule-log\" = \"profile-backup.log\" } { \"version\": \"1\", \"profile\": { \"backup\": { \"schedule\": \"*:00,30\", \"schedule-priority\": \"background\", \"schedule-log\": \"profile-backup.log\" } } } Priority on the log targets If specified in different places, here’s the priority order for the log destination:\n--log flag on the command line schedule-log in the profile section log in the global section default to the console Send logs to a temporary file This can be done by using the template function tempFile.\nThis is to cover a special case when you want to upload the logs one by one to a remote location in a run-finally or a run-after-fail target.\n​ toml yaml hcl json version = \"1\" [backup_current] [backup_current.backup] verbose = true no-error-on-warning = true source = \"{{ .CurrentDir }}\" schedule = \"*:44\" schedule-log = '{{ tempFile \"backup.log\" }}' run-finally = 'cp {{ tempFile \"backup.log\" }} /logs/backup{{ .Now.Format \"2006-01-02T15-04-05\" }}.log' version: \"1\" backup_current: backup: verbose: true no-error-on-warning: true source: \"{{ .CurrentDir }}\" schedule: - \"*:44\" schedule-log: '{{ tempFile \"backup.log\" }}' run-finally: 'cp {{ tempFile \"backup.log\" }} /logs/backup{{ .Now.Format \"2006-01-02T15-04-05\" }}.log' \"profile\" \"backup\" { \"verbose\" = true \"no-error-on-warning\" = true \"source\" = \"{{ .CurrentDir }}\" \"schedule\" = \"*:44\" \"schedule-log\" = \"{{ tempFile \"backup.log\" }}\" \"run-finally\" = \"cp {{ tempFile \"backup.log\" }} /logs/backup{{ .Now.Format \"2006-01-02T15-04-05\" }}.log\" } { \"version\": \"1\", \"profile\": { \"backup\": { \"verbose\": true, \"no-error-on-warning\": true, \"source\": \"{{ .CurrentDir }}\", \"schedule\": \"*:44\", \"schedule-log\": \"{{ tempFile \"backup.log\" }}\", \"run-finally\": \"cp {{ tempFile \"backup.log\" }} /logs/backup{{ .Now.Format \"2006-01-02T15-04-05\" }}.log\" } } }",
    "description": "By default resticprofile will display all logs (from itself and restic) to the console.\nYou can redirect the logs to a local file, a temporary file or a syslog server.\nDestination The log destination syntax is a such:\n- redirects all the logs to the console / stdout (is the default log destination) filename redirects all the logs to the local file called filename temp:filename redirects all the logs to a temporary file available during the whole session, and deleted afterwards. syslog:, syslog://syslog_server[:514] or syslog-tcp://syslog_server[:514] redirects all the logs to a local or remote syslog server. Alternative configurations for remote servers are: udp://syslog_server:514 \u0026 tcp://syslog_server:514. Note Logging to syslog is not available on Windows.",
    "tags": [],
    "title": "Logs",
    "uri": "/configuration/logs/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Configuration file",
    "content": "JSON, YAML and TOML configuration files can benefit from a JSON schema that describes the config structure depending on the selected restic and configuration file version.\nSchema URL https://creativeprojects.github.io/resticprofile/jsonschema/config.json\nThis schema detects config and restic version and redirects to the corresponding versioned URL. Detection requires full support for JSON Schema Draft 7. Use a versioned URL where not supported (e.g. TOML).\nUsage (vscode) To use a schema with vscode, begin your config files with:\n​ toml yaml json #:schema https://creativeprojects.github.io/resticprofile/jsonschema/config-2.json version = \"2\" # yaml-language-server: $schema=https://creativeprojects.github.io/resticprofile/jsonschema/config.json version: \"2\" { \"$schema\": \"https://creativeprojects.github.io/resticprofile/jsonschema/config.json\", \"version\": \"2\" } Info YAML \u0026 TOML validation with JSON schema is not supported out of the box. Additional extensions are required, such as ‘redhat.vscode-yaml’ for YAML and ’tamasfe.even-better-toml’ for TOML in Visual Studio Code.\nExample\nExtension: redhat.vscode-yaml\nVersioned URLs The following versioned schemas are referenced from config.json. Which URL is selected depends on config and restic version. You may use the URLs directly if you need a self-contained schema file or to enforce a certain version of configuration format and/or restic flags\nJSON schema URLs for any restic version:\nConfig V1: https://creativeprojects.github.io/resticprofile/jsonschema/config-1.json Config V2: https://creativeprojects.github.io/resticprofile/jsonschema/config-2.json These universal schemas contain all flags and commands of all known restic versions and may allow to set flags that are not supported by a particular restic version. Descriptions and deprecation markers indicate what is supported and what should no longer be used.\nJSON schema URLs for a specific restic version (list of available URLs):\n.../config-1-restic-{MAJOR}-{MINOR}.json .../config-2-restic-{MAJOR}-{MINOR}.json These schemas contain only flags and commands of a specific restic version. The schema will validate a config only when flags are used that the selected restic version supports according to its manual pages.\nTip As an alternative to URLs, schemas can be generated locally with: resticprofile generate --json-schema [--version RESTIC_VERSION] [global|v1|v2]",
    "description": "JSON, YAML and TOML configuration files can benefit from a JSON schema that describes the config structure depending on the selected restic and configuration file version.\nSchema URL https://creativeprojects.github.io/resticprofile/jsonschema/config.json\nThis schema detects config and restic version and redirects to the corresponding versioned URL. Detection requires full support for JSON Schema Draft 7. Use a versioned URL where not supported (e.g. TOML).\nUsage (vscode) To use a schema with vscode, begin your config files with:",
    "tags": [],
    "title": "JSON schema",
    "uri": "/configuration/jsonschema/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Configuration file",
    "content": "Note The configuration file format v2 is in preview right now. You can try to use it since v0.17.0 but it’s for testing and feedback only.\nIntroduction The current file format was decided at the time resticprofile was only using the toml format. Nesting pieces of configuration in blocks is not the easiest as you have to specify the whole path in the block:\n[profile] [profile.backup] source = \"some path\" Since then, I believe the yaml format is preferred over toml.\nMy proposal is to make a “version 2” of the configuration file, the current file format is “version 1”.\nBoth formats will continue to be valid:\nif no version is specified, the “version 1” is used. This is the current format if a version is specified (2) the new format will be expected New format availability The new format “version 2” will be available for:\nTOML YAML JSON It won’t be available for HCL. This may not be definitive, but it’s not widely used and it’s becoming more and more difficult to support HCL.\nHCL can still be used as is, “version = 1”\nNew format specifications I will show the specification using the yaml as examples, because it’s probably the most readable format.\nversion version: 2 global The global section does not change. We’ll keep all the global configuration in there.\nglobal: default-command: snapshots initialize: false priority: low profiles All your profiles will be nested under a profiles section. Please note the schedules are no longer described inside the profile, but in a separate section schedules (see the following example).\nversion: \"2\" profiles: default: env: tmp: /tmp password-file: key repository: /backup documents: inherit: default backup: source: ~/Documents snapshots: tag: - documents groups The list of profiles will be nested under a profiles section, so we can add more configuration to groups later.\nversion: \"2\" groups: full: # name of your group profiles: - root - documents - mysql This format leaves more space for improvements later (like a repos section maybe?)\nTip You can participate in designing the “version 2” here",
    "description": "Note The configuration file format v2 is in preview right now. You can try to use it since v0.17.0 but it’s for testing and feedback only.\nIntroduction The current file format was decided at the time resticprofile was only using the toml format. Nesting pieces of configuration in blocks is not the easiest as you have to specify the whole path in the block:",
    "tags": [],
    "title": "Configuration v2 proposal",
    "uri": "/configuration/v2/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Installation",
    "content": "Shell command line completions are provided for bash and zsh.\nTo load the command completions in shell, use:\n# bash eval \"$(resticprofile generate --bash-completion)\" # zsh eval \"$(resticprofile generate --zsh-completion)\" To install them permanently:\nresticprofile generate --bash-completion \u003e /etc/bash_completion.d/resticprofile chmod +x /etc/bash_completion.d/resticprofile",
    "description": "Shell command line completions are provided for bash and zsh.\nTo load the command completions in shell, use:\n# bash eval \"$(resticprofile generate --bash-completion)\" # zsh eval \"$(resticprofile generate --zsh-completion)\" To install them permanently:\nresticprofile generate --bash-completion \u003e /etc/bash_completion.d/resticprofile chmod +x /etc/bash_completion.d/resticprofile",
    "tags": [],
    "title": "Shell Completion",
    "uri": "/installation/shell/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Schedules",
    "content": "systemd is a common service manager used by many Linux distributions. resticprofile can create systemd timer and service files.\nUser systemd units are created under the user’s systemd profile (~/.config/systemd/user).\nSystem units are created in /etc/systemd/system.\nsystemd calendars resticprofile uses the systemd OnCalendar format to schedule events.\nTest systemd calendars with systemd-analyze. It will display the next trigger time:\nsystemd-analyze calendar 'daily' Original form: daily Normalized form: *-*-* 00:00:00 Next elapse: Sat 2020-04-18 00:00:00 CDT (in UTC): Sat 2020-04-18 05:00:00 UTC From now: 10h left First time schedule When you schedule a profile with the schedule command, resticprofile will:\nCreate the unit file (type notify) Create the timer file Run systemctl daemon-reload (if schedule-permission is set to system) Run systemctl enable Run systemctl start Priority and CPU scheduling resticprofile allows you to set the nice value, CPU scheduling policy, and IO nice values for the systemd service. This works properly for resticprofile \u003e= 0.29.0.\nsystemd unit option resticprofile option CPUSchedulingPolicy Set to idle if priority is background, otherwise defaults to standard policy Nice nice from global section IOSchedulingClass ionice-class from global section IOSchedulingPriority ionice-level from global section Note When setting CPUSchedulingPolicy to idle (by setting priority to background), the backup might never execute if all your CPU cores are always busy.\nPermission Until version v0.30.0, the user permission was actually user_logged_on unless you activated lingering for the user.\nThis is now fixed:\nPermission Type of unit Without lingering With lingering system system service can run any time can run any time user system service with User= field defined can run any time can run any time user_logged_on user service runs only when user is logged on can run any time Run after the network is up Setting the profile option schedule-after-network-online: true ensures scheduled services wait for a network connection before running. This is achieved with an After=network-online.target entry in the service.\nsystemd drop-in files You can automatically populate *.conf.d drop-in files for profiles, allowing easy overrides of generated services without modifying service templates. For example:\n​ toml yaml hcl json version = \"1\" [root] systemd-drop-in-files = [\"99-drop-in-example.conf\"] [root.backup] schedule = \"hourly\" schedule-permission = \"system\" schedule-lock-wait = \"45m\" schedule-after-network-online = true --- version: 1 root: systemd-drop-in-files: - \"99-drop-in-example.conf\" backup: schedule: hourly schedule-permission: system schedule-lock-wait: 45m schedule-after-network-online: true \"version\" = \"1\" \"root\" = { \"systemd-drop-in-files\" = [\"99-drop-in-example.conf\"] \"backup\" = { \"schedule\" = \"hourly\" \"schedule-permission\" = \"system\" \"schedule-lock-wait\" = \"45m\" \"schedule-after-network-online\" = true } } { \"version\": \"1\", \"root\": { \"systemd-drop-in-files\": [\"99-drop-in-example.conf\"], \"backup\": { \"schedule\": \"hourly\", \"schedule-permission\": \"system\", \"schedule-lock-wait\": \"45m\", \"schedule-after-network-online\": true } } } Where 99-drop-in-example.conf is in the same directory as profiles.toml and with the contents\n[Service] Environment=RCLONE_CONFIG=%d/rclone.conf SetCredentialEncrypted=restic-repo-password: \\ Whxqht+dQJax1aZeCGLxmiAAAAABAAAADAAAABAAAABl6ctIWEqgRC4yHbgAAAAA8umMn \\ +6KYd8tAL58jUmtf/5wckDcxQSeuo+xd9OzN5XG7QW0iBIRRGCuWvvuAAiHEAKSk9MR8p \\ EDSaSm SetCredentialEncrypted=rclone.conf: \\ Whxqht+dQJax1aZeCGLxmiAAAAABAAAADAAAABAAAAC+vNhJYedv5QmyDHYAAAAAimeli \\ +Oo+URGN47SUBf7Jm1n3gdu22+Sd/eL7CjzpYQvHAMOCY8xz9hp9kW9/DstWHTfdsHJo7 \\ thOpk4IbSSazCPwEr39VVQONLxzpRlY22LkQKLoGAVD4Yifk+U5aJJ4FlRW/VGpPoef2S \\ rGvQzqQI7kNX+v7EPXj4B0tSUeBBJJCEu4mgajZNAhwHtbw== Generated with the following. See systemd credentials docs for more details. This allows using a TPM-backed encrypted password outside the resticprofile config.\nsystemd-ask-password -n | sudo systemd-creds encrypt --name=restic-repo-password -p - - sudo systemd-creds encrypt --name=rclone.conf -p - - \u003c\u003cEOF [restic-example] type = smb host = example user = restic pass = $(systemd-ask-password -n \"smb restic user password\" | rclone obscure -) EOF How to change the default systemd unit and timer file using a template By default, resticprofile automatically generates a systemd unit and timer.\nYou can create custom templates to add features (e.g., sending an email on failure).\nThe format is a Go template. Specify your custom unit and/or timer file in the global section of the configuration to apply it to all profiles:\n​ toml yaml hcl json [global] systemd-unit-template = \"service.tmpl\" systemd-timer-template = \"timer.tmpl\" --- global: systemd-unit-template: service.tmpl systemd-timer-template: timer.tmpl \"global\" = { \"systemd-unit-template\" = \"service.tmpl\" \"systemd-timer-template\" = \"timer.tmpl\" } { \"global\": { \"systemd-unit-template\": \"service.tmpl\", \"systemd-timer-template\": \"timer.tmpl\" } } Here are the defaults if you don’t specify your own. I recommend using them as a starting point for your templates.\nDefault unit file [Unit] Description={{ .JobDescription }} {{ if .AfterNetworkOnline }}After=network-online.target {{ end }} [Service] Type=notify WorkingDirectory={{ .WorkingDirectory }} ExecStart={{ .CommandLine }} {{ if .Nice }}Nice={{ .Nice }} {{ end -}} {{ if .CPUSchedulingPolicy }}CPUSchedulingPolicy={{ .CPUSchedulingPolicy }} {{ end -}} {{ if .IOSchedulingClass }}IOSchedulingClass={{ .IOSchedulingClass }} {{ end -}} {{ if .IOSchedulingPriority }}IOSchedulingPriority={{ .IOSchedulingPriority }} {{ end -}} {{ range .Environment -}} Environment=\"{{ . }}\" {{ end -}} Default timer file [Unit] Description={{ .TimerDescription }} [Timer] {{ range .OnCalendar -}} OnCalendar={{ . }} {{ end -}} Unit={{ .SystemdProfile }} Persistent=true [Install] WantedBy=timers.target Template variables These are available for both the unit and timer templates:\nJobDescription string TimerDescription string WorkingDirectory string CommandLine string OnCalendar array of strings SystemdProfile string Nice integer Environment array of strings",
    "description": "systemd is a common service manager used by many Linux distributions. resticprofile can create systemd timer and service files.\nUser systemd units are created under the user’s systemd profile (~/.config/systemd/user).\nSystem units are created in /etc/systemd/system.\nsystemd calendars resticprofile uses the systemd OnCalendar format to schedule events.\nTest systemd calendars with systemd-analyze. It will display the next trigger time:\nsystemd-analyze calendar 'daily' Original form: daily Normalized form: *-*-* 00:00:00 Next elapse: Sat 2020-04-18 00:00:00 CDT (in UTC): Sat 2020-04-18 05:00:00 UTC From now: 10h left First time schedule When you schedule a profile with the schedule command, resticprofile will:",
    "tags": [],
    "title": "Systemd",
    "uri": "/schedules/systemd/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Schedules",
    "content": "launchd is the service manager on macOS. resticprofile can schedule a profile using the launchctl tool.\nUser permission A user agent is generated when you set schedule-permission to user or user_logged_on. It consists of a plist file in ~/Library/LaunchAgents.\nIf you include specific files in your backup (like contacts or calendar) or if you’re connecting to an external restic repository, you may need to grant more permissions to resticprofile and restic (a popup window will ask for permission).\nYou can wait for the profile to start or start it manually. To start a backup profile called remote manually, use:\n/bin/launchctl start local.resticprofile.remote.backup Once you grant permission, the profile will run normally until you update resticprofile or restic. This is a macOS limitation.\nSystem permission A launchd daemon is generated when you set schedule-permission to system. It consists of a plist file in /Library/LaunchDaemons.\nRun resticprofile with sudo to schedule and unschedule the profile. You can schedule and unschedule system and user profiles simultaneously using the schedule --all command.",
    "description": "launchd is the service manager on macOS. resticprofile can schedule a profile using the launchctl tool.\nUser permission A user agent is generated when you set schedule-permission to user or user_logged_on. It consists of a plist file in ~/Library/LaunchAgents.\nIf you include specific files in your backup (like contacts or calendar) or if you’re connecting to an external restic repository, you may need to grant more permissions to resticprofile and restic (a popup window will ask for permission).",
    "tags": [],
    "title": "Launchd on macOS",
    "uri": "/schedules/launchd/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Schedules",
    "content": "Minimum version supported Windows 10 is the minimum version supported for scheduling.\nElevated mode If your schedule profile has the permission set to system, resticprofile needs to run in elevated mode to set up the schedules.\nGenerally, you don’t need to worry about this: resticprofile will restart itself in elevated mode. You’ll see a popup window asking for elevated privileges.\nresticprofile is blocked from restarting in elevated mode I can’t prevent this without buying a developer certificate. If you know any free or cheap certificate for open-source software, please let me know.\nSolution You’ll need to start an elevated shell yourself.\nRight-click on Command Prompt, Windows Terminal, or Windows Powershell (choose your favorite) Click on Run as administrator It’s easy to spot a terminal window opened with Administrator privileges:\nImportant Running the schedule command might cause Windows to delete resticprofile.exe, treating it as a threat.",
    "description": "Minimum version supported Windows 10 is the minimum version supported for scheduling.\nElevated mode If your schedule profile has the permission set to system, resticprofile needs to run in elevated mode to set up the schedules.\nGenerally, you don’t need to worry about this: resticprofile will restart itself in elevated mode. You’ll see a popup window asking for elevated privileges.\nresticprofile is blocked from restarting in elevated mode",
    "tags": [],
    "title": "Windows Task Scheduler",
    "uri": "/schedules/task_scheduler/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Schedules",
    "content": "On non-Windows OS, use a crond-compatible scheduler if specified in global/scheduler:\nWindows No Longer Supported Crond support on Windows has been removed due to significant issues in previous versions.\n​ toml yaml hcl json [global] scheduler = \"crond\" --- global: scheduler: crond \"global\" = { \"scheduler\" = \"crond\" } { \"global\": { \"scheduler\": \"crond\" } } This configuration uses the default crontab tool shipped with crond.\nYou can specify the location of the crontab tool:\n​ toml yaml hcl json [global] scheduler = \"crond:/usr/bin/crontab\" --- global: scheduler: crond:/usr/bin/crontab \"global\" = { \"scheduler\" = \"crond:/usr/bin/crontab\" } { \"global\": { \"scheduler\": \"crond:/usr/bin/crontab\" } } Crontab You can use a crontab file directly instead of the crontab tool:\ncrontab:*:filepath: Use a crontab file filepath with a user field filled in automatically crontab:username:filepath: Use a crontab file filepath with a user field always set to username crontab:-:filepath: Use a crontab file filepath without a user field With user field ​ toml yaml hcl json [global] scheduler = \"crontab:*:/etc/cron.d/resticprofile\" --- global: scheduler: \"crontab:*:/etc/cron.d/resticprofile\" \"global\" = { \"scheduler\" = \"crontab:*:/etc/cron.d/resticprofile\" } { \"global\": { \"scheduler\": \"crontab:*:/etc/cron.d/resticprofile\" } } Without a user field ​ toml yaml hcl json [global] scheduler = \"crontab:-:/var/spool/cron/crontabs/username\" --- global: scheduler: \"crontab:-:/var/spool/cron/crontabs/username\" \"global\" = { \"scheduler\" = \"crontab:-:/var/spool/cron/crontabs/username\" } { \"global\": { \"scheduler\": \"crontab:-:/var/spool/cron/crontabs/username\" } }",
    "description": "On non-Windows OS, use a crond-compatible scheduler if specified in global/scheduler:\nWindows No Longer Supported Crond support on Windows has been removed due to significant issues in previous versions.\n​ toml yaml hcl json [global] scheduler = \"crond\" --- global: scheduler: crond \"global\" = { \"scheduler\" = \"crond\" } { \"global\": { \"scheduler\": \"crond\" } } This configuration uses the default crontab tool shipped with crond.",
    "tags": [],
    "title": "Cron \u0026 compatible",
    "uri": "/schedules/cron/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Schedules",
    "content": "You can schedule your backups with resticprofile by running crond inside a container.\nThis configuration uses supercronic to run scheduled backups as a non-root user.\nYou can create a container with this modified version from the official image:\nFROM alpine:latest LABEL org.opencontainers.image.documentation=\"https://creativeprojects.github.io/resticprofile/\" LABEL org.opencontainers.image.source=\"https://github.com/creativeprojects/resticprofile\" ARG ARCH=amd64 ENV TZ=Etc/UTC COPY build/restic-${ARCH} /usr/bin/restic COPY build/rclone-${ARCH} /usr/bin/rclone COPY resticprofile /usr/bin/resticprofile RUN apk add --no-cache openssh-client-default curl tzdata ca-certificates supercronic \u0026\u0026 \\ chmod +x /usr/bin/restic /usr/bin/rclone /usr/bin/resticprofile \u0026\u0026 \\ adduser -D -h /resticprofile resticprofile \u0026\u0026 \\ mkdir -p /resticprofile \u0026\u0026 \\ touch /resticprofile/crontab \u0026\u0026 \\ chown -R resticprofile:resticprofile /resticprofile VOLUME /resticprofile WORKDIR /resticprofile ENTRYPOINT [\"resticprofile\"] CMD [\"--help\"] Here’s a docker-compose example loading configuration from a .env file:\nversion: '2' services: scheduled-backup: image: creativeprojects/resticprofile:${RP_VERSION:-latest} container_name: backup_container hostname: backup_container user: resticprofile:resticprofile entrypoint: '/bin/sh' command: - '-c' - 'resticprofile schedule --all \u0026\u0026 supercronic /resticprofile/crontab' volumes: - '${RP_CONFIG}:/resticprofile/profiles.yaml:ro' - '${RP_KEYFILE}:/resticprofile/key:ro' - '${BACKUP_SOURCE}:/source:ro' - '${RP_REPOSITORY}:/restic_repo' environment: - TZ=${TIMEZONE:-Etc/UTC} with the corresponding resticprofile configuration running a backup every 15 minutes:\nglobal: scheduler: crontab:-:/resticprofile/crontab default: password-file: key repository: \"local:/restic_repo\" initialize: true backup: source: /source exclude-caches: true one-file-system: true schedule: \"*:00,05,10,15,20,25,30,35,40,45,50,55\" schedule-permission: user check-before: true More information Discussion on Supercronic\nDiscussion on non-root container",
    "description": "You can schedule your backups with resticprofile by running crond inside a container.\nThis configuration uses supercronic to run scheduled backups as a non-root user.\nYou can create a container with this modified version from the official image:\nFROM alpine:latest LABEL org.opencontainers.image.documentation=\"https://creativeprojects.github.io/resticprofile/\" LABEL org.opencontainers.image.source=\"https://github.com/creativeprojects/resticprofile\" ARG ARCH=amd64 ENV TZ=Etc/UTC COPY build/restic-${ARCH} /usr/bin/restic COPY build/rclone-${ARCH} /usr/bin/rclone COPY resticprofile /usr/bin/resticprofile RUN apk add --no-cache openssh-client-default curl tzdata ca-certificates supercronic \u0026\u0026 \\ chmod +x /usr/bin/restic /usr/bin/rclone /usr/bin/resticprofile \u0026\u0026 \\ adduser -D -h /resticprofile resticprofile \u0026\u0026 \\ mkdir -p /resticprofile \u0026\u0026 \\ touch /resticprofile/crontab \u0026\u0026 \\ chown -R resticprofile:resticprofile /resticprofile VOLUME /resticprofile WORKDIR /resticprofile ENTRYPOINT [\"resticprofile\"] CMD [\"--help\"] Here’s a docker-compose example loading configuration from a .env file:",
    "tags": [],
    "title": "User schedule in container",
    "uri": "/schedules/non-root-schedule-in-container/index.html"
  },
  {
    "breadcrumb": "",
    "content": "Configuration profiles manager for restic backup\nresticprofile bridges the gap between a configuration file and restic backup. Although creating a configuration file for restic has been discussed, it remains a low priority.\nWith resticprofile:\nNo need to remember command parameters and environment variables Create multiple profiles in one configuration file Profiles can inherit options from other profiles Run the forget command before or after a backup (in a section called retention) Check a repository before or after a backup Create groups of profiles to run sequentially Run shell commands before or after running a profile, useful for mounting and unmounting backup disks Run a shell command if an error occurs Send a backup stream via stdin Start restic at different priorities (Priority Class in Windows, nice in Unix, and/or ionice in Linux) Check for enough memory before starting a backup Generate cryptographically secure random keys for a restic key file Easily schedule backups, retentions, and checks (supports systemd, crond, launchd, and Windows Task Scheduler) Generate a simple status file for monitoring software to ensure backups are running smoothly Use template syntax in your configuration file Automatically clear stale locks Export a prometheus file after a backup or send the report to a push gateway Run shell commands in the background when non-fatal errors are detected Send messages to HTTP hooks before, after a successful or failed job (backup, forget, check, prune, copy) Automatically initialize the secondary repository using the copy-chunker-params flag Send resticprofile logs to a syslog server Prevent the system from idle sleeping View help for both restic and resticprofile via the help command or -h flag Avoid scheduling a job when the system is on battery [new for v0.29.0] Schedule a group of profiles (configuration v2 only) The configuration file supports various formats:\nTOML: files with extensions .toml and .conf (for compatibility with versions before 0.6.0) JSON: files with extension .json YAML: files with extension .yaml HCL: files with extension .hcl",
    "description": "Configuration profiles manager for restic backup",
    "tags": [],
    "title": "resticprofile",
    "uri": "/index.html"
  },
  {
    "breadcrumb": "resticprofile",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Categories",
    "uri": "/categories/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Tags",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Tag :: Healthchecks.io",
    "uri": "/tags/healthchecks.io/index.html"
  },
  {
    "breadcrumb": "resticprofile \u003e  Tags",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Tag :: Monitoring",
    "uri": "/tags/monitoring/index.html"
  },
  {
    "breadcrumb": "resticprofile",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Tags",
    "uri": "/tags/index.html"
  }
]
