[
  {
    "content": "Here’s a simple configuration file using a Microsoft Azure backend:\ntoml yaml hcl  [default]  repository = \"azure:restic:/\"  password-file = \"key\"  option = \"azure.connections=3\"   [default.env]  AZURE_ACCOUNT_NAME = \"my_storage_account\"  AZURE_ACCOUNT_KEY = \"my_super_secret_key\"   [default.backup]  exclude-file = \"excludes\"  exclude-caches = true  one-file-system = true  tag = [ \"root\" ]  source = [ \"/\", \"/var\" ]   default:  repository: \"azure:restic:/\"  password-file: \"key\"  option: \"azure.connections=3\"   env:  AZURE_ACCOUNT_NAME: \"my_storage_account\"  AZURE_ACCOUNT_KEY: \"my_super_secret_key\"   backup:  exclude-file: \"excludes\"  exclude-caches: true  one-file-system: true  tag:  - \"root\"  source:  - \"/\"  - \"/var\"    default {  repository = \"azure:restic:/\"  password-file = \"key\"  options = \"azure.connections=3\"   env {  AZURE_ACCOUNT_NAME = \"my_storage_account\"  AZURE_ACCOUNT_KEY = \"my_super_secret_key\"  }   backup = {  exclude-file = \"excludes\"  exclude-caches = true  one-file-system = true  tag = [ \"root\" ]  source = [ \"/\", \"/var\" ]  } }     Configuration with inheritance Here’s a more complex configuration file showing profile inheritance and two backup profiles using the same repository:\ntoml yaml hcl  [global]  # ionice is available on Linux only  ionice = false  ionice-class = 2  ionice-level = 6  # priority is using priority class on windows, and \"nice\" on unixes - it's acting on CPU usage only  priority = \"low\"  # run 'snapshots' when no command is specified when invoking resticprofile  default-command = \"snapshots\"  # initialize a repository if none exist at location  initialize = false  # resticprofile won't start a profile if there's less than 100MB of RAM available  min-memory = 100  # a group is a profile that will call all profiles one by one [groups]  # when starting a backup on profile \"full-backup\", it will run the \"root\" and \"src\" backup profiles  full-backup = [ \"root\", \"src\" ]  # Default profile when not specified (-n or --name) # Please note there's no default inheritance from the 'default' profile (you can use the 'inherit' flag if needed) [default]  # you can use a relative path, it will be relative to the configuration file  repository = \"/backup\"  password-file = \"key\"  initialize = false  # will run these scripts before and after each command (including 'backup')  run-before = \"mount /backup\"  run-after = \"umount /backup\"  # if a restic command fails, the run-after won't be running  # add this parameter to run the script in case of a failure  run-after-fail = \"umount /backup\"   [default.env]  TMPDIR= \"/tmp\"  [no-cache]  inherit = \"default\"  no-cache = true  initialize = false  # New profile named 'root' [root]  inherit = \"default\"  initialize = true  # this will add a LOCAL lockfile so you cannot run the same profile more than once at a time  # (it's totally independent of the restic locks on the repository)  lock = \"/tmp/resticprofile-root.lock\"  force-inactive-lock = false   # 'backup' command of profile 'root'  [root.backup]  # files with no path are relative to the configuration file  exclude-file = [ \"root-excludes\", \"excludes\" ]  exclude-caches = true  one-file-system = false  tag = [ \"test\", \"dev\" ]  source = [ \"/\" ]  # if scheduled, will run every day at midnight  schedule = \"daily\"  schedule-permission = \"system\"  schedule-lock-wait = \"2h\"  # run this after a backup to share a repository between a user and root (via sudo)  run-after = \"chown -R $SUDO_USER $HOME/.cache/restic /backup\"  # ignore restic warnings (otherwise the backup is considered failed when restic couldn't read some files)  no-error-on-warning = true   # retention policy for profile root  [root.retention]  before-backup = false  after-backup = true  keep-last = 3  keep-hourly = 1  keep-daily = 1  keep-weekly = 1  keep-monthly = 1  keep-yearly = 1  keep-within = \"3h\"  keep-tag = [ \"forever\" ]  compact = false  prune = false  # path can be a boolean ('true' meaning to copy source paths from 'backup')   # or a path or list of paths to use instead. Default is `true` if not specified.  #path = []  # tag can be a boolean ('true' meaning to copy tag set from 'backup')   # or a custom set of tags. Default is 'false', meaning that tags are NOT used.  tag = true  # host can be a boolean ('true' meaning current hostname) or a string to specify a different hostname  host = true  # New profile named 'src' [src]  inherit = \"default\"  initialize = true   # 'backup' command of profile 'src'  [src.backup]  exclude = [ '/**/.git' ]  exclude-caches = true  one-file-system = false  tag = [ \"test\", \"dev\" ]  source = [ \"./src\" ]  check-before = true  # will only run these scripts before and after a backup  run-before = [ \"echo Starting!\", \"ls -al ./src\" ]  run-after = \"sync\"  # if scheduled, will run every 30 minutes  schedule = \"*:0,30\"  schedule-permission = \"user\"  schedule-lock-wait = \"10m\"   # retention policy for profile src  [src.retention]  before-backup = false  after-backup = true  keep-within = \"30d\"  compact = false  prune = true   # check command of profile src  [src.check]  read-data = true  # if scheduled, will check the repository the first day of each month at 3am  schedule = \"*-*-01 03:00\"   global:  default-command: snapshots  initialize: false  priority: low  groups:  full-backup:  - root  - src  default:  env:  tmp: /tmp  password-file: key  repository: /backup  documents:  backup:  source: ~/Documents  repository: ~/backup  snapshots:  tag:  - documents  root:  backup:  exclude-caches: true  exclude-file:  - root-excludes  - excludes  one-file-system: false  source:  - /  tag:  - test  - dev  inherit: default  initialize: true  retention:  after-backup: true  before-backup: false  compact: false  host: true  keep-daily: 1  keep-hourly: 1  keep-last: 3  keep-monthly: 1  keep-tag:  - forever  keep-weekly: 1  keep-within: 3h  keep-yearly: 1  prune: false  tag:  - test  - dev  self:  backup:  source: ./  repository: ../backup  snapshots:  tag:  - self  src:  lock: \"/tmp/resticprofile-profile-src.lock\"  force-inactive-lock: false  backup:  check-before: true  exclude:  - /**/.git  exclude-caches: true  one-file-system: false  run-after: echo All Done!  run-before:  - echo Starting!  - ls -al ~/go  source:  - ~/go  tag:  - test  - dev  inherit: default  initialize: true  retention:  after-backup: true  before-backup: false  compact: false  keep-within: 30d  prune: true  snapshots:  tag:  - test  - dev   global {  priority = \"low\"  ionice = true  ionice-class = 2  ionice-level = 6# don't start if the memory available is \u003c 1000MB  min-memory = 1000 }  groups {  all = [\"src\", \"self\"] }  default {  repository = \"/tmp/backup\"  password-file = \"key\"  run-before = \"echo Profile started!\"  run-after = \"echo Profile finished!\"  run-after-fail = \"echo An error occurred!\" }   src {  inherit = \"default\"  initialize = true  lock = \"/tmp/backup/resticprofile-profile-src.lock\"  force-inactive-lock = false   snapshots = {  tag = [ \"test\", \"dev\" ]  }   backup = {  run-before = [ \"echo Starting!\", \"ls -al ~/go/src\" ]  run-after = \"echo All Done!\"  exclude = [ \"/**/.git\" ]  exclude-caches = true  tag = [ \"test\", \"dev\" ]  source = [ \"~/go/src\" ]  check-before = true  }   retention = {  before-backup = false  after-backup = true  keep-last = 3  compact = false  prune = true  }   check = {  check-unused = true  with-cache = false  } }  self {  inherit = \"default\"  initialize = false   snapshots = {  tag = [ \"self\" ]  }   backup = {  source = \"./\"  tag = [ \"self\" ]  } }     Configuration example for Windows [global]  restic-binary = \"c:\\\\ProgramData\\\\chocolatey\\\\bin\\\\restic.exe\"  # Default profile when not specified on the command line # Please note there's no default inheritance from the 'default' profile (you can use the 'inherit' flag if needed) [default]  repository = \"local:r:/\"  password-file = \"key\"  initialize = false  # New profile named 'test' [test]  inherit = \"default\"  initialize = true   # 'backup' command of profile 'test'  [test.backup]  tag = [ \"windows\" ]  source = [ \"c:\\\\\" ]  check-after = true  run-before = \"dir /l\"  run-after = \"echo All Done!\"  # ignore restic warnings (otherwise the backup is considered failed when restic couldn't read some files)  no-error-on-warning = true Use stdin in configuration Simple example sending a file via stdin\ntoml yaml hcl   [stdin]  repository = \"local:/backup/restic\"  password-file = \"key\"   [stdin.backup]  stdin = true  stdin-filename = \"stdin-test\"  tag = [ 'stdin' ]  [mysql]  inherit = \"stdin\"   [mysql.backup]  stdin-command = [ 'mysqldump --all-databases --order-by-primary' ]  stdin-filename = \"dump.sql\"  tag = [ 'mysql' ]    stdin:  repository: \"local:/backup/restic\"  password-file: key  backup:  stdin: true  stdin-filename: stdin-test  tag:  - stdin  mysql:  inherit: stdin  backup:  stdin-command: \"mysqldump --all-databases --order-by-primary\"  stdin-filename: \"dump.sql\"  tag:  - mysql   # sending stream through stdin stdin = {  repository = \"local:/backup/restic\"  password-file = \"key\"   backup = {  stdin = true  stdin-filename = \"stdin-test\"  tag = [ \"stdin\" ]  } }  mysql = {  inherit = \"stdin\"   backup = {  stdin-command = [ \"mysqldump --all-databases --order-by-primary\" ]  stdin-filename = \"dump.sql\"  tag = [ \"mysql\" ]  } }     Special case for the copy command section The copy command needs two repository (and quite likely 2 different set of keys). You can configure a copy section like this:\ntoml yaml hcl  [default]  initialize = false  repository = \"/backup/original\"  password-file = \"key\"   [default.copy]  initialize = true  repository = \"/backup/copy\"  password-file = \"other_key\"   default:  initialize: false  repository: \"/backup/original\"  password-file: key  copy:  initialize: true  repository: \"/backup/copy\"  password-file: other_key    default {  initialize = false  repository = \"/backup/original\"  password-file = \"key\"   copy = {  initialize = true  repository = \"/backup/copy\"  password-file = \"other_key\"  } }     You will note that the secondary repository doesn’t need to have a 2 behind its flags (repository2, password-file2, etc.). It’s because the flags are well separated in the configuration.\n",
    "description": "",
    "tags": null,
    "title": "Examples",
    "uri": "/configuration/examples/"
  },
  {
    "content": "Installation Linux mac OS X Windows Ansible Source Upgrade Docker Shell Completion  ",
    "description": "",
    "tags": null,
    "title": "Installation",
    "uri": "/installation/"
  },
  {
    "content": "Configuration format  A configuration is a set of profiles. Each profile is in its own [section]. Inside each profile, you can specify different flags for each command. A command definition is [section.command].  All the restic flags can be defined in a section. For most of them you just need to remove the two dashes in front.\nTo set the flag --password-file password.txt you need to add a line like\npassword-file = \"password.txt\" There’s one exception: the flag --repo is named repository in the configuration\nLet’s say you normally use this command:\nrestic --repo \"local:/backup\" --password-file \"password.txt\" --verbose backup /home For resticprofile to generate this command automatically for you, here’s the configuration file:\ntoml yaml hcl  [default] repository = \"local:/backup\" password-file = \"password.txt\"  [default.backup] verbose = true source = [ \"/home\" ]   --- default:  repository: \"local:/backup\"  password-file: \"password.txt\"   backup:  verbose: true  source:  - \"/home\"    default {  repository = \"local:/backup\"  password-file = \"password.txt\"   backup = {  verbose = true  source = [ \"/home\" ]  } }     You may have noticed the source flag is accepting an array of values (inside brackets in TOML, list of values in YAML)\nNow, assuming this configuration file is named profiles.conf in the current folder, you can simply run\nresticprofile backup Path resolution in configuration All files path in the configuration are resolved from the configuration path. The big exception being source in backup section where it’s resolved from the current path where you started resticprofile.\n",
    "description": "",
    "tags": null,
    "title": "Configuration",
    "uri": "/configuration/"
  },
  {
    "content": "The default name for the configuration file is profiles, without an extension. You can change the name and its path with the --config or -c option on the command line. You can set a specific extension -c profiles.conf to load a TOML format file. If you set a filename with no extension instead, resticprofile will load the first file it finds with any of these extensions:\n .conf (toml format) .yaml .toml .json .hcl  macOS X resticprofile will search for your configuration file in these folders:\n current directory ~/Library/Preferences/resticprofile/ /Library/Preferences/resticprofile/ /usr/local/etc/ /usr/local/etc/restic/ /usr/local/etc/resticprofile/ /etc/ /etc/restic/ /etc/resticprofile/ /opt/local/etc/ /opt/local/etc/restic/ /opt/local/etc/resticprofile/ ~/ ($HOME directory)  Other unixes (Linux and BSD) resticprofile will search for your configuration file in these folders:\n current directory ~/.config/resticprofile/ /etc/xdg/resticprofile/ /usr/local/etc/ /usr/local/etc/restic/ /usr/local/etc/resticprofile/ /etc/ /etc/restic/ /etc/resticprofile/ /opt/local/etc/ /opt/local/etc/restic/ /opt/local/etc/resticprofile/ ~/ ($HOME directory)  Windows resticprofile will search for your configuration file in these folders:\n current directory %USERPROFILE%\\AppData\\Local\\ c:\\ProgramData\\ c:\\restic\\ c:\\resticprofile\\ %USERPROFILE%\\  ",
    "description": "",
    "tags": null,
    "title": "Path",
    "uri": "/configuration/path/"
  },
  {
    "content": "Installation via a script Here’s a simple script to download the binary automatically. It works on mac OS X, FreeBSD and Linux:\n$ curl -sfL https://raw.githubusercontent.com/creativeprojects/resticprofile/master/install.sh | sh It should copy resticprofile in a bin directory under your current directory.\nIf you need more control, you can save the shell script and run it manually:\n$ curl -LO https://raw.githubusercontent.com/creativeprojects/resticprofile/master/install.sh $ chmod +x install.sh $ sudo ./install.sh -b /usr/local/bin It will install resticprofile in /usr/local/bin/\nInstallation with homebrew for Linux There’s a Linux homebrew tap for resticprofile:\n$ brew tap creativeprojects/tap $ brew install resticprofile You can also install restic at the same time with --with-restic flag:\n$ brew install resticprofile --with-restic You can test that resticprofile is properly installed (make sure you have restic installed or the test will fail):\n$ brew test resticprofile Upgrading resticprofile installed via homebrew is very easy:\n$ brew update $ brew upgrade resticprofile Note on installing on Linux via Homebrew When testing homebrew after spinning new Linux virtual machines, I noticed resticprofile wouldn’t install without a compiler installed on the machine. Even though resticprofile is distributed as a binary, it looks like homebrew needs access to a compiler.\nDepending on your distribution you will need to install gcc:\n $ sudo yum install gcc $ sudo apt install gcc  ",
    "description": "",
    "tags": null,
    "title": "Linux",
    "uri": "/installation/linux/"
  },
  {
    "content": "Installation with Homebrew There’s a homebrew tap for resticprofile:\n$ brew tap creativeprojects/tap $ brew install resticprofile You can also install restic at the same time with --with-restic flag:\n$ brew install resticprofile --with-restic You can test that resticprofile is properly installed (make sure you have restic installed or the test will fail):\n$ brew test resticprofile Upgrading resticprofile installed via homebrew is very easy:\n$ brew update $ brew upgrade resticprofile Installation via a script Here’s a simple script to download the binary automatically. It works on mac OS X, FreeBSD and Linux:\n$ curl -sfL https://raw.githubusercontent.com/creativeprojects/resticprofile/master/install.sh | sh It should copy resticprofile in a bin directory under your current directory.\nIf you need more control, you can save the shell script and run it manually:\n$ curl -LO https://raw.githubusercontent.com/creativeprojects/resticprofile/master/install.sh $ chmod +x install.sh $ sudo ./install.sh -b /usr/local/bin It will install resticprofile in /usr/local/bin/\n",
    "description": "",
    "tags": null,
    "title": "mac OS X",
    "uri": "/installation/macosx/"
  },
  {
    "content": "Installation using bash You can use a script if you’re using bash in Windows (via WSL, git bash, etc.)\n$ curl -LO https://raw.githubusercontent.com/creativeprojects/resticprofile/master/install.sh $ ./install.sh It will create a bin directory under your current directory and place resticprofile.exe in it.\nManual installation (Windows)  Download the package corresponding to your system and CPU from the release page Once downloaded you need to open the archive and copy the binary file resticprofile (or resticprofile.exe) in your PATH.  ",
    "description": "",
    "tags": null,
    "title": "Windows",
    "uri": "/installation/windows/"
  },
  {
    "content": "The configuration may be split into multiple files by adding includes = \"glob-pattern\" to the main configuration file. E.g. the following profiles.conf loads configurations from conf.d and profiles.d:\ntoml yaml hcl  # Includes includes = [\"conf.d/*.conf\", \"profiles.d/*.yaml\", \"profiles.d/*.toml\"]  # Defaults [global] initialize = true    includes:  - \"conf.d/*.conf\"  - \"profiles.d/*.yaml\"  - \"profiles.d/*.toml\"  global:  initialize: true    includes = [\"conf.d/*.conf\", \"profiles.d/*.yaml\", \"profiles.d/*.toml\"]  global = {  initialize = true }     Included configuration files may use any supported format and settings are merged so that multiple files can extend the same profiles. The HCL format is special in that it cannot be mixed with other formats.\nIncluded files cannot include nested files and do not change the current configuration path.\n",
    "description": "",
    "tags": null,
    "title": "Include",
    "uri": "/configuration/include/"
  },
  {
    "content": "Installation using Ansible Installation using Ansible is not streamlined, but here’s the playbook I’m using on my servers\n",
    "description": "",
    "tags": null,
    "title": "Ansible",
    "uri": "/installation/ansible/"
  },
  {
    "content": "Installation from source You can download the source code and compile it, it’s actually very easy! all you need to have on your machine is:\n git (with git-bash on Windows) go compiler GNU Make which is installed by default on many unix boxes. On debian based distributions (Ubuntu included) the package is called build-essential.  To compile from sources:\n$ git clone https://github.com/creativeprojects/resticprofile.git $ cd resticprofile $ make build Your compiled binary (resticprofile or resticprofile.exe) is available in the current folder.\nTo install the binary in your user path:\n$ make install ",
    "description": "",
    "tags": null,
    "title": "Source",
    "uri": "/installation/source/"
  },
  {
    "content": "Once installed, you can easily upgrade resticprofile to the latest release using this command:\n$ resticprofile self-update Please note on versions before 0.10.0, there was an issue with self-updating from linux with ARM processors (like a raspberry pi). This was fixed in version 0.10.0\nresticprofile will check for a new version from GitHub releases and asks you if you want to update to the new version. If you add the flag -q or --quiet to the command line, it will update automatically without asking.\n$ resticprofile --quiet self-update and since version 0.11.0:\n$ resticprofile self-update --quiet ",
    "description": "",
    "tags": null,
    "title": "Upgrade",
    "uri": "/installation/upgrade/"
  },
  {
    "content": "Using resticprofile from a docker image You can run resticprofile inside a docker container. It is probably the easiest way to install resticprofile (and restic at the same time) and keep it updated.\nBut be aware that you will need to mount your backup source (and destination if it’s local) as a docker volume. Depending on your operating system, the backup might be slower. Volumes mounted on a mac OS host are well known for being quite slow.\nBy default, the resticprofile container starts at /resticprofile. So you can feed a configuration this way:\n$ docker run -it --rm -v $PWD/examples:/resticprofile creativeprojects/resticprofile You can list your profiles:\n$ docker run -it --rm -v $PWD/examples:/resticprofile creativeprojects/resticprofile profiles Container host name Each time a container is started, it gets assigned a new random name.\nYou can force a hostname\n in your container:  $ docker run -it --rm -v $PWD:/resticprofile -h my-machine creativeprojects/resticprofile -n profile backup  in your configuration:  [profile] host = \"my-machine\" ",
    "description": "",
    "tags": null,
    "title": "Docker",
    "uri": "/installation/docker/"
  },
  {
    "content": "Shell command line completions are provided for bash and zsh.\nTo load the command completions in shell, use:\n# bash eval \"$(resticprofile completion-script --bash)\"  # zsh eval \"$(resticprofile completion-script --zsh)\" To install them permanently:\n$ resticprofile completion-script --bash \u003e /etc/bash_completion.d/resticprofile $ chmod +x /etc/bash_completion.d/resticprofile ",
    "description": "",
    "tags": null,
    "title": "Shell Completion",
    "uri": "/installation/shell/"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "Categories",
    "uri": "/categories/"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tags",
    "uri": "/tags/"
  }
]
