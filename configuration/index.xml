<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Configuration file on resticprofile</title><link>https://creativeprojects.github.io/resticprofile/configuration/index.html</link><description>Recent content in Configuration file on resticprofile</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Tue, 24 Oct 2023 15:54:12 +0000</lastBuildDate><atom:link href="https://creativeprojects.github.io/resticprofile/configuration/index.xml" rel="self" type="application/rss+xml"/><item><title>Getting Started</title><link>https://creativeprojects.github.io/resticprofile/configuration/getting_started/index.html</link><pubDate>Sat, 25 Mar 2023 14:44:47 +0000</pubDate><guid>https://creativeprojects.github.io/resticprofile/configuration/getting_started/index.html</guid><description>Prerequisite resticprofile is one of many automation tools for restic, also called a wrapper.
In a nutshell, resticprofile provides a configuration file and a runner that will generate all the necessary calls to restic.
Unless you&amp;rsquo;re using the resticprofile Docker image, you need to have restic installed on your machine.
Choose your favourite format resticprofile configuration file can be written in:
TOML : configuration file with extension .toml or .conf YAML : configuration file with extension .</description></item><item><title>Examples</title><link>https://creativeprojects.github.io/resticprofile/configuration/examples/index.html</link><pubDate>Sun, 24 Apr 2022 09:44:47 +0100</pubDate><guid>https://creativeprojects.github.io/resticprofile/configuration/examples/index.html</guid><description>Simple configuration using Azure storage Here&amp;rsquo;s a simple configuration file using a Microsoft Azure backend. You will notice that the env section lets you define environment variables:
&amp;#8203; toml yaml hcl version = &amp;#34;1&amp;#34; [default] repository = &amp;#34;azure:restic:/&amp;#34; password-file = &amp;#34;key&amp;#34; option = &amp;#34;azure.connections=3&amp;#34; [default.env] AZURE_ACCOUNT_NAME = &amp;#34;my_storage_account&amp;#34; AZURE_ACCOUNT_KEY = &amp;#34;my_super_secret_key&amp;#34; [default.backup] exclude-file = &amp;#34;excludes&amp;#34; exclude-caches = true one-file-system = true tag = [ &amp;#34;root&amp;#34; ] source = [ &amp;#34;/&amp;#34;, &amp;#34;/var&amp;#34; ] version: &amp;#34;1&amp;#34; default: repository: &amp;#34;azure:restic:/&amp;#34; password-file: &amp;#34;key&amp;#34; option: &amp;#34;azure.</description></item><item><title>Path</title><link>https://creativeprojects.github.io/resticprofile/configuration/path/index.html</link><pubDate>Sun, 24 Apr 2022 09:44:41 +0100</pubDate><guid>https://creativeprojects.github.io/resticprofile/configuration/path/index.html</guid><description>How paths inside the configuration are resolved All file paths in the configuration are resolved relative to the configuration path, the path where the main configuration file was loaded from.
The big exceptions are source in the backup section, status-file, prometheus-save-to-file and the restic repository (if it is a file). These paths are taken as specified, which means they are resolved from the current working directory where you started resticprofile from.</description></item><item><title>Includes</title><link>https://creativeprojects.github.io/resticprofile/configuration/include/index.html</link><pubDate>Mon, 02 May 2022 20:00:00 +0200</pubDate><guid>https://creativeprojects.github.io/resticprofile/configuration/include/index.html</guid><description>The configuration may be split into multiple files by adding includes = &amp;quot;glob-pattern&amp;quot; to the main configuration file. E.g. the following profiles.conf loads configurations from conf.d and profiles.d:
&amp;#8203; toml yaml hcl json version = &amp;#34;1&amp;#34; # Includes includes = [&amp;#34;conf.d/*.conf&amp;#34;, &amp;#34;profiles.d/*.yaml&amp;#34;, &amp;#34;profiles.d/*.toml&amp;#34;] # Defaults [global] initialize = true version: &amp;#34;1&amp;#34; includes: - &amp;#34;conf.d/*.conf&amp;#34; - &amp;#34;profiles.d/*.yaml&amp;#34; - &amp;#34;profiles.d/*.toml&amp;#34; global: initialize: true includes = [&amp;#34;conf.d/*.conf&amp;#34;, &amp;#34;profiles.d/*.yaml&amp;#34;, &amp;#34;profiles.d/*.toml&amp;#34;] global { initialize = true } { &amp;#34;version&amp;#34;: &amp;#34;1&amp;#34;, &amp;#34;includes&amp;#34;: [ &amp;#34;conf.</description></item><item><title>Inheritance</title><link>https://creativeprojects.github.io/resticprofile/configuration/inheritance/index.html</link><pubDate>Mon, 02 May 2022 20:00:00 +0200</pubDate><guid>https://creativeprojects.github.io/resticprofile/configuration/inheritance/index.html</guid><description>Tip You can use resticprofile [&amp;lt;profile-name&amp;gt;.]show (or resticprofile [--name &amp;lt;profile-name&amp;gt;] show) to see the effect inheritance has on a profile
Profile Inheritance Profiles can inherit from a parent profile. This allows to define the general behavior and common configuration in a base profile while derived profiles only define what is specific, e.g. what needs to be included in the backup or which command hooks (e.g. run-before, run-after &amp;amp; run-finally) must be started.</description></item><item><title>Copy command</title><link>https://creativeprojects.github.io/resticprofile/configuration/copy/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://creativeprojects.github.io/resticprofile/configuration/copy/index.html</guid><description>Special case for the copy command section The copy command needs two repositories (and quite likely 2 different set of keys). You can configure a copy section like this:
&amp;#8203; toml yaml hcl version = &amp;#34;1&amp;#34; [default] initialize = false repository = &amp;#34;/backup/original&amp;#34; password-file = &amp;#34;key&amp;#34; [default.copy] initialize = true repository = &amp;#34;/backup/copy&amp;#34; password-file = &amp;#34;other_key&amp;#34; version: &amp;#34;1&amp;#34; default: initialize: false repository: &amp;#34;/backup/original&amp;#34; password-file: key copy: initialize: true repository: &amp;#34;/backup/copy&amp;#34; password-file: other_key default { initialize = false repository = &amp;#34;/backup/original&amp;#34; password-file = &amp;#34;key&amp;#34; copy = { initialize = true repository = &amp;#34;/backup/copy&amp;#34; password-file = &amp;#34;other_key&amp;#34; } } You will note that the secondary repository doesn&amp;rsquo;t need to have a 2 behind its flags (repository2, password-file2, etc.</description></item><item><title>Command Hooks</title><link>https://creativeprojects.github.io/resticprofile/configuration/run_hooks/index.html</link><pubDate>Mon, 16 May 2022 19:46:52 +0100</pubDate><guid>https://creativeprojects.github.io/resticprofile/configuration/run_hooks/index.html</guid><description>Run commands before, after success or after failure resticprofile has 2 places where you can run commands around restic:
commands that will run before and after every restic command (snapshots, backup, check, forget, prune, mount, etc.). These are placed at the root of each profile and are always considered. commands that will only run before and after specific restic commands. These are placed in supported sections of your profiles (currently supported are backup, copy, dump, find, ls, mount, restore, snapshots, stats and tag).</description></item><item><title>HTTP Hooks</title><link>https://creativeprojects.github.io/resticprofile/configuration/http_hooks/index.html</link><pubDate>Mon, 16 May 2022 19:46:52 +0100</pubDate><guid>https://creativeprojects.github.io/resticprofile/configuration/http_hooks/index.html</guid><description>Send HTTP messages before and after a job As well as being able to run shell commands, you can now send HTTP messages before, after (success or failure) running a restic command.
The sections that allow sending HTTP hooks are:
backup copy check forget prune Tip You might notice that&amp;rsquo;s the same sections that can also be scheduled
Each of these commands can send 4 different types of hooks:
send-before send-after send-after-fail send-finally The configuration is the same for each of these 4 types of hooks:</description></item><item><title>Templates</title><link>https://creativeprojects.github.io/resticprofile/configuration/templates/index.html</link><pubDate>Mon, 16 May 2022 20:04:35 +0100</pubDate><guid>https://creativeprojects.github.io/resticprofile/configuration/templates/index.html</guid><description>Templates are a great way to compose configuration profiles.
Please keep in mind that yaml files are sensitive to the number of spaces. Also if you declare a block already declared, it overrides the previous declaration (instead of merging them).
For that matter, configuration templates are probably more useful if you use the toml or hcl configuration format.
Here&amp;rsquo;s a simple example
{{ define &amp;#34;hello&amp;#34; }} hello = &amp;#34;world&amp;#34; {{ end }}To use the content of this template anywhere in your configuration, simply call it:</description></item><item><title>Variables</title><link>https://creativeprojects.github.io/resticprofile/configuration/variables/index.html</link><pubDate>Mon, 16 May 2022 20:04:35 +0100</pubDate><guid>https://creativeprojects.github.io/resticprofile/configuration/variables/index.html</guid><description>Variable expansion in configuration file You might want to reuse the same configuration (or bits of it) on different environments. One way of doing it is to create a generic configuration where specific bits can be replaced by a variable.
There are two kinds of variables: template variables: These variables are fixed once the full configuration file is loaded: includes are loaded, and inheritance is resolved. These variables are replaced by their value before the configuration is parsed.</description></item><item><title>Warnings</title><link>https://creativeprojects.github.io/resticprofile/configuration/warnings/index.html</link><pubDate>Mon, 16 May 2022 20:24:23 +0100</pubDate><guid>https://creativeprojects.github.io/resticprofile/configuration/warnings/index.html</guid><description>Warnings from restic Until version 0.13.0, resticprofile was always considering a restic warning as an error. This will remain the default. But the version 0.13.0 introduced a parameter to avoid this behaviour and consider that the backup was successful instead.
A restic warning occurs when it cannot read some files, but a snapshot was successfully created.
no-error-on-warning &amp;#8203; toml yaml hcl json version = &amp;#34;1&amp;#34; [profile] [profile.backup] no-error-on-warning = true version: &amp;#34;1&amp;#34; profile: backup: no-error-on-warning: true &amp;#34;profile&amp;#34; = { &amp;#34;backup&amp;#34; = { &amp;#34;no-error-on-warning&amp;#34; = true } } { &amp;#34;version&amp;#34;: &amp;#34;1&amp;#34;, &amp;#34;profile&amp;#34;: { &amp;#34;backup&amp;#34;: { &amp;#34;no-error-on-warning&amp;#34;: true } } }</description></item><item><title>Preventing system sleep</title><link>https://creativeprojects.github.io/resticprofile/configuration/sleep/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://creativeprojects.github.io/resticprofile/configuration/sleep/index.html</guid><description>This feature is available for:
macOS Windows Linux with systemd (logind) There&amp;rsquo;s a global parameter called prevent-sleep that you can set to true, and resticprofile will prevent your system from idle sleeping.
Please note:
it will not prevent a sleep if the system is running on batteries it will not prevent a sleep triggered by a user action: using the sleep button, closing the laptop lid, etc.</description></item><item><title>Logs</title><link>https://creativeprojects.github.io/resticprofile/configuration/logs/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://creativeprojects.github.io/resticprofile/configuration/logs/index.html</guid><description>By default resticprofile will display all logs (from itself and restic) to the console.
You can redirect the logs to a local file, a temporary file or a syslog server.
Destination The log destination syntax is a such:
filename redirects all the logs to the local file called filename temp:filename redirects all the logs to a temporary file available during the whole session, and deleted afterwards. tcp://syslog_server:514 or udp://syslog_server:514 redirects all the logs to the syslog server.</description></item><item><title>Reference</title><link>https://creativeprojects.github.io/resticprofile/configuration/reference/index.html</link><pubDate>Tue, 24 Oct 2023 15:54:12 +0000</pubDate><guid>https://creativeprojects.github.io/resticprofile/configuration/reference/index.html</guid><description>Note The configuration file reference is generated from resticprofile&amp;rsquo;s data model and restic&amp;rsquo;s manual pages.
Sections Section global Profile sections Section profile Section profile.backup Section profile.cache Section profile.cat Section profile.check Section profile.copy Section profile.diff Section profile.dump Section profile.find Section profile.forget Section profile.init Section profile.key Section profile.list Section profile.ls Section profile.migrate Section profile.mount Section profile.prune Section profile.rebuild-index Section profile.recover Section profile.repair Section profile.repair-index Section profile.repair-snapshots Section profile.restore Section profile.retention Section profile.</description></item><item><title>JSON schema</title><link>https://creativeprojects.github.io/resticprofile/configuration/jsonschema/index.html</link><pubDate>Sun, 24 Apr 2022 09:44:47 +0100</pubDate><guid>https://creativeprojects.github.io/resticprofile/configuration/jsonschema/index.html</guid><description>JSON, YAML and TOML configuration files can benefit from a JSON schema that describes the config structure depending on the selected restic and configuration file version.
Schema URLs JSON schema URLs for any restic version:
Config V1: https://creativeprojects.github.io/resticprofile/jsonschema/config-1.json Config V2: https://creativeprojects.github.io/resticprofile/jsonschema/config-2.json These universal schemas contain all flags and commands of all known restic versions and may allow to set flags that are not supported by a particular restic version. Descriptions and deprecation markers indicate what is supported and what should no longer be used.</description></item><item><title>Configuration v2 proposal</title><link>https://creativeprojects.github.io/resticprofile/configuration/v2/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://creativeprojects.github.io/resticprofile/configuration/v2/index.html</guid><description>Note The configuration file format v2 is in preview right now. You can try to use it since v0.17.0 but it&amp;rsquo;s for testing and feedback only.
Introduction The current file format was decided at the time resticprofile was only using the toml format. Nesting pieces of configuration in blocks is not the easiest as you have to specify the whole path in the block:
[profile] [profile.backup] source = &amp;#34;some path&amp;#34;Since then, I believe the yaml format is preferred over toml.</description></item></channel></rss>