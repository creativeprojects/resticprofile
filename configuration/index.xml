<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Configuration on resticprofile</title><link>https://creativeprojects.github.io/resticprofile/configuration/</link><description>Recent content in Configuration on resticprofile</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Mon, 16 May 2022 20:24:23 +0100</lastBuildDate><atom:link href="https://creativeprojects.github.io/resticprofile/configuration/index.xml" rel="self" type="application/rss+xml"/><item><title>Examples</title><link>https://creativeprojects.github.io/resticprofile/configuration/examples/</link><pubDate>Sun, 24 Apr 2022 09:44:47 +0100</pubDate><guid>https://creativeprojects.github.io/resticprofile/configuration/examples/</guid><description>Simple configuration using Azure storage Here&amp;rsquo;s a simple configuration file using a Microsoft Azure backend:
toml yaml hcl [default] repository = &amp;#34;azure:restic:/&amp;#34; password-file = &amp;#34;key&amp;#34; option = &amp;#34;azure.connections=3&amp;#34; [default.env] AZURE_ACCOUNT_NAME = &amp;#34;my_storage_account&amp;#34; AZURE_ACCOUNT_KEY = &amp;#34;my_super_secret_key&amp;#34; [default.backup] exclude-file = &amp;#34;excludes&amp;#34; exclude-caches = true one-file-system = true tag = [ &amp;#34;root&amp;#34; ] source = [ &amp;#34;/&amp;#34;, &amp;#34;/var&amp;#34; ] default: repository: &amp;#34;azure:restic:/&amp;#34; password-file: &amp;#34;key&amp;#34; option: &amp;#34;azure.connections=3&amp;#34; env: AZURE_ACCOUNT_NAME: &amp;#34;my_storage_account&amp;#34; AZURE_ACCOUNT_KEY: &amp;#34;my_super_secret_key&amp;#34; backup: exclude-file: &amp;#34;excludes&amp;#34; exclude-caches: true one-file-system: true tag: - &amp;#34;root&amp;#34; source: - &amp;#34;/&amp;#34; - &amp;#34;/var&amp;#34; default { repository = &amp;#34;azure:restic:/&amp;#34; password-file = &amp;#34;key&amp;#34; options = &amp;#34;azure.</description></item><item><title>Path</title><link>https://creativeprojects.github.io/resticprofile/configuration/path/</link><pubDate>Sun, 24 Apr 2022 09:44:41 +0100</pubDate><guid>https://creativeprojects.github.io/resticprofile/configuration/path/</guid><description>The default name for the configuration file is profiles, without an extension. You can change the name and its path with the --config or -c option on the command line. You can set a specific extension -c profiles.conf to load a TOML format file. If you set a filename with no extension instead, resticprofile will load the first file it finds with any of these extensions:
.conf (toml format) .yaml .</description></item><item><title>Include</title><link>https://creativeprojects.github.io/resticprofile/configuration/include/</link><pubDate>Mon, 02 May 2022 20:00:00 +0200</pubDate><guid>https://creativeprojects.github.io/resticprofile/configuration/include/</guid><description>The configuration may be split into multiple files by adding includes = &amp;quot;glob-pattern&amp;quot; to the main configuration file. E.g. the following profiles.conf loads configurations from conf.d and profiles.d:
toml yaml hcl json # Includes includes = [&amp;#34;conf.d/*.conf&amp;#34;, &amp;#34;profiles.d/*.yaml&amp;#34;, &amp;#34;profiles.d/*.toml&amp;#34;] # Defaults [global] initialize = true includes: - &amp;#34;conf.d/*.conf&amp;#34; - &amp;#34;profiles.d/*.yaml&amp;#34; - &amp;#34;profiles.d/*.toml&amp;#34; global: initialize: true includes = [&amp;#34;conf.d/*.conf&amp;#34;, &amp;#34;profiles.d/*.yaml&amp;#34;, &amp;#34;profiles.d/*.toml&amp;#34;] global { initialize = true } { &amp;#34;includes&amp;#34;: [ &amp;#34;conf.d/*.conf&amp;#34;, &amp;#34;profiles.</description></item><item><title>Inheritance</title><link>https://creativeprojects.github.io/resticprofile/configuration/inheritance/</link><pubDate>Mon, 02 May 2022 20:00:00 +0200</pubDate><guid>https://creativeprojects.github.io/resticprofile/configuration/inheritance/</guid><description>Tip You can use resticprofile [&amp;lt;profile-name&amp;gt;.]show to see the effect inheritance on a profile
Profile Inheritance Profiles can inherit from a parent profile. This allows to define the general behavior and common configuration in a base profile while derived profiles only define what is specific, e.g. what needs to be included in the backup or which command hooks (e.g. run-before, run-after &amp;amp; run-finally) must be started.
When assuming profile &amp;ldquo;backup-homes&amp;rdquo; inherits from profile &amp;ldquo;base&amp;rdquo;, then the effective configuration of &amp;ldquo;backup-homes&amp;rdquo; is built by merging the profile configuration of &amp;ldquo;backup-homes&amp;rdquo; into &amp;ldquo;base&amp;rdquo;.</description></item><item><title>Copy command</title><link>https://creativeprojects.github.io/resticprofile/configuration/copy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://creativeprojects.github.io/resticprofile/configuration/copy/</guid><description>Special case for the copy command section The copy command needs two repositories (and quite likely 2 different set of keys). You can configure a copy section like this:
toml yaml hcl [default] initialize = false repository = &amp;#34;/backup/original&amp;#34; password-file = &amp;#34;key&amp;#34; [default.copy] initialize = true repository = &amp;#34;/backup/copy&amp;#34; password-file = &amp;#34;other_key&amp;#34; default: initialize: false repository: &amp;#34;/backup/original&amp;#34; password-file: key copy: initialize: true repository: &amp;#34;/backup/copy&amp;#34; password-file: other_key default { initialize = false repository = &amp;#34;/backup/original&amp;#34; password-file = &amp;#34;key&amp;#34; copy = { initialize = true repository = &amp;#34;/backup/copy&amp;#34; password-file = &amp;#34;other_key&amp;#34; } } You will note that the secondary repository doesn&amp;rsquo;t need to have a 2 behind its flags (repository2, password-file2, etc.</description></item><item><title>Command Hooks</title><link>https://creativeprojects.github.io/resticprofile/configuration/run_hooks/</link><pubDate>Mon, 16 May 2022 19:46:52 +0100</pubDate><guid>https://creativeprojects.github.io/resticprofile/configuration/run_hooks/</guid><description>Run commands before, after success or after failure resticprofile has 2 places where you can run commands around restic:
commands that will run before and after every restic command (snapshots, backup, check, forget, prune, mount, etc.). These are placed at the root of each profile. commands that will only run before and after a backup: these are placed in the backup section of your profiles. Here&amp;rsquo;s an example of all the external commands that you can run during the execution of a profile:</description></item><item><title>HTTP Hooks</title><link>https://creativeprojects.github.io/resticprofile/configuration/http_hooks/</link><pubDate>Mon, 16 May 2022 19:46:52 +0100</pubDate><guid>https://creativeprojects.github.io/resticprofile/configuration/http_hooks/</guid><description>Send HTTP messages before and after a job As well as being able to run shell commands, you can now send HTTP messages before, after (success or failure) running a restic command.
The sections that allow sending HTTP hooks are:
backup copy check forget prune Tip You might notice that&amp;rsquo;s the same sections that can also be scheduled
Each of these commands can send 4 different types of hooks:
send-before send-after send-after-fail send-finally The configuration is the same for each of these 4 types of hooks:</description></item><item><title>Variables</title><link>https://creativeprojects.github.io/resticprofile/configuration/variables/</link><pubDate>Mon, 16 May 2022 20:04:35 +0100</pubDate><guid>https://creativeprojects.github.io/resticprofile/configuration/variables/</guid><description>Variable expansion in configuration file You might want to reuse the same configuration (or bits of it) on different environments. One way of doing it is to create a generic configuration where specific bits will be replaced by a variable.
Pre-defined variables The syntax for using a pre-defined variable is:
{{ .VariableName }} The list of pre-defined variables is:
Variable Type Description .Profile.Name string Profile name .Now time.Time object Now object: see explanation bellow .</description></item><item><title>Configuration templates</title><link>https://creativeprojects.github.io/resticprofile/configuration/templates/</link><pubDate>Mon, 16 May 2022 20:04:35 +0100</pubDate><guid>https://creativeprojects.github.io/resticprofile/configuration/templates/</guid><description>Templates are a great way to compose configuration profiles.
Please keep in mind that yaml files are sensitive to the number of spaces. Also if you declare a block already declared, it overrides the previous declaration (instead of merging them).
For that matter, configuration templates are probably more useful if you use the toml or hcl configuration format.
Here&amp;rsquo;s a simple example
{{ define &amp;#34;hello&amp;#34; }} hello = &amp;#34;world&amp;#34; {{ end }} To use the content of this template anywhere in your configuration, simply call it:</description></item><item><title>Warnings</title><link>https://creativeprojects.github.io/resticprofile/configuration/warnings/</link><pubDate>Mon, 16 May 2022 20:24:23 +0100</pubDate><guid>https://creativeprojects.github.io/resticprofile/configuration/warnings/</guid><description>Warnings from restic Until version 0.13.0, resticprofile was always considering a restic warning as an error. This will remain the default. But the version 0.13.0 introduced a parameter to avoid this behaviour and consider that the backup was successful instead.
A restic warning occurs when it cannot read some files, but a snapshot was successfully created.
Let me introduce no-error-on-warning toml yaml hcl json [profile] inherit = &amp;#34;default&amp;#34; [profile.backup] no-error-on-warning = true profile: inherit: default backup: no-error-on-warning: true &amp;#34;profile&amp;#34; = { &amp;#34;inherit&amp;#34; = &amp;#34;default&amp;#34; &amp;#34;backup&amp;#34; = { &amp;#34;no-error-on-warning&amp;#34; = true } } { &amp;#34;profile&amp;#34;: { &amp;#34;inherit&amp;#34;: &amp;#34;default&amp;#34;, &amp;#34;backup&amp;#34;: { &amp;#34;no-error-on-warning&amp;#34;: true } } }</description></item><item><title>Reference</title><link>https://creativeprojects.github.io/resticprofile/configuration/reference/</link><pubDate>Mon, 16 May 2022 20:07:43 +0100</pubDate><guid>https://creativeprojects.github.io/resticprofile/configuration/reference/</guid><description>Configuration file reference [global]
global is a fixed name
None of these flags are passed on the restic command line
ionice: true / false ionice-class: integer ionice-level: integer nice: true / false OR integer priority: string = Idle, Background, Low, Normal, High, Highest default-command: string initialize: true / false restic-binary: string restic-lock-retry-after: duration restic-stale-lock-age: duration min-memory: integer (MB) - see memory shell: string (shell binary to run commands, default value is OS specific) scheduler: string (crond is the only non-default value) systemd-unit-template: string (file containing a go template to generate systemd unit file) systemd-timer-template: string (file containing a go template to generate systemd timer file) [profile]</description></item></channel></rss>