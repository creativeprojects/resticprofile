<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Configuration on resticprofile</title><link>https://creativeprojects.github.io/resticprofile/configuration/</link><description>Recent content in Configuration on resticprofile</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Mon, 16 May 2022 20:24:23 +0100</lastBuildDate><atom:link href="https://creativeprojects.github.io/resticprofile/configuration/index.xml" rel="self" type="application/rss+xml"/><item><title>Examples</title><link>https://creativeprojects.github.io/resticprofile/configuration/examples/</link><pubDate>Sun, 24 Apr 2022 09:44:47 +0100</pubDate><guid>https://creativeprojects.github.io/resticprofile/configuration/examples/</guid><description>Simple configuration using Azure storage Here&amp;rsquo;s a simple configuration file using a Microsoft Azure backend:
toml yaml hcl [default] repository = &amp;#34;azure:restic:/&amp;#34; password-file = &amp;#34;key&amp;#34; option = &amp;#34;azure.connections=3&amp;#34; [default.env] AZURE_ACCOUNT_NAME = &amp;#34;my_storage_account&amp;#34; AZURE_ACCOUNT_KEY = &amp;#34;my_super_secret_key&amp;#34; [default.backup] exclude-file = &amp;#34;excludes&amp;#34; exclude-caches = true one-file-system = true tag = [ &amp;#34;root&amp;#34; ] source = [ &amp;#34;/&amp;#34;, &amp;#34;/var&amp;#34; ] default: repository: &amp;#34;azure:restic:/&amp;#34; password-file: &amp;#34;key&amp;#34; option: &amp;#34;azure.connections=3&amp;#34; env: AZURE_ACCOUNT_NAME: &amp;#34;my_storage_account&amp;#34; AZURE_ACCOUNT_KEY: &amp;#34;my_super_secret_key&amp;#34; backup: exclude-file: &amp;#34;excludes&amp;#34; exclude-caches: true one-file-system: true tag: - &amp;#34;root&amp;#34; source: - &amp;#34;/&amp;#34; - &amp;#34;/var&amp;#34; default { repository = &amp;#34;azure:restic:/&amp;#34; password-file = &amp;#34;key&amp;#34; options = &amp;#34;azure.</description></item><item><title>Path</title><link>https://creativeprojects.github.io/resticprofile/configuration/path/</link><pubDate>Sun, 24 Apr 2022 09:44:41 +0100</pubDate><guid>https://creativeprojects.github.io/resticprofile/configuration/path/</guid><description>The default name for the configuration file is profiles, without an extension. You can change the name and its path with the --config or -c option on the command line. You can set a specific extension -c profiles.conf to load a TOML format file. If you set a filename with no extension instead, resticprofile will load the first file it finds with any of these extensions:
.conf (toml format) .yaml .</description></item><item><title>Include</title><link>https://creativeprojects.github.io/resticprofile/configuration/include/</link><pubDate>Mon, 02 May 2022 20:00:00 +0200</pubDate><guid>https://creativeprojects.github.io/resticprofile/configuration/include/</guid><description>The configuration may be split into multiple files by adding includes = &amp;quot;glob-pattern&amp;quot; to the main configuration file. E.g. the following profiles.conf loads configurations from conf.d and profiles.d:
toml yaml hcl json # Includes includes = [&amp;#34;conf.d/*.conf&amp;#34;, &amp;#34;profiles.d/*.yaml&amp;#34;, &amp;#34;profiles.d/*.toml&amp;#34;] # Defaults [global] initialize = true includes: - &amp;#34;conf.d/*.conf&amp;#34; - &amp;#34;profiles.d/*.yaml&amp;#34; - &amp;#34;profiles.d/*.toml&amp;#34; global: initialize: true includes = [&amp;#34;conf.d/*.conf&amp;#34;, &amp;#34;profiles.d/*.yaml&amp;#34;, &amp;#34;profiles.d/*.toml&amp;#34;] global { initialize = true } { &amp;#34;includes&amp;#34;: [ &amp;#34;conf.d/*.conf&amp;#34;, &amp;#34;profiles.</description></item><item><title>Inheritance</title><link>https://creativeprojects.github.io/resticprofile/configuration/inheritance/</link><pubDate>Mon, 02 May 2022 20:00:00 +0200</pubDate><guid>https://creativeprojects.github.io/resticprofile/configuration/inheritance/</guid><description>Tip You can use resticprofile [&amp;lt;profile-name&amp;gt;.]show to see the effect inheritance on a profile
Profile Inheritance Profiles can inherit from a parent profile. This allows to define the general behavior and common configuration in a base profile while derived profiles only define what is specific, e.g. what needs to be included in the backup or which command hooks (e.g. run-before, run-after &amp;amp; run-finally) must be started.
When assuming profile &amp;ldquo;backup-homes&amp;rdquo; inherits from profile &amp;ldquo;base&amp;rdquo;, then the effective configuration of &amp;ldquo;backup-homes&amp;rdquo; is built by merging the profile configuration of &amp;ldquo;backup-homes&amp;rdquo; into &amp;ldquo;base&amp;rdquo;.</description></item><item><title>Preventing system sleep</title><link>https://creativeprojects.github.io/resticprofile/configuration/sleep/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://creativeprojects.github.io/resticprofile/configuration/sleep/</guid><description>This feature is available for:
macOS Windows Linux with systemd (logind) There&amp;rsquo;s a global parameter called prevent-sleep that you can set to true, and resticprofile will prevent your system from idle sleeping.
Please note:
it will not prevent a sleep if the system is running on batteries it will not prevent a sleep triggered by a user action: using the sleep button, closing the laptop lid, etc.</description></item><item><title>Configuration v2 proposal</title><link>https://creativeprojects.github.io/resticprofile/configuration/v2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://creativeprojects.github.io/resticprofile/configuration/v2/</guid><description>Note The configuration file format v2 is in preview right now. You can try to use it since v0.17.0 but it&amp;rsquo;s for testing and feedback only.
Introduction The current file format was decided at the time resticprofile was only using the toml format. Nesting pieces of configuration in blocks is not the easiest as you have to specify the whole path in the block:
[profile] [profile.backup] source = &amp;#34;some path&amp;#34; Since then, I believe the yaml format is preferred over toml.</description></item><item><title>Copy command</title><link>https://creativeprojects.github.io/resticprofile/configuration/copy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://creativeprojects.github.io/resticprofile/configuration/copy/</guid><description>Special case for the copy command section The copy command needs two repositories (and quite likely 2 different set of keys). You can configure a copy section like this:
toml yaml hcl [default] initialize = false repository = &amp;#34;/backup/original&amp;#34; password-file = &amp;#34;key&amp;#34; [default.copy] initialize = true repository = &amp;#34;/backup/copy&amp;#34; password-file = &amp;#34;other_key&amp;#34; default: initialize: false repository: &amp;#34;/backup/original&amp;#34; password-file: key copy: initialize: true repository: &amp;#34;/backup/copy&amp;#34; password-file: other_key default { initialize = false repository = &amp;#34;/backup/original&amp;#34; password-file = &amp;#34;key&amp;#34; copy = { initialize = true repository = &amp;#34;/backup/copy&amp;#34; password-file = &amp;#34;other_key&amp;#34; } } You will note that the secondary repository doesn&amp;rsquo;t need to have a 2 behind its flags (repository2, password-file2, etc.</description></item><item><title>Command Hooks</title><link>https://creativeprojects.github.io/resticprofile/configuration/run_hooks/</link><pubDate>Mon, 16 May 2022 19:46:52 +0100</pubDate><guid>https://creativeprojects.github.io/resticprofile/configuration/run_hooks/</guid><description>Run commands before, after success or after failure resticprofile has 2 places where you can run commands around restic:
commands that will run before and after every restic command (snapshots, backup, check, forget, prune, mount, etc.). These are placed at the root of each profile and are always considered. commands that will only run before and after specific restic commands. These are placed in supported sections of your profiles (supported are backup &amp;amp; copy).</description></item><item><title>HTTP Hooks</title><link>https://creativeprojects.github.io/resticprofile/configuration/http_hooks/</link><pubDate>Mon, 16 May 2022 19:46:52 +0100</pubDate><guid>https://creativeprojects.github.io/resticprofile/configuration/http_hooks/</guid><description>Send HTTP messages before and after a job As well as being able to run shell commands, you can now send HTTP messages before, after (success or failure) running a restic command.
The sections that allow sending HTTP hooks are:
backup copy check forget prune Tip You might notice that&amp;rsquo;s the same sections that can also be scheduled
Each of these commands can send 4 different types of hooks:
send-before send-after send-after-fail send-finally The configuration is the same for each of these 4 types of hooks:</description></item><item><title>Variables</title><link>https://creativeprojects.github.io/resticprofile/configuration/variables/</link><pubDate>Mon, 16 May 2022 20:04:35 +0100</pubDate><guid>https://creativeprojects.github.io/resticprofile/configuration/variables/</guid><description>Variable expansion in configuration file You might want to reuse the same configuration (or bits of it) on different environments. One way of doing it is to create a generic configuration where specific bits will be replaced by a variable.
Pre-defined variables The syntax for using a pre-defined variable is:
{{ .VariableName }} The list of pre-defined variables is:
Variable Type Description .Profile.Name string Profile name .Now time.Time object Now object: see explanation bellow .</description></item><item><title>Configuration templates</title><link>https://creativeprojects.github.io/resticprofile/configuration/templates/</link><pubDate>Mon, 16 May 2022 20:04:35 +0100</pubDate><guid>https://creativeprojects.github.io/resticprofile/configuration/templates/</guid><description>Templates are a great way to compose configuration profiles.
Please keep in mind that yaml files are sensitive to the number of spaces. Also if you declare a block already declared, it overrides the previous declaration (instead of merging them).
For that matter, configuration templates are probably more useful if you use the toml or hcl configuration format.
Here&amp;rsquo;s a simple example
{{ define &amp;#34;hello&amp;#34; }} hello = &amp;#34;world&amp;#34; {{ end }} To use the content of this template anywhere in your configuration, simply call it:</description></item><item><title>Warnings</title><link>https://creativeprojects.github.io/resticprofile/configuration/warnings/</link><pubDate>Mon, 16 May 2022 20:24:23 +0100</pubDate><guid>https://creativeprojects.github.io/resticprofile/configuration/warnings/</guid><description>Warnings from restic Until version 0.13.0, resticprofile was always considering a restic warning as an error. This will remain the default. But the version 0.13.0 introduced a parameter to avoid this behaviour and consider that the backup was successful instead.
A restic warning occurs when it cannot read some files, but a snapshot was successfully created.
Let me introduce no-error-on-warning toml yaml hcl json [profile] inherit = &amp;#34;default&amp;#34; [profile.backup] no-error-on-warning = true profile: inherit: default backup: no-error-on-warning: true &amp;#34;profile&amp;#34; = { &amp;#34;inherit&amp;#34; = &amp;#34;default&amp;#34; &amp;#34;backup&amp;#34; = { &amp;#34;no-error-on-warning&amp;#34; = true } } { &amp;#34;profile&amp;#34;: { &amp;#34;inherit&amp;#34;: &amp;#34;default&amp;#34;, &amp;#34;backup&amp;#34;: { &amp;#34;no-error-on-warning&amp;#34;: true } } }</description></item><item><title>Reference</title><link>https://creativeprojects.github.io/resticprofile/configuration/reference/</link><pubDate>Mon, 16 May 2022 20:07:43 +0100</pubDate><guid>https://creativeprojects.github.io/resticprofile/configuration/reference/</guid><description>Configuration file reference Section global global is a fixed section name, at the root of the configuration file
Info None of these flags are directly passed on to the restic command line
Name Type Default Notes ionice true / false false ionice-class integer 0 ionice-level integer 0 nice true / false OR integer 0 priority string Normal values are Idle, Background, Low, Normal, High, Highest default-command string snapshots initialize true / false false auto-initialize a repository restic-binary string full path of the restic program restic-lock-retry-after duration 1 1 minute see locks restic-stale-lock-age duration 1 2 hours see locks min-memory integer (MB) 100MB see memory shell string OS specific shell binary to run commands scheduler string crond is the only non-default value systemd-unit-template string file containing a go template to generate systemd unit file - see systemd templates systemd-timer-template string file containing a go template to generate systemd timer file - see systemd templates send-timeout duration 1 30 seconds timeout when sending messages to a webhook - see HTTP Hooks ca-certificates string, or list of strings certificates (file in PEM format) to authenticate HTTP servers - see HTTP Hooks prevent-sleep true / false false prevent the system from sleeping - see Preventing system sleep Profile sections The name of this section is the name of your profile.</description></item></channel></rss>