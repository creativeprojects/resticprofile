<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Usage on resticprofile</title><link>https://creativeprojects.github.io/resticprofile/usage/index.html</link><description>Recent content in Usage on resticprofile</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Mon, 16 May 2022 20:26:09 +0100</lastBuildDate><atom:link href="https://creativeprojects.github.io/resticprofile/usage/index.xml" rel="self" type="application/rss+xml"/><item><title>Version</title><link>https://creativeprojects.github.io/resticprofile/usage/version/index.html</link><pubDate>Mon, 16 May 2022 20:21:01 +0100</pubDate><guid>https://creativeprojects.github.io/resticprofile/usage/version/index.html</guid><description>The version command displays resticprofile version. If run in vebose mode (using --verbose flag) additional information such as OS version or golang version or modules are displayed as well.
$ resticprofile --verbose version</description></item><item><title>Generate a Keyfile</title><link>https://creativeprojects.github.io/resticprofile/usage/keyfile/index.html</link><pubDate>Mon, 16 May 2022 20:21:16 +0100</pubDate><guid>https://creativeprojects.github.io/resticprofile/usage/keyfile/index.html</guid><description>Generating random keys resticprofile has a handy tool to generate cryptographically secure random keys encoded in base64. You can simply put this key into a file and use it as a strong key for restic.
On Linux and FreeBSD, the generator uses getrandom(2) if available, /dev/urandom otherwise. On OpenBSD, the generator uses getentropy(2). On other Unix-like systems, the generator reads from /dev/urandom. On Windows systems, the generator uses the CryptGenRandom API.</description></item><item><title>Memory</title><link>https://creativeprojects.github.io/resticprofile/usage/memory/index.html</link><pubDate>Mon, 16 May 2022 20:20:55 +0100</pubDate><guid>https://creativeprojects.github.io/resticprofile/usage/memory/index.html</guid><description>Minimum memory required restic can be memory hungry. I&amp;rsquo;m running a few servers with no swap and I managed to kill some of them during a backup.
For that matter I&amp;rsquo;ve introduced a parameter in the global section called min-memory. The default value is 100MB. You can disable it by using a value of 0.
It compares against (total - used) which is probably the best way to know how much memory is available (that is including the memory used for disk buffers/cache).</description></item><item><title>Locks</title><link>https://creativeprojects.github.io/resticprofile/usage/locks/index.html</link><pubDate>Mon, 16 May 2022 20:26:09 +0100</pubDate><guid>https://creativeprojects.github.io/resticprofile/usage/locks/index.html</guid><description>restic is already using a lock to avoid running some operations at the same time.
Since resticprofile can run several commands in a profile, it could be better to run the whole batch in a lock so nobody can interfere in the meantime.
For this to happen you can specify a lock file in each profile:
toml yaml hcl json [src] lock = &amp;#34;/tmp/resticprofile-profile-src.lock&amp;#34; [src.backup] check-before = true exclude = [ &amp;#34;/**/.</description></item></channel></rss>