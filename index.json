[{"content":"The version command displays resticprofile version. If run in vebose mode (using --verbose flag) additional information such as OS version or golang version or modules are displayed as well.\n$ resticprofile --verbose version ","description":"","tags":null,"title":"Version","uri":"/usage/version/"},{"content":"resticprofile can generate a prometheus file, or send the report to a push gateway. For now, only a backup command will generate a report. Here’s a configuration example with both options to generate a file and send to a push gateway:\ntoml yaml hcl json [root] inherit = \"default\" prometheus-save-to-file = \"root.prom\" prometheus-push = \"http://localhost:9091/\" [root.backup] extended-status = true no-error-on-warning = true source = [ \"/\" ] root: inherit: default prometheus-save-to-file: \"root.prom\" prometheus-push: \"http://localhost:9091/\" backup: extended-status: true no-error-on-warning: true source: - / \"root\" = { \"inherit\" = \"default\" \"prometheus-save-to-file\" = \"root.prom\" \"prometheus-push\" = \"http://localhost:9091/\" \"backup\" = { \"extended-status\" = true \"no-error-on-warning\" = true \"source\" = [\"/\"] } } { \"root\": { \"inherit\": \"default\", \"prometheus-save-to-file\": \"root.prom\", \"prometheus-push\": \"http://localhost:9091/\", \"backup\": { \"extended-status\": true, \"no-error-on-warning\": true, \"source\": [ \"/\" ] } } } Note Please note you need to set extended-status to true if you want all the available metrics. See Extended status for more information.\nHere’s an example of the generated prometheus file:\n# HELP resticprofile_backup_added_bytes Total number of bytes added to the repository. # TYPE resticprofile_backup_added_bytes gauge resticprofile_backup_added_bytes{profile=\"prom\"} 70690 # HELP resticprofile_backup_dir_changed Number of directories with changes. # TYPE resticprofile_backup_dir_changed gauge resticprofile_backup_dir_changed{profile=\"prom\"} 15 # HELP resticprofile_backup_dir_new Number of new directories added to the backup. # TYPE resticprofile_backup_dir_new gauge resticprofile_backup_dir_new{profile=\"prom\"} 0 # HELP resticprofile_backup_dir_unmodified Number of directories unmodified since last backup. # TYPE resticprofile_backup_dir_unmodified gauge resticprofile_backup_dir_unmodified{profile=\"prom\"} 529 # HELP resticprofile_backup_duration_seconds The backup duration (in seconds). # TYPE resticprofile_backup_duration_seconds gauge resticprofile_backup_duration_seconds{profile=\"prom\"} 0.879901212 # HELP resticprofile_backup_files_changed Number of files with changes. # TYPE resticprofile_backup_files_changed gauge resticprofile_backup_files_changed{profile=\"prom\"} 3 # HELP resticprofile_backup_files_new Number of new files added to the backup. # TYPE resticprofile_backup_files_new gauge resticprofile_backup_files_new{profile=\"prom\"} 1 # HELP resticprofile_backup_files_processed Total number of files scanned by the backup for changes. # TYPE resticprofile_backup_files_processed gauge resticprofile_backup_files_processed{profile=\"prom\"} 3680 # HELP resticprofile_backup_files_unmodified Number of files unmodified since last backup. # TYPE resticprofile_backup_files_unmodified gauge resticprofile_backup_files_unmodified{profile=\"prom\"} 3676 # HELP resticprofile_backup_processed_bytes Total number of bytes scanned for changes. # TYPE resticprofile_backup_processed_bytes gauge resticprofile_backup_processed_bytes{profile=\"prom\"} 8.55433765e+08 # HELP resticprofile_backup_status Backup status: 0=fail, 1=warning, 2=success. # TYPE resticprofile_backup_status gauge resticprofile_backup_status{profile=\"prom\"} 2 # HELP resticprofile_backup_time_seconds Last backup run (unixtime). # TYPE resticprofile_backup_time_seconds gauge resticprofile_backup_time_seconds{profile=\"prom\"} 1.662310865e+09 # HELP resticprofile_build_info resticprofile build information. # TYPE resticprofile_build_info gauge resticprofile_build_info{goversion=\"go1.19\",version=\"0.19.0\"} 1 User defined labels You can add your own prometheus labels. Please note they will be applied to all the metrics. Here’s an example:\ntoml yaml hcl json [root] inherit = \"default\" prometheus-save-to-file = \"root.prom\" prometheus-push = \"http://localhost:9091/\" [[root.prometheus-labels]] host = \"{{ .Hostname }}\" [root.backup] extended-status = true no-error-on-warning = true source = [ \"/\" ] root: inherit: default prometheus-save-to-file: \"root.prom\" prometheus-push: \"http://localhost:9091/\" prometheus-labels: - host: {{ .Hostname }} backup: extended-status: true no-error-on-warning: true source: - / \"root\" = { \"inherit\" = \"default\" \"prometheus-save-to-file\" = \"root.prom\" \"prometheus-push\" = \"http://localhost:9091/\" \"prometheus-labels\" = { \"host\" = \"{{ .Hostname }}\" } \"backup\" = { \"extended-status\" = true \"no-error-on-warning\" = true \"source\" = [\"/\"] } } { \"root\": { \"inherit\": \"default\", \"prometheus-save-to-file\": \"root.prom\", \"prometheus-push\": \"http://localhost:9091/\", \"prometheus-labels\": [ { \"host\": \"{{ .Hostname }}\" } ], \"backup\": { \"extended-status\": true, \"no-error-on-warning\": true, \"source\": [ \"/\" ] } } } which will add the host label to all your metrics.\n","description":"","tags":null,"title":"Prometheus","uri":"/status/prometheus/"},{"content":"Simple configuration using Azure storage Here’s a simple configuration file using a Microsoft Azure backend:\ntoml yaml hcl [default] repository = \"azure:restic:/\" password-file = \"key\" option = \"azure.connections=3\" [default.env] AZURE_ACCOUNT_NAME = \"my_storage_account\" AZURE_ACCOUNT_KEY = \"my_super_secret_key\" [default.backup] exclude-file = \"excludes\" exclude-caches = true one-file-system = true tag = [ \"root\" ] source = [ \"/\", \"/var\" ] default: repository: \"azure:restic:/\" password-file: \"key\" option: \"azure.connections=3\" env: AZURE_ACCOUNT_NAME: \"my_storage_account\" AZURE_ACCOUNT_KEY: \"my_super_secret_key\" backup: exclude-file: \"excludes\" exclude-caches: true one-file-system: true tag: - \"root\" source: - \"/\" - \"/var\" default { repository = \"azure:restic:/\" password-file = \"key\" options = \"azure.connections=3\" env { AZURE_ACCOUNT_NAME = \"my_storage_account\" AZURE_ACCOUNT_KEY = \"my_super_secret_key\" } backup = { exclude-file = \"excludes\" exclude-caches = true one-file-system = true tag = [ \"root\" ] source = [ \"/\", \"/var\" ] } } Configuration with inheritance Here’s a more complex configuration file showing profile inheritance and two backup profiles using the same repository:\ntoml yaml hcl [global] # ionice is available on Linux only ionice = false ionice-class = 2 ionice-level = 6 # priority is using priority class on windows, and \"nice\" on unixes - it's acting on CPU usage only priority = \"low\" # run 'snapshots' when no command is specified when invoking resticprofile default-command = \"snapshots\" # initialize a repository if none exist at location initialize = false # resticprofile won't start a profile if there's less than 100MB of RAM available min-memory = 100 # a group is a profile that will call all profiles one by one [groups] # when starting a backup on profile \"full-backup\", it will run the \"root\" and \"src\" backup profiles full-backup = [ \"root\", \"src\" ] # Default profile when not specified (-n or --name) # Please note there's no default inheritance from the 'default' profile (you can use the 'inherit' flag if needed) [default] # you can use a relative path, it will be relative to the configuration file repository = \"/backup\" password-file = \"key\" initialize = false # will run these scripts before and after each command (including 'backup') run-before = \"mount /backup\" run-after = \"umount /backup\" # if a restic command fails, the run-after won't be running # add this parameter to run the script in case of a failure run-after-fail = \"umount /backup\" [default.env] TMPDIR= \"/tmp\" [no-cache] inherit = \"default\" no-cache = true initialize = false # New profile named 'root' [root] inherit = \"default\" initialize = true # this will add a LOCAL lockfile so you cannot run the same profile more than once at a time # (it's totally independent of the restic locks on the repository) lock = \"/tmp/resticprofile-root.lock\" force-inactive-lock = false # 'backup' command of profile 'root' [root.backup] # files with no path are relative to the configuration file exclude-file = [ \"root-excludes\", \"excludes\" ] exclude-caches = true one-file-system = false tag = [ \"test\", \"dev\" ] source = [ \"/\" ] # if scheduled, will run every day at midnight schedule = \"daily\" schedule-permission = \"system\" schedule-lock-wait = \"2h\" # run this after a backup to share a repository between a user and root (via sudo) run-after = \"chown -R $SUDO_USER $HOME/.cache/restic /backup\" # ignore restic warnings (otherwise the backup is considered failed when restic couldn't read some files) no-error-on-warning = true # retention policy for profile root [root.retention] before-backup = false after-backup = true keep-last = 3 keep-hourly = 1 keep-daily = 1 keep-weekly = 1 keep-monthly = 1 keep-yearly = 1 keep-within = \"3h\" keep-tag = [ \"forever\" ] compact = false prune = false # path can be a boolean ('true' meaning to copy source paths from 'backup') # or a path or list of paths to use instead. Default is `true` if not specified. #path = [] # tag can be a boolean ('true' meaning to copy tag set from 'backup') # or a custom set of tags. Default is 'false', meaning that tags are NOT used. tag = true # host can be a boolean ('true' meaning current hostname) or a string to specify a different hostname host = true # New profile named 'src' [src] inherit = \"default\" initialize = true # 'backup' command of profile 'src' [src.backup] exclude = [ '/**/.git' ] exclude-caches = true one-file-system = false tag = [ \"test\", \"dev\" ] source = [ \"./src\" ] check-before = true # will only run these scripts before and after a backup run-before = [ \"echo Starting!\", \"ls -al ./src\" ] run-after = \"sync\" # if scheduled, will run every 30 minutes schedule = \"*:0,30\" schedule-permission = \"user\" schedule-lock-wait = \"10m\" # retention policy for profile src [src.retention] before-backup = false after-backup = true keep-within = \"30d\" compact = false prune = true # check command of profile src [src.check] read-data = true # if scheduled, will check the repository the first day of each month at 3am schedule = \"*-*-01 03:00\" global: default-command: snapshots initialize: false priority: low groups: full-backup: - root - src default: env: tmp: /tmp password-file: key repository: /backup documents: backup: source: ~/Documents repository: ~/backup snapshots: tag: - documents root: backup: exclude-caches: true exclude-file: - root-excludes - excludes one-file-system: false source: - / tag: - test - dev inherit: default initialize: true retention: after-backup: true before-backup: false compact: false host: true keep-daily: 1 keep-hourly: 1 keep-last: 3 keep-monthly: 1 keep-tag: - forever keep-weekly: 1 keep-within: 3h keep-yearly: 1 prune: false tag: - test - dev self: backup: source: ./ repository: ../backup snapshots: tag: - self src: lock: \"/tmp/resticprofile-profile-src.lock\" force-inactive-lock: false backup: check-before: true exclude: - /**/.git exclude-caches: true one-file-system: false run-after: echo All Done! run-before: - echo Starting! - ls -al ~/go source: - ~/go tag: - test - dev inherit: default initialize: true retention: after-backup: true before-backup: false compact: false keep-within: 30d prune: true snapshots: tag: - test - dev global { priority = \"low\" ionice = true ionice-class = 2 ionice-level = 6 # don't start if the memory available is \u003c 1000MB min-memory = 1000 } groups { all = [\"src\", \"self\"] } default { repository = \"/tmp/backup\" password-file = \"key\" run-before = \"echo Profile started!\" run-after = \"echo Profile finished!\" run-after-fail = \"echo An error occurred!\" } src { inherit = \"default\" initialize = true lock = \"/tmp/backup/resticprofile-profile-src.lock\" force-inactive-lock = false snapshots = { tag = [ \"test\", \"dev\" ] } backup = { run-before = [ \"echo Starting!\", \"ls -al ~/go/src\" ] run-after = \"echo All Done!\" exclude = [ \"/**/.git\" ] exclude-caches = true tag = [ \"test\", \"dev\" ] source = [ \"~/go/src\" ] check-before = true } retention = { before-backup = false after-backup = true keep-last = 3 compact = false prune = true } check = { check-unused = true with-cache = false } } self { inherit = \"default\" initialize = false snapshots = { tag = [ \"self\" ] } backup = { source = \"./\" tag = [ \"self\" ] } } Configuration example for Windows toml yaml hcl [global] restic-binary = \"c:\\\\ProgramData\\\\chocolatey\\\\bin\\\\restic.exe\" # Default profile when not specified on the command line # Please note there's no default inheritance from the 'default' profile (you can use the 'inherit' flag if needed) [default] repository = \"local:r:/\" password-file = \"key\" initialize = false # New profile named 'test' [test] inherit = \"default\" initialize = true # 'backup' command of profile 'test' [test.backup] tag = [ \"windows\" ] source = [ \"c:\\\\\" ] check-after = true run-before = \"dir /l\" run-after = \"echo All Done!\" # ignore restic warnings (otherwise the backup is considered failed when restic couldn't read some files) no-error-on-warning = true global: restic-binary: c:\\ProgramData\\chocolatey\\bin\\restic.exe default: repository: local:r:/ password-file: key initialize: false test: inherit: default initialize: true backup: tag: - windows source: - c:\\ check-after: true run-before: dir /l run-after: echo All Done! no-error-on-warning: true global { restic-binary = \"c:\\\\ProgramData\\\\chocolatey\\\\bin\\\\restic.exe\" } default { repository = \"local:r:/\" password-file = \"key\" initialize = false } test { inherit = \"default\" initialize = true backup = { tag = [ \"windows\" ] source = [ \"c:\\\\\" ] check-after = true run-before = \"dir /l\" run-after = \"echo All Done!\" no-error-on-warning = true } } Use stdin in configuration Simple example sending a file via stdin\ntoml yaml hcl [stdin] repository = \"local:/backup/restic\" password-file = \"key\" [stdin.backup] stdin = true stdin-filename = \"stdin-test\" tag = [ 'stdin' ] [mysql] inherit = \"stdin\" [mysql.backup] stdin-command = [ 'mysqldump --all-databases --order-by-primary' ] stdin-filename = \"dump.sql\" tag = [ 'mysql' ] stdin: repository: \"local:/backup/restic\" password-file: key backup: stdin: true stdin-filename: stdin-test tag: - stdin mysql: inherit: stdin backup: stdin-command: \"mysqldump --all-databases --order-by-primary\" stdin-filename: \"dump.sql\" tag: - mysql # sending stream through stdin stdin { repository = \"local:/backup/restic\" password-file = \"key\" backup = { stdin = true stdin-filename = \"stdin-test\" tag = [ \"stdin\" ] } } mysql { inherit = \"stdin\" backup = { stdin-command = [ \"mysqldump --all-databases --order-by-primary\" ] stdin-filename = \"dump.sql\" tag = [ \"mysql\" ] } } ","description":"","tags":null,"title":"Examples","uri":"/configuration/examples/"},{"content":"Installation Linux mac OS X Windows Ansible Source Upgrade Docker Shell Completion ","description":"","tags":null,"title":"Installation","uri":"/installation/"},{"content":"Configuration file A configuration is a set of profiles. Each profile is in its own [section] (in TOML). Inside each profile, you can specify different flags for each command. A command definition is [section.command] (in TOML). All the restic flags can be defined in a section. For most of them you just need to remove the two dashes in front.\nTo set the flag --password-file, the name of the parameter is simply password-file.\nThere’s one exception: the flag --repo is named repository in the configuration\nExample So let’s say you normally use this simple command:\n$ restic --repo \"local:/backup\" --password-file \"password.txt\" --verbose backup /home For resticprofile to generate this command automatically for you, here’s the configuration file:\ntoml yaml hcl json # indentation is not needed but it makes it easier to read ;) # [default] repository = \"local:/backup\" password-file = \"password.txt\" [default.backup] verbose = true source = [ \"/home\" ] --- default: repository: \"local:/backup\" password-file: \"password.txt\" backup: verbose: true source: - \"/home\" default { repository = \"local:/backup\" password-file = \"password.txt\" backup = { verbose = true source = [ \"/home\" ] } } { \"default\": { \"repository\": \"local:/backup\", \"password-file\": \"password.txt\", \"backup\": { \"verbose\": true, \"source\": [ \"/home\" ] } } } You may have noticed the source flag is accepting an array of values (inside brackets in TOML, list of values in YAML)\nNow, assuming this configuration file is named profiles.conf in the current folder (it’s the default config file name), you can simply run\n$ resticprofile backup and resticprofile will do its magic and generate the command line for you.\nIf you have any doubt on what it’s running, you can try a --dry-run:\n$ resticprofile --dry-run backup 2022/05/18 17:14:07 profile 'default': starting 'backup' 2022/05/18 17:14:07 dry-run: /usr/bin/restic backup --password-file key --repo local:/backup --verbose /home 2022/05/18 17:14:07 profile 'default': finished 'backup' Path resolution in configuration All files path in the configuration are resolved from the configuration path. The big exception being source in backup section where it’s resolved from the current path where you started resticprofile.\nUsing the basic configuration from earlier, and taking into account that the configuration file is saved in the directory /opt/resticprofile, the password key file password.txt is expected to be found at /opt/resticprofile/password.txt no matter your current directory.\nMore information Examples Path Include Inheritance Copy command Command Hooks HTTP Hooks Variables Configuration templates Warnings Preventing system sleep Reference Configuration v2 proposal ","description":"","tags":null,"title":"Configuration","uri":"/configuration/"},{"content":"Generating random keys resticprofile has a handy tool to generate cryptographically secure random keys encoded in base64. You can simply put this key into a file and use it as a strong key for restic.\nOn Linux and FreeBSD, the generator uses getrandom(2) if available, /dev/urandom otherwise. On OpenBSD, the generator uses getentropy(2). On other Unix-like systems, the generator reads from /dev/urandom. On Windows systems, the generator uses the CryptGenRandom API. On Wasm, the generator uses the Web Crypto API. Reference from the Go documentation\n$ resticprofile generate --random-key generates a 1024 bytes random key (converted into 1368 base64 characters) and displays it on the console\nTo generate a different size of key, you can specify the bytes length on the command line:\n$ resticprofile generate --random-key 2048 ","description":"","tags":null,"title":"Generate a Keyfile","uri":"/usage/keyfile/"},{"content":"The default name for the configuration file is profiles, without an extension. You can change the name and its path with the --config or -c option on the command line. You can set a specific extension -c profiles.conf to load a TOML format file. If you set a filename with no extension instead, resticprofile will load the first file it finds with any of these extensions:\n.conf (toml format) .yaml .toml .json .hcl macOS X resticprofile will search for your configuration file in these folders:\ncurrent directory ~/Library/Preferences/resticprofile/ /Library/Preferences/resticprofile/ /usr/local/etc/ /usr/local/etc/restic/ /usr/local/etc/resticprofile/ /etc/ /etc/restic/ /etc/resticprofile/ /opt/local/etc/ /opt/local/etc/restic/ /opt/local/etc/resticprofile/ ~/ ($HOME directory) Other unixes (Linux and BSD) resticprofile will search for your configuration file in these folders:\ncurrent directory ~/.config/resticprofile/ /etc/xdg/resticprofile/ /usr/local/etc/ /usr/local/etc/restic/ /usr/local/etc/resticprofile/ /etc/ /etc/restic/ /etc/resticprofile/ /opt/local/etc/ /opt/local/etc/restic/ /opt/local/etc/resticprofile/ ~/ ($HOME directory) Windows resticprofile will search for your configuration file in these folders:\ncurrent directory %USERPROFILE%\\AppData\\Local\\ c:\\ProgramData\\ c:\\restic\\ c:\\resticprofile\\ %USERPROFILE%\\ ","description":"","tags":null,"title":"Path","uri":"/configuration/path/"},{"content":"Installation via a script Here’s a simple script to download the binary automatically. It works on mac OS X, FreeBSD and Linux:\n$ curl -sfL https://raw.githubusercontent.com/creativeprojects/resticprofile/master/install.sh | sh It should copy resticprofile in a bin directory under your current directory.\nIf you need more control, you can save the shell script and run it manually:\n$ curl -LO https://raw.githubusercontent.com/creativeprojects/resticprofile/master/install.sh $ chmod +x install.sh $ sudo ./install.sh -b /usr/local/bin It will install resticprofile in /usr/local/bin/\nInstallation with homebrew for Linux There’s a Linux homebrew tap for resticprofile:\n$ brew tap creativeprojects/tap $ brew install resticprofile You can also install restic at the same time with --with-restic flag:\n$ brew install resticprofile --with-restic You can test that resticprofile is properly installed (make sure you have restic installed or the test will fail):\n$ brew test resticprofile Upgrading resticprofile installed via homebrew is very easy:\n$ brew update $ brew upgrade resticprofile Note on installing on Linux via Homebrew When testing homebrew after spinning new Linux virtual machines, I noticed resticprofile wouldn’t install without a compiler installed on the machine. Even though resticprofile is distributed as a binary, it looks like homebrew needs access to a compiler.\nDepending on your distribution you will need to install gcc:\n$ sudo yum install gcc $ sudo apt install gcc ","description":"","tags":null,"title":"Linux","uri":"/installation/linux/"},{"content":"The schedule configuration consists of a few parameters which can be added on each profile:\ntoml yaml hcl json [profile.backup] schedule = \"*:00,30\" schedule-permission = \"system\" schedule-priority = \"background\" schedule-log = \"profile-backup.log\" schedule-lock-mode = \"default\" schedule-lock-wait = \"15m30s\" profile: backup: schedule: '*:00,30' schedule-permission: system schedule-priority: background schedule-log: profile-backup.log schedule-lock-mode: default schedule-lock-wait: 15m30s \"profile\" \"backup\" { \"schedule\" = \"*:00,30\" \"schedule-permission\" = \"system\" \"schedule-priority\" = \"background\" \"schedule-log\" = \"profile-backup.log\" \"schedule-lock-mode\" = \"default\" \"schedule-lock-wait\" = \"15m30s\" } { \"profile\": { \"backup\": { \"schedule\": \"*:00,30\", \"schedule-permission\": \"system\", \"schedule-priority\": \"background\", \"schedule-log\": \"profile-backup.log\", \"schedule-lock-mode\": \"default\", \"schedule-lock-wait\": \"15m30s\" } } } schedule-permission schedule-permission accepts two parameters: user or system:\nuser: your backup will be running using your current user permissions on files. This is fine if you’re only saving your documents (or any other file inside your profile). Please note on systemd that the schedule will only run when your user is logged in.\nsystem: if you need to access some system or protected files. You will need to run resticprofile with sudo on unixes and with elevated prompt on Windows (please note on Windows resticprofile will ask you for elevated permissions automatically if needed).\nempty: resticprofile will try its best guess based on how you started it (with sudo or as a normal user) and fallback to user\nChanging schedule-permission from user to system, or system to user If you need to change the permission of a schedule, please be sure to unschedule the profile before.\nThis order is important:\nunschedule the job first. resticprofile does not keep track of how your profile was installed, so you have to remove the schedule first now you can change your permission (user to system, or system to user) schedule your updated profile schedule-lock-mode Starting from version 0.14.0, schedule-lock-mode accepts 3 values:\ndefault: Wait on acquiring a lock for the time duration set in schedule-lock-wait, before failing a schedule. Behaves like fail when schedule-lock-wait is “0” or not specified. fail: Any lock failure causes a schedule to abort immediately. ignore: Skip resticprofile locks. restic locks are not skipped and can abort the schedule. schedule-lock-wait Sets the amount of time to wait for a resticprofile and restic lock to become available. Is only used when schedule-lock-mode is unset or default.\nschedule-log schedule-log can be used in two ways:\nAllow to redirect all output from resticprofile and restic to a file. The parameter should point to a file (/path/to/file) Redirects all resticprofile log entries to the syslog server. In that case the parameter is a URL like: udp://server:514 or tcp://127.0.0.1:514 If there’s no server answering on the port specified, resticprofile will send the logs to the default output instead.\nschedule-priority (systemd and launchd only) Starting from version 0.11.0, schedule-priority accepts two values:\nbackground: the process shouldn’t be noticeable when working on the machine at the same time (this is the default) standard: the process should get the same priority as any other process on the machine (but it won’t run faster if you’re not using the machine at the same time) schedule-priority is not available for windows task scheduler, nor crond\nschedule The schedule parameter accepts many forms of input from the systemd calendar event type. This is by far the easiest to use: It is the same format used to schedule on macOS and Windows.\nThe most general form is:\nweekdays year-month-day hour:minute:second use * to mean any use , to separate multiple entries use .. for a range limitations:\nthe divider (/), the ~ and timezones are not (yet?) supported on macOS and Windows. the year and second fields have no effect on macOS. They do have limited availability on Windows (they don’t make much sense anyway). Here are a few examples (taken from the systemd documentation):\nOn the left is the user input, on the right is the full format understood by the system Sat,Thu,Mon..Wed,Sat..Sun → Mon..Thu,Sat,Sun *-*-* 00:00:00 Mon,Sun 12-*-* 2,1:23 → Mon,Sun 2012-*-* 01,02:23:00 Wed *-1 → Wed *-*-01 00:00:00 Wed..Wed,Wed *-1 → Wed *-*-01 00:00:00 Wed, 17:48 → Wed *-*-* 17:48:00 Wed..Sat,Tue 12-10-15 1:2:3 → Tue..Sat 2012-10-15 01:02:03 *-*-7 0:0:0 → *-*-07 00:00:00 10-15 → *-10-15 00:00:00 monday *-12-* 17:00 → Mon *-12-* 17:00:00 Mon,Fri *-*-3,1,2 *:30 → Mon,Fri *-*-01,02,03 *:30:00 12,14,13,12:20,10,30 → *-*-* 12,13,14:10,20,30:00 12..14:10,20,30 → *-*-* 12..14:10,20,30:00 03-05 08:05 → *-03-05 08:05:00 05:40 → *-*-* 05:40:00 Sat,Sun 12-05 08:05 → Sat,Sun *-12-05 08:05:00 Sat,Sun 08:05 → Sat,Sun *-*-* 08:05:00 2003-03-05 05:40 → 2003-03-05 05:40:00 2003-02..04-05 → 2003-02..04-05 00:00:00 2003-03-05 → 2003-03-05 00:00:00 03-05 → *-03-05 00:00:00 hourly → *-*-* *:00:00 daily → *-*-* 00:00:00 monthly → *-*-01 00:00:00 weekly → Mon *-*-* 00:00:00 yearly → *-01-01 00:00:00 annually → *-01-01 00:00:00 The schedule can be a string or an array of string (to allow for multiple schedules)\nHere’s an example of a scheduling configuration:\ntoml yaml hcl json [default] repository = \"d:\\\\backup\" password-file = \"key\" [self] inherit = \"default\" [self.retention] after-backup = true keep-within = \"14d\" [self.backup] source = \".\" schedule = [ \"Mon..Fri *:00,15,30,45\", \"Sat,Sun 0,12:00\" ] schedule-permission = \"user\" schedule-lock-wait = \"10m\" [self.prune] schedule = \"sun 3:30\" schedule-permission = \"user\" schedule-lock-wait = \"1h\" default: repository: \"d:\\\\backup\" password-file: key self: inherit: default retention: after-backup: true keep-within: 14d backup: source: \".\" schedule: - \"Mon..Fri *:00,15,30,45\" # every 15 minutes on weekdays - \"Sat,Sun 0,12:00\" # twice a day on week-ends schedule-permission: user schedule-lock-wait: 10m prune: schedule: \"sun 3:30\" schedule-permission: user schedule-lock-wait: 1h \"default\" = { \"repository\" = \"d:\\\\backup\" \"password-file\" = \"key\" } \"self\" = { \"inherit\" = \"default\" \"retention\" = { \"after-backup\" = true \"keep-within\" = \"14d\" } \"backup\" = { \"source\" = \".\" \"schedule\" = [\"Mon..Fri *:00,15,30,45\", \"Sat,Sun 0,12:00\"] \"schedule-permission\" = \"user\" \"schedule-lock-wait\" = \"10m\" } \"prune\" = { \"schedule\" = \"sun 3:30\" \"schedule-permission\" = \"user\" \"schedule-lock-wait\" = \"1h\" } } { \"default\": { \"repository\": \"d:\\\\backup\", \"password-file\": \"key\" }, \"self\": { \"inherit\": \"default\", \"retention\": { \"after-backup\": true, \"keep-within\": \"14d\" }, \"backup\": { \"source\": \".\", \"schedule\": [ \"Mon..Fri *:00,15,30,45\", \"Sat,Sun 0,12:00\" ], \"schedule-permission\": \"user\", \"schedule-lock-wait\": \"10m\" }, \"prune\": { \"schedule\": \"sun 3:30\", \"schedule-permission\": \"user\", \"schedule-lock-wait\": \"1h\" } } } ","description":"","tags":null,"title":"Schedule Configuration","uri":"/schedules/configuration/"},{"content":"Installation with Homebrew There’s a homebrew tap for resticprofile:\n$ brew tap creativeprojects/tap $ brew install resticprofile You can also install restic at the same time with --with-restic flag:\n$ brew install resticprofile --with-restic You can test that resticprofile is properly installed (make sure you have restic installed or the test will fail):\n$ brew test resticprofile Upgrading resticprofile installed via homebrew is very easy:\n$ brew update $ brew upgrade resticprofile Installation via a script Here’s a simple script to download the binary automatically. It works on mac OS X, FreeBSD and Linux:\n$ curl -sfL https://raw.githubusercontent.com/creativeprojects/resticprofile/master/install.sh | sh It should copy resticprofile in a bin directory under your current directory.\nIf you need more control, you can save the shell script and run it manually:\n$ curl -LO https://raw.githubusercontent.com/creativeprojects/resticprofile/master/install.sh $ chmod +x install.sh $ sudo ./install.sh -b /usr/local/bin It will install resticprofile in /usr/local/bin/\n","description":"","tags":null,"title":"mac OS X","uri":"/installation/macosx/"},{"content":"Installation using bash You can use a script if you’re using bash in Windows (via WSL, git bash, etc.)\n$ curl -LO https://raw.githubusercontent.com/creativeprojects/resticprofile/master/install.sh $ ./install.sh It will create a bin directory under your current directory and place resticprofile.exe in it.\nManual installation (Windows) Download the package corresponding to your system and CPU from the release page Once downloaded you need to open the archive and copy the binary file resticprofile (or resticprofile.exe) in your PATH. ","description":"","tags":null,"title":"Windows","uri":"/installation/windows/"},{"content":"Using resticprofile Here are a few examples how to run resticprofile (using the main example configuration file)\nSee all snapshots of your [default] profile:\n$ resticprofile See all available profiles in your configuration file (and the restic commands where some flags are defined):\n$ resticprofile profiles Profiles available (name, sections, description): root: (backup, copy, forget, retention) self: (backup, check, copy, forget, retention) src: (backup, copy, retention, snapshots) Groups available (name, profiles, description): full-backup: [root, src] Backup root \u0026 src profiles (using full-backup group shown earlier)\n$ resticprofile --name \"full-backup\" backup or using the syntax introduced in v0.17.0:\n$ resticprofile full-backup.backup Assuming the stdin profile from the configuration file shown before, the command to send a mysqldump to the backup is as simple as:\n$ mysqldump --all-databases --order-by-primary | resticprofile --name stdin backup or using the syntax introduced in v0.17.0:\n$ mysqldump --all-databases --order-by-primary | resticprofile stdin.backup Mount the default profile (default) in /mnt/restic:\n$ resticprofile mount /mnt/restic Display quick help\n$ resticprofile --help Usage of resticprofile: resticprofile [resticprofile flags] [profile name.][restic command] [restic flags] resticprofile [resticprofile flags] [profile name.][resticprofile command] [command specific flags] resticprofile flags: -c, --config string configuration file (default \"profiles\") --dry-run display the restic commands instead of running them -f, --format string file format of the configuration (default is to use the file extension) -h, --help display this help --lock-wait duration wait up to duration to acquire a lock (syntax \"1h5m30s\") -l, --log string logs to a target instead of the console -n, --name string profile name (default \"default\") --no-ansi disable ansi control characters (disable console colouring) --no-lock skip profile lock file --no-prio don't set any priority on load: used when started from a service that has already set the priority -q, --quiet display only warnings and errors --theme string console colouring theme (dark, light, none) (default \"light\") --trace display even more debugging information -v, --verbose display some debugging information -w, --wait wait at the end until the user presses the enter key resticprofile own commands: version display version (run in verbose mode for detailed information) self-update update to latest resticprofile (use -q/--quiet flag to update without confirmation) profiles display profile names from the configuration file show show all the details of the current profile schedule schedule jobs from a profile (use --all flag to schedule all jobs of all profiles) unschedule remove scheduled jobs of a profile (use --all flag to unschedule all profiles) status display the status of scheduled jobs (use --all flag for all profiles) generate generate resources (--random-key [size], --bash-completion \u0026 --zsh-completion) A command is either a restic command or a resticprofile own command.\nCommand line reference There are not many options on the command line, most of the options are in the configuration file.\n[-h]: Display quick help [-c | –config] configuration_file: Specify a configuration file other than the default [-f | –format] configuration_format: Specify the configuration file format: toml, yaml, json or hcl [-n | –name] profile_name: Profile section to use from the configuration file. You can also use [profile_name].[command] syntax instead, this will only work if -n is not set. Using -n [profile_name] [command] or [profile_name].[command] both select profile and command and are technically equivalent. [–dry-run]: Doesn’t run the restic command but display the command line instead [-q | –quiet]: Force resticprofile and restic to be quiet (override any configuration from the profile) [-v | –verbose]: Force resticprofile and restic to be verbose (override any configuration from the profile) [–no-ansi]: Disable console colouring (to save output into a log file) [–no-lock]: Disable resticprofile locks, neither create nor fail on a lock. restic locks are unaffected by this option. [–theme]: Can be light, dark or none. The colours will adjust to a light or dark terminal (none to disable colouring) [–lock-wait] duration: Retry to acquire resticprofile and restic locks for up to the specified amount of time before failing on a lock failure. [-l | –log] file path or url: To write the logs to a file or a syslog server instead of displaying on the console. The format of the server url is tcp://192.168.0.1:514 or udp://localhost:514 [-w | –wait]: Wait at the very end of the execution for the user to press enter. This is only useful in Windows when resticprofile is started from explorer and the console window closes automatically at the end. [resticprofile OR restic command]: Like snapshots, backup, check, prune, forget, mount, etc. [additional flags]: Any additional flags to pass to the restic command line ","description":"","tags":["v0.17.0"],"title":"Usage","uri":"/usage/"},{"content":"Minimum memory required restic can be memory hungry. I’m running a few servers with no swap and I managed to kill some of them during a backup.\nFor that matter I’ve introduced a parameter in the global section called min-memory. The default value is 100MB. You can disable it by using a value of 0.\nIt compares against (total - used) which is probably the best way to know how much memory is available (that is including the memory used for disk buffers/cache).\n","description":"","tags":null,"title":"Memory","uri":"/usage/memory/"},{"content":"The configuration may be split into multiple files by adding includes = \"glob-pattern\" to the main configuration file. E.g. the following profiles.conf loads configurations from conf.d and profiles.d:\ntoml yaml hcl json # Includes includes = [\"conf.d/*.conf\", \"profiles.d/*.yaml\", \"profiles.d/*.toml\"] # Defaults [global] initialize = true includes: - \"conf.d/*.conf\" - \"profiles.d/*.yaml\" - \"profiles.d/*.toml\" global: initialize: true includes = [\"conf.d/*.conf\", \"profiles.d/*.yaml\", \"profiles.d/*.toml\"] global { initialize = true } { \"includes\": [ \"conf.d/*.conf\", \"profiles.d/*.yaml\", \"profiles.d/*.toml\" ], \"global\": { \"initialize\": true } } Included configuration files may use any supported format and settings are merged so that multiple files can extend the same profiles. The HCL format is special in that it cannot be mixed with other formats.\nIncluded files cannot include nested files. Specifying includes inside an included file has no effect.\nWithin included files, the current configuration path is not changed. Path resolution remains relative to the path of the main configuration file.\nConfiguration Merging Loading a configuration file involves loading the physical file from disk and applying all variables and templates prior to parsing the file in a supported format hcl, json, toml and yaml. This means variables and templates must create valid configuration markup that can be parsed or loading will fail.\nConfiguration files are loaded and applied in a fixed order:\nThe main configuration file is loaded first includes are iterated in declaration order: Every item may be a single file path or glob expression Glob expressions are resolved and iterated in alphabetical order All paths are resolved relative to configuration path Configuration files are loaded in the following order when assuming /etc/resticprofile/profiles.conf with includes = [\"first.conf\", \"conf.d/*.conf\", \"last.conf\"]:\n/etc/resticprofile/profiles.conf /etc/resticprofile/first.conf /etc/resticprofile/conf.d/00_a.conf /etc/resticprofile/conf.d/01_a.conf /etc/resticprofile/conf.d/01_b.conf /etc/resticprofile/last.conf Configuration merging follows the logic:\nConfiguration properties are replaced Configuration structure (tree) is merged What includes later overrides what defines earlier Lists of values or lists of objects are considered properties not config structure and will be replaced Final configuration profiles.yaml first.yaml second.yaml includes: - first.yaml - second.yaml default: initialize: true backup: exclude: - .* source: - /etc - /opt includes: - first.yaml - second.yaml default: backup: source: - /usr default: initialize: false backup: source: - /etc - /opt default: initialize: true backup: exclude: - .* Note resticprofile prior to v0.18.0 had a slightly different behavior when merging configuration properties of a different type (e.g. number \u003c-\u003e text or list \u003c-\u003e single value). In such cases the existing value was not overridden by an included file, breaking the rule “what includes later overrides what defines earlier”.\n","description":"","tags":null,"title":"Include","uri":"/configuration/include/"},{"content":"Installation using Ansible Installation using Ansible is not streamlined, but here’s the playbook I’m using on my servers:\nPlaybooks resticprofile.yml (5 KB) This is very much work in progress. Once I get a stable ansible script I should publish it to Ansible Galaxy.\nThe playbook is installing (or upgrading):\nlatest restic binary to /usr/local/bin latest resticprofile binary to /usr/local/bin the resticprofile configuration file from a template file found in ./resticprofile/{{ inventory_hostname }}/profiles.* to /root/resticprofile/profiles.* password files that can be encrypted using ansible vault. These files are located in ./resticprofile/{{ inventory_hostname }}/keys/*: they will be decrypted and saved to /root/resticprofile/. other files (like files needed for --exclude-file, --files-from or anything else you need) from ./resticprofile/{{ inventory_hostname }}/copy/* to /root/resticprofile/ Requirement Each target machine must have one variable named arch containing the resticprofile OS \u0026 Arch. You can see a list of all the available OS \u0026 Arch couples on the releases page.\nTypically, a binary will be distributed using this convention:\nresticprofile-[VERSION]_[OS]_[ARCH].tar.gz\nYour host variables file should declare a arch variable containing the [OS]_[ARCH] part of the file name.\nExamples: arch: linux_amd64 or for a Raspberry pi 3+:\narch: linux_armv7 Note: I might find a way to detect this automatically at some point\n","description":"","tags":null,"title":"Ansible","uri":"/installation/ansible/"},{"content":" Tip You can use resticprofile [\u003cprofile-name\u003e.]show to see the effect inheritance on a profile\nProfile Inheritance Profiles can inherit from a parent profile. This allows to define the general behavior and common configuration in a base profile while derived profiles only define what is specific, e.g. what needs to be included in the backup or which command hooks (e.g. run-before, run-after \u0026 run-finally) must be started.\nWhen assuming profile “backup-homes” inherits from profile “base”, then the effective configuration of “backup-homes” is built by merging the profile configuration of “backup-homes” into “base”.\nProfile configuration merging follows the same logic as configuration merging in includes:\nWhat defines in the parent profile is replaced by definitions from the derived profile Configuration structure is merged, configuration properties are replaced A profile declares that it inherits from a parent by setting the property inherit to the name of the parent profile There is no default inheritance. If inherit is not set, no inheritance applies Profile \"base\" (yaml) Profile \"backup-homes\" (yaml) ... after applying \"inherit\" base: initialize: true repository: local:/backup/my-repo password-file: my-repo.key retention: after-backup: true keep-last: 2 keep-hourly: 1 keep-daily: 1 keep-weekly: 1 backup: exclude: - \"*.\" - \"*~\" - \"/backup/*\" source: - / backup-homes: inherit: base retention: keep-hourly: false keep-daily: 30 keep-weekly: 26 backup: source: - /home/ backup-homes: initialize: true repository: local:/backup/my-repo password-file: my-repo.key retention: after-backup: true keep-last: 2 keep-hourly: false keep-daily: 30 keep-weekly: 26 backup: exclude: - \"*.\" - \"*~\" - \"/backup/*\" source: - /home/ Note Configurations prior to version 2, treat lists as if they were configuration structure. Instead of replacing the parent with the derived list entirely, a derived list is merged into the parent list using list-index as key.\nThis differs from how includes handle lists and may lead to unexpected results. In configuration file format version 2 the behavior was changed to match that of includes and extended with a deterministic way of pre- \u0026 appending to list properties.\nInheritance of List Properties Starting with configuration format version 2, lists are no longer considered configuration structure and are replaced in derived profiles in the same way as inheritance behaves for any non-list properties. For example, when the parent and child profile define the same list property like run-before or source, the declaration of the child property replaces the declaration of the parent property entirely.\nFor version 2, when the parent defined source = ['/my-files1', '/my-files2'] and the child source = ['/my-other-files'], then only /my-other-files will really make it into the backup.\nIn contrast to this, configurations in version 1 partially merge lists on the list index. E.g. when the parent profile defines 2 items and the child only one, then the first entry in parent is replaced with the single child item and the second parent item is derived into the child profile.\nFor version 1, when the parent defined source = ['/my-files1', '/my-files2'] and the child source = ['/my-other-files'], then /my-other-files and /my-files2 will make it into the backup.\nPrepend \u0026 Append to List Properties Config format version 2 Feature preview, may change without notice\nInheritance in configuration format version 2 can prepend and append to parent list properties. This feature replaces list merging of version 1.\nAssuming the parent profile declares the list property \u003clist-property\u003e:\n\u003clist-property\u003e... or \u003clist-property\u003e__APPEND appends to the list property ...\u003clist-property\u003e or \u003clist-property\u003e__PREPEND prepends to the list property yaml toml version: 2 profiles: default: backup: exclude: - '.*' - '~*' derived-profile: inherit: default backup: exclude...: '.git' source: '/myrepo' version = 2 [profiles.default.backup] exclude = ['.*', '~*'] [profiles.derived-profile] inherit = 'default' [profiles.derived-profile.backup] exclude__APPEND = '.git' source = '/myrepo' In the examples above, the final value of exclude in derived-profile is ['.*', '~*', '.git'].\nMixins Config format version 2 Feature preview, may change without notice\nMixins offer an easy way to share pieces of configuration between profiles without forcing a hierarchy of inheritance. Mixins can be used at every level within the profile configuration, support parametrisation (vars) and similar to hierarchic inheritance, they can prepend or append to list properties in addition to setting or replacing properties.\nMixins are declared in section mixins as named objects. The contents of these objects are merged into the profile configuration wherever a use property references (uses) the mixin. Configuration merging is following the same logic as used in inheritance and includes. When use references multiple mixins, the mixins apply in the order they are referenced and can override each other (mixins referenced later override what earlier mixins defined).\nConfiguration values inside a mixin may be parametrized with variables following the syntax ${variable} or $variable. Defaults for variables can be defined inside the mixin with default-vars and use can specify variables before merging the mixin. In difference to configuration variables that expand prior to parsing, mixin variables expand when the mixin is merged and for this reason the syntax differs.\nUnlike configuration variables and templates, mixins create parsed configuration structure not config markup that requires parsing. This allows mixins to be defined in one supported config format (yaml, toml, json) while being used in any other supported format when the configuration is split into multiple includes.\nyaml yaml (with vars) toml toml (with vars) version: 2 mixins: name-of-mixin: config-key: config-value profiles: profile: # set config-key to config-value in \"profile\" use: name-of-mixin version: 2 mixins: name-of-mixin: default-vars: WHAT: World parametrized-config-key: Hello $WHAT profiles: profile: # set parametrized-config-key to \"Hello World\" in \"profile\" use: name-of-mixin profile-non-default: # set parametrized-config-key to \"Hello Mixin\" in \"profile-non-default\" use: - name: name-of-mixin WHAT: \"Mixin\" version = 2 [mixins.name-of-mixin] config-key = \"config-value\" [profiles.profile] # set config-key to config-value in \"profile\" use = \"name-of-mixin\" version = 2 [mixins.name-of-mixin] parametrized-config-key = \"Hello $WHAT\" [mixins.name-of-mixin.default-vars] WHAT = \"World\" [profiles.profile] # set parametrized-config-key to \"Hello World\" in \"profile\" use = \"name-of-mixin\" [profiles.profile-non-default] # set parametrized-config-key to \"Hello Mixin\" in \"profile-non-default\" [[profiles.profile-non-default.use]] name = \"name-of-mixin\" WHAT = \"Mixin\" Named Mixin Declaration Every named mixin object below the mixins section has the following structure (all properties are optional):\nProperty Purpose default-vars: \u003cvariable-name\u003e Default value for variable $\u003cvariable-name\u003e \u003cconfig-key\u003e Set \u003cconfig-key\u003e when the mixin is used \u003cconfig-key\u003e: \u003csub-key\u003e Set \u003csub-key\u003e below \u003cconfig-key\u003e \u003cconfig-key\u003e... or \u003cconfig-key\u003e__APPEND Change \u003cconfig-key\u003e to a list and append to it ...\u003cconfig-key\u003e or \u003cconfig-key\u003e__PREPEND Change \u003cconfig-key\u003e to a list and prepend to it Mixin Usage The use property can be placed at any depth inside the profile configuration and is referencing a single mixin, a list of mixin names or a list of names and use-objects.\nEvery use object within the use list has the following structure:\nProperty Purpose name Name of the mixin to use and merge in place of the use property vars: \u003cvariable-name\u003e Set mixin variable $\u003cvariable-name\u003e \u003cvariable-name\u003e Set mixin variable $\u003cvariable-name\u003e (short syntax) Mixins are applied to the configuration after processing all includes but prior to profile inheritance which means the use properties are not inherited but the result of applying use is inherited instead. What is defined by a mixin in a parent profile can still be overridden by a definition in a derived profile, but derived profiles can not change which mixins apply to their parent.\nList properties that have been inherited from a parent can be modified (append/prepend) and replaced by a mixin.\nMixin Example yaml toml # file format version 2 version: 2 # mixin declarations mixins: alternate-repository: repository: local:/backup/alternate password-file: alternate-repo.key retain-last: default-vars: LAST: 30 retention: keep-last: $LAST keep-hourly: false keep-daily: false keep-weekly: false exclude-backup: exclude...: - \"/backup/*\" - \"*.bak*\" exclude-hidden: exclude...: - \"*.\" - \"*~\" # profile declarations profiles: select-some-and-retain-last-30: use: - alternate-repository - retain-last backup: use: - exclude-backup - exclude-hidden exclude: /tmp source: / select-all-and-retain-last-60: use: - alternate-repository - name: retain-last LAST: 60 backup: source: / # file format version 2 version = 2 # mixin declarations [mixins] [mixins.alternate-repository] repository = \"local:/backup/alternate\" password-file = \"alternate-repo.key\" [mixins.retain-last] [mixins.retain-last.default-vars] LAST = 30 [mixins.retain-last.retention] keep-last = \"$LAST\" keep-hourly = false keep-daily = false keep-weekly = false [mixins.exclude-backup] exclude__APPEND = [ \"/backup/*\", \"*.bak*\", ] [mixins.exclude-hidden] exclude__APPEND = [ \"*.\", \"*~\", ] # profile declarations [profiles] [profiles.select-some-and-retain-last-30] use = [\"alternate-repository\", \"retain-last\"] [profiles.some-keep-last-30.backup] use = [\"exclude-backup\", \"exclude-hidden\"] exclude = \"/tmp\" source = \"/\" [profiles.select-all-and-retain-last-60] [[profiles.select-all-and-retain-last-60.use]] name = \"alternate-repository\" [[profiles.select-all-and-retain-last-60.use]] name = \"retain-last\" LAST = 60 [profiles.select-all-and-retain-last-60.backup] source = \"/\" Common Flags Profiles in resticprofile configure commandline options (flags) for restic commands. While a profile has several predefined common properties (repository, password-file, …), any arbitrary common flags can be set directly inside the profile and will be inherited by all command sections of the profile.\nFor example, an arbitrary flag like insecure-tls that is not part of the profile config reference but valid for every restic command can be set at profile level and will be converted to a restic flag.\ntoml yaml hcl json [default] repository = \"rest:https://backup-host/my-repo\" insecure-tls = true [default.backup] source = \"/\" default: repository: rest:https://backup-host/my-repo insecure-tls: true backup: source: / default { repository = \"rest:https://backup-host/my-repo\" insecure-tls = true backup { source = \"/\" } } { \"default\": { \"repository\": \"rest:https://backup-host/my-repo\", \"insecure-tls\": true, \"backup\": { \"source\": \"/\" } } } Resulting in the following restic commandline:\n\u003e resticprofile --dry-run backup ... dry-run: /usr/local/bin/restic backup --insecure-tls --repo rest:https://backup-host/my-repo / \u003e resticprofile --dry-run prune ... dry-run: /usr/local/bin/restic prune --insecure-tls --repo rest:https://backup-host/my-repo Tip The option --dry-run prints restic commands to console or log file. To see what flags are effectively used with each restic command involved in backup, use resticprofile --dry-run [\u003cprofile-name\u003e.]backup.\n","description":"","tags":null,"title":"Inheritance","uri":"/configuration/inheritance/"},{"content":"Installation from source You can download the source code and compile it, it’s actually very easy! all you need to have on your machine is:\ngit (with git-bash on Windows) go compiler GNU Make which is installed by default on many unix boxes. On debian based distributions (Ubuntu included) the package is called build-essential. To compile from sources:\n$ git clone https://github.com/creativeprojects/resticprofile.git $ cd resticprofile $ make build Your compiled binary (resticprofile or resticprofile.exe) is available in the current folder.\nTo install the binary in your user path:\n$ make install ","description":"","tags":null,"title":"Source","uri":"/installation/source/"},{"content":"Special case for the copy command section The copy command needs two repositories (and quite likely 2 different set of keys). You can configure a copy section like this:\ntoml yaml hcl [default] initialize = false repository = \"/backup/original\" password-file = \"key\" [default.copy] initialize = true repository = \"/backup/copy\" password-file = \"other_key\" default: initialize: false repository: \"/backup/original\" password-file: key copy: initialize: true repository: \"/backup/copy\" password-file: other_key default { initialize = false repository = \"/backup/original\" password-file = \"key\" copy = { initialize = true repository = \"/backup/copy\" password-file = \"other_key\" } } You will note that the secondary repository doesn’t need to have a 2 behind its flags (repository2, password-file2, etc.). It’s because the flags are well separated in the configuration and there’s no ambiguity.\nInitialisation If you want to initialize the copy repository using the copy-chunker-params flag, it needs to be called initialize-copy-chunker-params instead. As such, this flag does not exist on the copy target which is why we need to prefix it.\ntoml yaml hcl [profile] initialize = false repository = \"/backup/original\" password-file = \"key\" [profile.copy] initialize = true initialize-copy-chunker-params = true repository = \"/backup/copy\" password-file = \"other_key\" profile: initialize: false repository: \"/backup/original\" password-file: key copy: initialize: true initialize-copy-chunker-params: true repository: \"/backup/copy\" password-file: other_key profile { initialize = false repository = \"/backup/original\" password-file = \"key\" copy = { initialize = true initialize-copy-chunker-params = true repository = \"/backup/copy\" password-file = \"other_key\" } } ","description":"","tags":["v0.18.0"],"title":"Copy command","uri":"/configuration/copy/"},{"content":"restic is already using a lock to avoid running some operations at the same time.\nSince resticprofile can run several commands in a profile, it could be better to run the whole batch in a lock so nobody can interfere in the meantime.\nFor this to happen you can specify a lock file in each profile:\ntoml yaml hcl json [src] lock = \"/tmp/resticprofile-profile-src.lock\" [src.backup] check-before = true exclude = [ \"/**/.git\" ] source = [ \"~/go\" ] [src.retention] after-backup = true before-backup = false compact = false keep-within = \"30d\" prune = true src: lock: \"/tmp/resticprofile-profile-src.lock\" backup: check-before: true exclude: - /**/.git source: - ~/go retention: after-backup: true before-backup: false compact: false keep-within: 30d prune: true \"src\" = { \"lock\" = \"/tmp/resticprofile-profile-src.lock\" \"backup\" = { \"check-before\" = true \"exclude\" = [\"/**/.git\"] \"source\" = [\"~/go\"] } \"retention\" = { \"after-backup\" = true \"before-backup\" = false \"compact\" = false \"keep-within\" = \"30d\" \"prune\" = true } } { \"src\": { \"lock\": \"/tmp/resticprofile-profile-src.lock\", \"backup\": { \"check-before\": true, \"exclude\": [ \"/**/.git\" ], \"source\": [ \"~/go\" ] }, \"retention\": { \"after-backup\": true, \"before-backup\": false, \"compact\": false, \"keep-within\": \"30d\", \"prune\": true } } } For this profile, a lock will be set using the file /tmp/resticprofile-profile-src.lock for the duration of the profile: check, backup and retention (via the forget command)\nPlease note restic locks and resticprofile locks are completely independent\nStale locks In some cases, resticprofile as well as restic may leave a lock behind if the process died (or the machine rebooted).\nFor that matter, if you add the flag force-inactive-lock to your profile, resticprofile will detect and remove stale locks:\nresticprofile locks: Check for the presence of a process with the PID indicated in the lockfile. If it can’t find any, it will try to delete the lock and continue the operation (locking again, running profile and so on…) restic locks: Evaluate if a restic command failed on acquiring a lock. If the lock is older than restic-stale-lock-age, invoke restic unlock and retry the command that failed (can be disabled by setting restic-stale-lock-age to 0, default is 2h). toml yaml hcl json [global] restic-stale-lock-age = \"2h\" [src] lock = \"/tmp/resticprofile-profile-src.lock\" force-inactive-lock = true global: restic-stale-lock-age: 2h src: lock: \"/tmp/resticprofile-profile-src.lock\" force-inactive-lock: true \"global\" = { \"restic-stale-lock-age\" = \"2h\" } \"src\" = { \"lock\" = \"/tmp/resticprofile-profile-src.lock\" \"force-inactive-lock\" = true } { \"global\": { \"restic-stale-lock-age\": \"2h\" }, \"src\": { \"lock\": \"/tmp/resticprofile-profile-src.lock\", \"force-inactive-lock\": true } } Lock wait By default, restic and resticprofile fail when a lock cannot be acquired as another process is currently holding it.\nDepending on the use case (e.g. scheduled backups), it may be more appropriate to wait on another process to finish instead of failing immediately.\nFor that matter, if you add the commandline flag --lock-wait or configure schedules with schedule-lock-wait, resticprofile will wait on other backup processes:\nresticprofile locks: Retry acquiring the lockfile until it either succeeds (when the other resticprofile process released the lock) or fail as the lock-wait duration has passed without success. restic locks: Evaluate if a restic command failed on acquiring a lock. If the lock is not considered stale, retry the restic command every restic-lock-retry-after (default 1 minute) until it acquired the lock, or fail as the lock-wait duration has passed. Note: The lock wait duration is cumulative. If various locks in one profile-run require lock wait, the total wait time may not exceed the duration that was specified.\nrestic lock management resticprofile can retry restic commands that fail on acquiring a lock and can also ask restic to unlock stale locks. The behaviour is controlled by 2 settings inside the global section:\ntoml yaml hcl json [global] # Retry a restic command that failed on acquiring a lock every minute # (at least), for up to the time specified in \"--lock-wait duration\". restic-lock-retry-after = \"1m\" # Ask restic to unlock a stale lock when its age is more than 2 hours # and the option \"force-inactive-lock\" is enabled in the profile. restic-stale-lock-age = \"2h\" global: # Retry a restic command that failed on acquiring a lock every minute # (at least), for up to the time specified in \"--lock-wait duration\". restic-lock-retry-after: 1m # Ask restic to unlock a stale lock when its age is more than 2 hours # and the option \"force-inactive-lock\" is enabled in the profile. restic-stale-lock-age: 2h \"global\" = { # Retry a restic command that failed on acquiring a lock every minute # (at least), for up to the time specified in \"--lock-wait duration\". \"restic-lock-retry-after\" = \"1m\" # Ask restic to unlock a stale lock when its age is more than 2 hours # and the option \"force-inactive-lock\" is enabled in the profile. \"restic-stale-lock-age\" = \"2h\" } { \"global\": { \"restic-lock-retry-after\": \"1m\", \"restic-stale-lock-age\": \"2h\" } } If restic lock management is not desired, it can be disabled by setting both values to 0.\n","description":"","tags":null,"title":"Locks","uri":"/usage/locks/"},{"content":"Scheduled backups resticprofile is capable of managing scheduled backups for you using:\nlaunchd on macOS X Task Scheduler on Windows systemd where available (Linux and other BSDs) crond on supported platforms (Linux and other BSDs) On unixes (except macOS) resticprofile is using systemd by default. crond can be used instead if configured in global scheduler parameter:\ntoml yaml hcl json [global] scheduler = \"crond\" --- global: scheduler: crond \"global\" = { \"scheduler\" = \"crond\" } { \"global\": { \"scheduler\": \"crond\" } } Each profile can be scheduled independently (groups are not available for scheduling yet - it will be available in version ‘2’ of the configuration file).\nThese 5 profile sections are accepting a schedule configuration:\nbackup check forget (version 0.11.0) prune (version 0.11.0) copy (version 0.16.0) which mean you can schedule backup, forget, prune, check and copy independently (I recommend to use a local lock in this case).\nretention schedule is deprecated Important: starting from version 0.11.0 the schedule of the retention section is deprecated: Use the forget section instead.\n","description":"","tags":null,"title":"Schedules","uri":"/schedules/"},{"content":"Run commands before, after success or after failure resticprofile has 2 places where you can run commands around restic:\ncommands that will run before and after every restic command (snapshots, backup, check, forget, prune, mount, etc.). These are placed at the root of each profile and are always considered. commands that will only run before and after specific restic commands. These are placed in supported sections of your profiles (supported are backup \u0026 copy). Here’s an example of all the external commands that you can run during the execution of a profile:\ntoml yaml hcl json [documents] inherit = \"default\" run-before = 'echo \"== run-before profile $PROFILE_NAME and command $PROFILE_COMMAND\"' run-after = 'echo \"== run-after profile $PROFILE_NAME and command $PROFILE_COMMAND\"' run-after-fail = 'echo \"== ERROR in profile $PROFILE_NAME command ${PROFILE_COMMAND}: $ERROR_MESSAGE\"' run-finally = 'echo \"== run-finally from profile $PROFILE_NAME after command $PROFILE_COMMAND\"' [documents.backup] run-before = 'echo \"=== run-before backup in profile $PROFILE_NAME\"' run-after = 'echo \"=== run-after backup in profile $PROFILE_NAME\"' run-after-fail = 'echo \"=== ERROR in backup for profile ${PROFILE_NAME}: $ERROR_MESSAGE\"' run-finally = 'echo \"=== run-finally after backup in profile $PROFILE_NAME\"' source = \"~/Documents\" documents: inherit: default run-before: 'echo \"== run-before profile $PROFILE_NAME and command $PROFILE_COMMAND\"' run-after: 'echo \"== run-after profile $PROFILE_NAME and command $PROFILE_COMMAND\"' run-after-fail: 'echo \"== ERROR in profile $PROFILE_NAME command ${PROFILE_COMMAND}: $ERROR_MESSAGE\"' run-finally: 'echo \"== run-finally from profile $PROFILE_NAME after command $PROFILE_COMMAND\"' backup: run-before: 'echo \"=== run-before backup in profile $PROFILE_NAME\"' run-after: 'echo \"=== run-after backup in profile $PROFILE_NAME\"' run-after-fail: 'echo \"=== ERROR in backup for profile ${PROFILE_NAME}: $ERROR_MESSAGE\"' run-finally: 'echo \"=== run-finally after backup in profile $PROFILE_NAME\"' source: ~/Documents documents { inherit = \"default\" run-before = \"echo \\\"== run-before profile $PROFILE_NAME and command $PROFILE_COMMAND\\\"\" run-after = \"echo \\\"== run-after profile $PROFILE_NAME and command $PROFILE_COMMAND\\\"\" run-after-fail = \"echo \\\"== ERROR in profile $PROFILE_NAME command ${PROFILE_COMMAND}: $ERROR_MESSAGE\\\"\" run-finally = \"echo \\\"== run-finally from profile $PROFILE_NAME after command $PROFILE_COMMAND\\\"\" backup = { run-before = \"echo \\\"=== run-before backup in profile $PROFILE_NAME\\\"\" run-after = \"echo \\\"=== run-after backup in profile $PROFILE_NAME\\\"\" run-after-fail = \"echo \\\"=== ERROR in backup for profile ${PROFILE_NAME}: $ERROR_MESSAGE\\\"\" run-finally = \"echo \\\"=== run-finally after backup in profile $PROFILE_NAME\\\"\" source = \"~/Documents\" } } { \"documents\": { \"inherit\": \"default\", \"run-before\": \"echo \\\"== run-before profile $PROFILE_NAME and command $PROFILE_COMMAND\\\"\", \"run-after\": \"echo \\\"== run-after profile $PROFILE_NAME and command $PROFILE_COMMAND\\\"\", \"run-after-fail\": \"echo \\\"== ERROR in profile $PROFILE_NAME command ${PROFILE_COMMAND}: $ERROR_MESSAGE\\\"\", \"run-finally\": \"echo \\\"== run-finally from profile $PROFILE_NAME after command $PROFILE_COMMAND\\\"\", \"backup\": { \"run-before\": \"echo \\\"=== run-before backup in profile $PROFILE_NAME\\\"\", \"run-after\": \"echo \\\"=== run-after backup in profile $PROFILE_NAME\\\"\", \"run-after-fail\": \"echo \\\"=== ERROR in backup for profile ${PROFILE_NAME}: $ERROR_MESSAGE\\\"\", \"run-finally\": \"echo \\\"=== run-finally after backup in profile $PROFILE_NAME\\\"\", \"source\": \"~/Documents\" } } } run-before, run-after, run-after-fail and run-finally can be a string, or an array of strings if you need to run more than one command\nA few environment variables will be set before running these commands:\nPROFILE_NAME PROFILE_COMMAND: backup, check, forget, etc. Additionally, for the run-after-fail commands, these environment variables will also be available:\nERROR_MESSAGE (and ERROR) containing the latest error message ERROR_COMMANDLINE containing the command line that failed ERROR_EXIT_CODE containing the exit code of the command line that failed ERROR_STDERR containing any message that the failed command sent to the standard error (stderr) The commands of run-finally get the environment of run-after-fail when run-before, run-after or restic failed.\nFailures to run commands in run-finally are logged but do not influence environment, return code nor running of further commands listed in run-finally. This makes it the perfect choice for custom cleanup tasks that must always run.\nAll other command errors (= non-zero return code from a command) will skip running further commands in the same list and/or abort the flow.\nOutput when running the example from above ➜ resticprofile documents.backup == run-before profile documents and command backup === run-before backup in profile documents ... processed 355 files, 11.722 MiB in 0:00 snapshot 3949d2fb saved ... === run-after backup in profile documents == run-after profile documents and command backup === run-finally after backup in profile documents == run-finally from profile documents after command backup Order of run-* during a backup The commands will be running in this order during a backup:\nrun-before from the profile - if error, go to run-after-fail run-before from the backup section - if error, go to run-after-fail from backup section run the restic backup (with check and retention if configured) - if error, go to run-after-fail from backup section run-after from the backup section - if error, go to run-after-fail from backup section run-after from the profile - if error, go to run-after-fail If error: run-after-fail from the backup section - if error, go to run-finally If error: run-after-fail from the profile - if error, go to run-finally run-finally from the backup section - if error, log and continue with next run-finally from the profile - if error, log and continue with next Maybe it’s easier to understand with a flow diagram:\nflowchart TB PRB('run-before' from profile) PRA('run-after' from profile) subgraph Backup [ ] BRB('run-before' from backup section) BRA('run-after' from backup section) RUN(run restic backup with check and/or retention if configured) end subgraph Failure [ ] BFAIL('run-after-fail' from backup section) PFAIL('run-after-fail' from profile) end subgraph Finally [ ] direction TB BRF('run-finally' from backup section) PRF('run-finally' from profile) BRF --\u003e PRF end PRB --\u003e|Error| PFAIL PRB --\u003e|Success| BRB BRB --\u003e|Error| BFAIL BRB --\u003e|Success| RUN RUN --\u003e|Error| BFAIL RUN --\u003e|Success| BRA BRA --\u003e|Error| BFAIL BRA --\u003e|Success| PRA BFAIL --\u003e|Error| Finally BFAIL --\u003e PFAIL PRA --\u003e|Error| PFAIL PRA --\u003e|Success| Finally PFAIL --\u003e Finally style Backup fill:#9990,stroke:#9990 style Failure fill:#9990,stroke:#9990 style Finally fill:#9991,stroke:#9994,stroke-width:4pxRun commands on stream errors In addition to hooks around profile and command execution, resticprofile allows to monitor the standard error stream of the current running command and trigger a custom hook when an output error line matches a regular expression pattern.\ntoml yaml hcl json [default] [[default.stream-error]] pattern = \".+ERROR.+\" run = 'echo \"Found ERROR at least 5 times in ${PROFILE_COMMAND}. Last matched line:\"; cat - ' max-runs = 0 min-matches = 5 default: stream-error: - pattern: \".+ERROR.+\" run: 'echo \"Found ERROR at least 5 times in ${PROFILE_COMMAND}. Last matched line:\"; cat - ' max-runs: 0 min-matches: 5 default { stream-error = { pattern = \".+ERROR.+\" run = \"echo \\\"Found ERROR at least 5 times in ${PROFILE_COMMAND}. Last matched line:\\\"; cat - \" max-runs = 0 min-matches = 5 } } { \"default\": { \"stream-error\": [ { \"pattern\": \".+ERROR.+\", \"run\": \"echo \\\"Found ERROR at least 5 times in ${PROFILE_COMMAND}. Last matched line:\\\"; cat - \", \"max-runs\": 0, \"min-matches\": 5 } ] } } The config structure stream-error can be defined multiple times within a profile and consists of the following properties:\npattern: a regular expression pattern matched against every line of stderr. run: the command to run when pattern is found in stderr. max-runs: maximum number of times that run is started for a single monitored command (or 0 for no limit). min-matches: minimum number of times that pattern must match before starting run. The run command inherits the environment of the monitored command on a pattern match, which always includes:\nPROFILE_NAME PROFILE_COMMAND: backup, check, forget, etc. Stdin of the run command is populated with the error output line that matched the pattern. Using \"cat -\" in run effectively prints the line that triggered the action.\nThe following example shows how this could have been used with restic to address check failures caused by over usage of /tmp/ (restic fixed this problem in 0.14.0):\ntoml yaml [default] [[default.stream-error]] pattern = \"/tmp/restic-check-cache.+no space left on device\" run = \"rm -Rf /tmp/restic-check-cache*\" [[default.stream-error]] pattern = \"mkdir /tmp/restic-check-cache.+no such file or directory\" run = \"cat - | cut -d : -f 2 - | grep -E 'mkdir /tmp[^ \\\\.]+$' | sed 's/mkdir/mkdir -p/' - | sh\" default: stream-error: - pattern: \"/tmp/restic-check-cache.+no space left on device\" run: \"rm -Rf /tmp/restic-check-cache*\" - pattern: \"mkdir /tmp/restic-check-cache.+no such file or directory\" run: \"cat - | cut -d : -f 2 - | grep -E 'mkdir /tmp[^ \\\\.]+$' | sed 's/mkdir/mkdir -p/' - | sh\" ","description":"","tags":null,"title":"Command Hooks","uri":"/configuration/run_hooks/"},{"content":"Once installed, you can easily upgrade resticprofile to the latest release using this command:\n$ resticprofile self-update Please note on versions before 0.10.0, there was an issue with self-updating from linux with ARM processors (like a raspberry pi). This was fixed in version 0.10.0\nresticprofile will check for a new version from GitHub releases and asks you if you want to update to the new version. If you add the flag -q or --quiet to the command line, it will update automatically without asking.\n$ resticprofile --quiet self-update and since version 0.11.0:\n$ resticprofile self-update --quiet ","description":"","tags":null,"title":"Upgrade","uri":"/installation/upgrade/"},{"content":"resticprofile accepts these internal commands:\nschedule unschedule status All internal commands either operate on the profile selected by --name, on the profiles selected by a group, or on all profiles when the flag --all is passed.\nExamples:\n$ resticprofile --name profile schedule $ resticprofile --name group schedule $ resticprofile schedule --all Please note, schedules are always independent of each other no matter whether they have been created with --all, by group or from a single profile.\nschedule command Install all the schedules defined on the selected profile or profiles.\nPlease note on systemd, we need to start the timer once to enable it. Otherwise it will only be enabled on the next reboot. If you dont’ want to start (and enable) it now, pass the --no-start flag to the command line.\nAlso if you use the --all flag to schedule all your profiles at once, make sure you use only the user mode or system mode. A combination of both would not schedule the tasks properly:\nif the user is not privileged, only the user tasks will be scheduled if the user is privileged, all schedule will end-up as a system schedule unschedule command Remove all the schedules defined on the selected profile or profiles.\nstatus command Print the status on all the installed schedules of the selected profile or profiles.\nThe display of the status command will be OS dependant. Please see the examples below on which output you can expect from it.\n","description":"","tags":null,"title":"Schedule Commands","uri":"/schedules/commands/"},{"content":"Send HTTP messages before and after a job As well as being able to run shell commands, you can now send HTTP messages before, after (success or failure) running a restic command.\nThe sections that allow sending HTTP hooks are:\nbackup copy check forget prune Tip You might notice that’s the same sections that can also be scheduled\nEach of these commands can send 4 different types of hooks:\nsend-before send-after send-after-fail send-finally The configuration is the same for each of these 4 types of hooks:\nName Required Default Notes url Yes None URL of your Webhook method No GET This is the HTTP method (GET, POST, HEAD, etc.) skip-tls-verification No False This is not recommended: Use only if you’re using your own server with a self-signed certificate headers No User-Agent set to resticprofile This is a subsection with a list of name and value body No Empty Used to send data to the Webhook (POST, PUT, PATCH) body-template No None Template file to generate the body (in go template format) Example sending monitoring information to healthchecks.io: toml yaml hcl json [profile] inherit = \"default\" [profile.backup] source = \"/source\" exclude = [ \"/**/.git/\" ] schedule = [ \"*:00,30\" ] schedule-permission = \"user\" # you can have more than one target [[profile.backup.send-before]] method = \"HEAD\" url = \"https://hc-ping.com/831e288e-1293-46f8-ac31-70ea7f875650/start\" [[profile.backup.send-before]] method = \"HEAD\" url = \"https://httpstat.us/400\" # you can have more than one target [[profile.backup.send-after]] method = \"HEAD\" url = \"https://hc-ping.com/831e288e-1293-46f8-ac31-70ea7f875650\" [[profile.backup.send-after]] method = \"HEAD\" url = \"https://httpstat.us/500\" [profile.backup.send-after-fail] method = \"POST\" url = \"https://hc-ping.com/831e288e-1293-46f8-ac31-70ea7f875650/fail\" body = \"${ERROR}\\n\\n${ERROR_STDERR}\" [[profile.backup.send-after-fail.headers]] name = \"Content-Type\" value = \"text/plain; charset=UTF-8\" [profile.check] schedule = [ \"*:15\" ] [profile.check.send-before] method = \"HEAD\" url = \"https://hc-ping.com/e0f62e41-b75f-450f-8cdd-7f25e466d2dc/start\" [profile.check.send-after] method = \"HEAD\" url = \"https://hc-ping.com/e0f62e41-b75f-450f-8cdd-7f25e466d2dc\" [profile.retention] after-backup = true profile: inherit: default backup: source: \"/source\" exclude: - \"/**/.git/\" schedule: - \"*:00,30\" schedule-permission: user # you can have more than one target send-before: - method: HEAD url: https://hc-ping.com/831e288e-1293-46f8-ac31-70ea7f875650/start - method: HEAD url: https://httpstat.us/400 # you can have more than one target send-after: - method: HEAD url: https://hc-ping.com/831e288e-1293-46f8-ac31-70ea7f875650 - method: HEAD url: https://httpstat.us/500 send-after-fail: method: POST url: https://hc-ping.com/831e288e-1293-46f8-ac31-70ea7f875650/fail body: \"${ERROR}\\n\\n${ERROR_STDERR}\" headers: - name: Content-Type value: \"text/plain; charset=UTF-8\" check: schedule: - \"*:15\" send-before: method: HEAD url: https://hc-ping.com/e0f62e41-b75f-450f-8cdd-7f25e466d2dc/start send-after: method: HEAD url: https://hc-ping.com/e0f62e41-b75f-450f-8cdd-7f25e466d2dc retention: after-backup: true \"profile\" { \"inherit\" = \"default\" \"backup\" = { \"source\" = \"/source\" \"exclude\" = [\"/**/.git/\"] \"schedule\" = [\"*:00,30\"] \"schedule-permission\" = \"user\" \"send-before\" = { \"method\" = \"HEAD\" \"url\" = \"https://hc-ping.com/831e288e-1293-46f8-ac31-70ea7f875650/start\" } \"send-before\" = { \"method\" = \"HEAD\" \"url\" = \"https://httpstat.us/400\" } \"send-after\" = { \"method\" = \"HEAD\" \"url\" = \"https://hc-ping.com/831e288e-1293-46f8-ac31-70ea7f875650\" } \"send-after\" = { \"method\" = \"HEAD\" \"url\" = \"https://httpstat.us/500\" } \"send-after-fail\" = { \"method\" = \"POST\" \"url\" = \"https://hc-ping.com/831e288e-1293-46f8-ac31-70ea7f875650/fail\" \"body\" = \"${ERROR}\\n\\n${ERROR_STDERR}\" \"headers\" = { \"name\" = \"Content-Type\" \"value\" = \"text/plain; charset=UTF-8\" } } } \"check\" = { \"schedule\" = [\"*:15\"] \"send-before\" = { \"method\" = \"HEAD\" \"url\" = \"https://hc-ping.com/e0f62e41-b75f-450f-8cdd-7f25e466d2dc/start\" } \"send-after\" = { \"method\" = \"HEAD\" \"url\" = \"https://hc-ping.com/e0f62e41-b75f-450f-8cdd-7f25e466d2dc\" } } \"retention\" = { \"after-backup\" = true } } { \"profile\": { \"inherit\": \"default\", \"backup\": { \"source\": \"/source\", \"exclude\": [ \"/**/.git/\" ], \"schedule\": [ \"*:00,30\" ], \"schedule-permission\": \"user\", \"send-before\": [ { \"method\": \"HEAD\", \"url\": \"https://hc-ping.com/831e288e-1293-46f8-ac31-70ea7f875650/start\" }, { \"method\": \"HEAD\", \"url\": \"https://httpstat.us/400\" } ], \"send-after\": [ { \"method\": \"HEAD\", \"url\": \"https://hc-ping.com/831e288e-1293-46f8-ac31-70ea7f875650\" }, { \"method\": \"HEAD\", \"url\": \"https://httpstat.us/500\" } ], \"send-after-fail\": { \"method\": \"POST\", \"url\": \"https://hc-ping.com/831e288e-1293-46f8-ac31-70ea7f875650/fail\", \"body\": \"${ERROR}\\n\\n${ERROR_STDERR}\", \"headers\": [ { \"name\": \"Content-Type\", \"value\": \"text/plain; charset=UTF-8\" } ] } }, \"check\": { \"schedule\": [ \"*:15\" ], \"send-before\": { \"method\": \"HEAD\", \"url\": \"https://hc-ping.com/e0f62e41-b75f-450f-8cdd-7f25e466d2dc/start\" }, \"send-after\": { \"method\": \"HEAD\", \"url\": \"https://hc-ping.com/e0f62e41-b75f-450f-8cdd-7f25e466d2dc\" } }, \"retention\": { \"after-backup\": true } } } A few environment variables will be available to construct the url and the body:\nPROFILE_NAME PROFILE_COMMAND: backup, check, forget, etc. Additionally, for the send-after-fail hooks, these environment variables will be available:\nERROR containing the latest error message ERROR_COMMANDLINE containing the command line that failed ERROR_EXIT_CODE containing the exit code of the command line that failed ERROR_STDERR containing any message that the failed command sent to the standard error (stderr) The send-finally hooks are also getting the environment of send-after-fail when any previous operation has failed (except any send operation).\nFailures in any send-* are logged but do not influence environment or return code.\norder of send-* Here’s the flow of HTTP hooks:\ngraph TD SB('send-before') --\u003e RUN RUN(run restic command, or group of commands) RUN --\u003e|Success| SA RUN --\u003e|Error| SAF SA('send-after') --\u003e SF SAF('send-after-fail') --\u003e SF SF('send-finally')body-template You can use a standard go template to build the webhook body. It has to be defined in a separate file (otherwise it would clash with the configuration as a go template itself).\nThe object passed as an argument to the template is:\nProfileName string ProfileCommand string Error ErrorContext Stdout string The type ErrorContext is available after an error occurred (otherwise all fields are blank):\nMessage string CommandLine string ExitCode string Stderr string Here’s an example of a body file:\n{ \"profileName\": \"{{ .ProfileName }}\", \"profileCommand\": \"{{ .ProfileCommand }}\", \"exitCode\": \"{{ .Error.ExitCode }}\" } The field exitCode will be blank if no error occured.\nAnd here’s an example of a configuration using a body template:\ntoml yaml hcl json [profile] [profile.backup] source = \"/source\" [profile.backup.send-finally] method = \"POST\" url = \"https://my/monitoring.example.com/\" body-template = \"body-template.json\" [[profile.backup.send-finally.headers]] name = \"Content-Type\" value = \"application/json\" profile: backup: source: \"/source\" send-finally: method: POST url: https://my/monitoring.example.com/ body-template: body-template.json headers: - name: Content-Type value: \"application/json\" \"profile\" { \"backup\" = { \"source\" = \"/source\" \"send-finally\" = { \"method\" = \"POST\" \"url\" = \"https://my/monitoring.example.com/\" \"body-template\" = \"body-template.json\" \"headers\" = { \"name\" = \"Content-Type\" \"value\" = \"application/json\" } } } } { \"profile\": { \"backup\": { \"source\": \"/source\", \"send-finally\": { \"method\": \"POST\", \"url\": \"https://my/monitoring.example.com/\", \"body-template\": \"body-template.json\", \"headers\": [ { \"name\": \"Content-Type\", \"value\": \"application/json\" } ] } } } } CA certificates If your monitoring system is using self-signed certificates, you can import them in resticprofile (and you don’t need to rely on the skip-tls-verification flag)\nThe parameter is in the global section and is called ca-certificates: it contains a list of certificate files (PEM).\ntimeout The default timeout for all HTTP requests is 30 seconds.\nYou can change the default timeout in the global section with a parameter called send-timeout.\nThe format is like:\n30s 2m 1m20s global configuration example toml yaml hcl json [global] send-timeout = \"10s\" ca-certificates = [ \"ca-chain.cert.pem\" ] global: send-timeout: 10s ca-certificates: - ca-chain.cert.pem global { send-timeout = \"10s\" ca-certificates = \"ca-chain.cert.pem\" } { \"global\": { \"send-timeout\": \"10s\", \"ca-certificates\": [ \"ca-chain.cert.pem\" ] } } ","description":"","tags":["v0.18.0"],"title":"HTTP Hooks","uri":"/configuration/http_hooks/"},{"content":"Variable expansion in configuration file You might want to reuse the same configuration (or bits of it) on different environments. One way of doing it is to create a generic configuration where specific bits will be replaced by a variable.\nPre-defined variables The syntax for using a pre-defined variable is:\n{{ .VariableName }} The list of pre-defined variables is:\nVariable Type Description .Profile.Name string Profile name .Now time.Time object Now object: see explanation bellow .CurrentDir string Current directory at the time resticprofile was started .ConfigDir string Directory where the configuration was loaded from .TempDir string OS temporary directory (might not exist) .BinaryDir string Directory where resticprofile was started from (added in v0.18.0) .Hostname string Host name .Env.{NAME} string Environment variable ${NAME} Environment variables are accessible using .Env. followed by the name of the environment variable.\nExample: {{ .Env.HOME }} will be replaced by your home directory (on unixes). The equivalent on Windows would be {{ .Env.USERPROFILE }}.\nFor variables that are objects, you can call all public field or method on it. For example, for the variable .Now you can use:\n.Now.Day .Now.Format layout .Now.Hour .Now.Minute .Now.Month .Now.Second .Now.UTC .Now.Unix .Now.Weekday .Now.Year .Now.YearDay Example You can use a combination of inheritance and variables in the resticprofile configuration file like so:\ntoml yaml hcl json [generic] password-file = \"{{ .ConfigDir }}/{{ .Profile.Name }}-key\" repository = \"/backup/{{ .Now.Weekday }}\" lock = \"$HOME/resticprofile-profile-{{ .Profile.Name }}.lock\" initialize = true [generic.backup] check-before = true exclude = [ \"/**/.git\" ] exclude-caches = true one-file-system = false run-after = \"echo All Done!\" run-before = [ \"echo Hello {{ .Env.LOGNAME }}\", \"echo current dir: {{ .CurrentDir }}\", \"echo config dir: {{ .ConfigDir }}\", \"echo profile started at {{ .Now.Format \"02 Jan 06 15:04 MST\" }}\" ] tag = [ \"{{ .Profile.Name }}\", \"dev\" ] [generic.retention] after-backup = true before-backup = false compact = false keep-within = \"30d\" prune = true tag = [ \"{{ .Profile.Name }}\", \"dev\" ] [generic.snapshots] tag = [ \"{{ .Profile.Name }}\", \"dev\" ] [src] inherit = \"generic\" [src.backup] source = [ \"{{ .Env.HOME }}/go/src\" ] [src.check] # Weekday is an integer from 0 to 6 # Nice trick to add 1 to an integer: https://stackoverflow.com/a/72465098 read-data-subset = \"{{ len (printf \"a%*s\" .Now.Weekday \"\") }}/7\" --- generic: password-file: \"{{ .ConfigDir }}/{{ .Profile.Name }}-key\" repository: \"/backup/{{ .Now.Weekday }}\" lock: \"$HOME/resticprofile-profile-{{ .Profile.Name }}.lock\" initialize: true backup: check-before: true exclude: - /**/.git exclude-caches: true one-file-system: false run-after: echo All Done! run-before: - \"echo Hello {{ .Env.LOGNAME }}\" - \"echo current dir: {{ .CurrentDir }}\" - \"echo config dir: {{ .ConfigDir }}\" - \"echo profile started at {{ .Now.Format \"02 Jan 06 15:04 MST\" }}\" tag: - \"{{ .Profile.Name }}\" - dev retention: after-backup: true before-backup: false compact: false keep-within: 30d prune: true tag: - \"{{ .Profile.Name }}\" - dev snapshots: tag: - \"{{ .Profile.Name }}\" - dev src: inherit: generic backup: source: - \"{{ .Env.HOME }}/go/src\" check: # Weekday is an integer from 0 to 6 # Nice trick to add 1 to an integer: https://stackoverflow.com/a/72465098 read-data-subset: \"{{ len (printf \"a%*s\" .Now.Weekday \"\") }}/7\" \"generic\" = { \"password-file\" = \"{{ .ConfigDir }}/{{ .Profile.Name }}-key\" \"repository\" = \"/backup/{{ .Now.Weekday }}\" \"lock\" = \"$HOME/resticprofile-profile-{{ .Profile.Name }}.lock\" \"initialize\" = true \"backup\" = { \"check-before\" = true \"exclude\" = [\"/**/.git\"] \"exclude-caches\" = true \"one-file-system\" = false \"run-after\" = \"echo All Done!\" \"run-before\" = [\"echo Hello {{ .Env.LOGNAME }}\", \"echo current dir: {{ .CurrentDir }}\", \"echo config dir: {{ .ConfigDir }}\", \"echo profile started at {{ .Now.Format \"02 Jan 06 15:04 MST\" }}\"] \"tag\" = [\"{{ .Profile.Name }}\", \"dev\"] } \"retention\" = { \"after-backup\" = true \"before-backup\" = false \"compact\" = false \"keep-within\" = \"30d\" \"prune\" = true \"tag\" = [\"{{ .Profile.Name }}\", \"dev\"] } \"snapshots\" = { \"tag\" = [\"{{ .Profile.Name }}\", \"dev\"] } } \"src\" = { \"inherit\" = \"generic\" \"backup\" = { \"source\" = [\"{{ .Env.HOME }}/go/src\"] } \"check\" = { # Weekday is an integer from 0 to 6 # Nice trick to add 1 to an integer: https://stackoverflow.com/a/72465098 \"read-data-subset\" = \"{{ len (printf \"a%*s\" .Now.Weekday \"\") }}/7\" } } { \"generic\": { \"password-file\": \"{{ .ConfigDir }}/{{ .Profile.Name }}-key\", \"repository\": \"/backup/{{ .Now.Weekday }}\", \"lock\": \"$HOME/resticprofile-profile-{{ .Profile.Name }}.lock\", \"initialize\": true, \"backup\": { \"check-before\": true, \"exclude\": [ \"/**/.git\" ], \"exclude-caches\": true, \"one-file-system\": false, \"run-after\": \"echo All Done!\", \"run-before\": [ \"echo Hello {{ .Env.LOGNAME }}\", \"echo current dir: {{ .CurrentDir }}\", \"echo config dir: {{ .ConfigDir }}\", \"echo profile started at {{ .Now.Format \"02 Jan 06 15:04 MST\" }}\" ], \"tag\": [ \"{{ .Profile.Name }}\", \"dev\" ] }, \"retention\": { \"after-backup\": true, \"before-backup\": false, \"compact\": false, \"keep-within\": \"30d\", \"prune\": true, \"tag\": [ \"{{ .Profile.Name }}\", \"dev\" ] }, \"snapshots\": { \"tag\": [ \"{{ .Profile.Name }}\", \"dev\" ] } }, \"src\": { \"inherit\": \"generic\", \"backup\": { \"source\": [ \"{{ .Env.HOME }}/go/src\" ] }, \"check\": { \"read-data-subset\": \"{{ len (printf \"a%*s\" .Now.Weekday \"\") }}/7\" } } } This is obviously not a real world example, but it shows many of the possibilities you can do with variable expansion.\nTo check the generated configuration, you can use the resticprofile show command:\n% resticprofile -c examples/template.yaml -n src show global: default-command: snapshots restic-lock-retry-after: 1m0s restic-stale-lock-age: 2h0m0s min-memory: 100 send-timeout: 30s profile src: repository: /backup/Monday password-file: /Users/CP/go/src/resticprofile/examples/src-key initialize: true lock: /Users/CP/resticprofile-profile-src.lock backup: check-before: true run-before: echo Hello CP echo current dir: /Users/CP/go/src/resticprofile echo config dir: /Users/CP/go/src/resticprofile/examples echo profile started at 05 Sep 22 17:39 BST run-after: echo All Done! source: /Users/CP/go/src exclude: /**/.git exclude-caches: true tag: src dev retention: after-backup: true keep-within: 30d path: /Users/CP/go/src prune: true tag: src dev check: read-data-subset: 2/7 snapshots: tag: src dev As you can see, the src profile inherited from the generic profile. The tags {{ .Profile.Name }} got replaced by the name of the current profile src. Now you can reuse the same generic configuration in another profile.\nYou might have noticed the read-data-subset in the check section which will read a seventh of the data every day, meaning the whole repository data will be checked over a week. You can find more information about this trick.\nHand-made variables But you can also define variables yourself. Hand-made variables starts with a $ (PHP anyone?) and get declared and assigned with the := operator (Pascal anyone?). Here’s an example:\n# declare and assign a value to the variable {{ $name := \"something\" }} # put the content of the variable here tag: \"{{ $name }}\" Example Here’s an example of a configuration on Linux where I use a variable $mountpoint set to a USB drive mount point:\ntoml yaml hcl json [global] priority = \"low\" {{ $mountpoint := \"/mnt/external\" }} [default] repository = \"local:{{ $mountpoint }}/backup\" password-file = \"key\" run-before = \"mount {{ $mountpoint }}\" run-after = \"umount {{ $mountpoint }}\" run-after-fail = \"umount {{ $mountpoint }}\" [default.backup] exclude-caches = true source = [ \"/etc\", \"/var/lib/libvirt\" ] check-after = true global: priority: low {{ $mountpoint := \"/mnt/external\" }} default: repository: 'local:{{ $mountpoint }}/backup' password-file: key run-before: 'mount {{ $mountpoint }}' run-after: 'umount {{ $mountpoint }}' run-after-fail: 'umount {{ $mountpoint }}' backup: exclude-caches: true source: - /etc - /var/lib/libvirt check-after: true global { priority = \"low\" } {{ $mountpoint := \"/mnt/external\" }} default { repository = \"local:{{ $mountpoint }}/backup\" password-file = \"key\" run-before = \"mount {{ $mountpoint }}\" run-after = \"umount {{ $mountpoint }}\" run-after-fail = \"umount {{ $mountpoint }}\" backup { exclude-caches = true source = [ \"/etc\", \"/var/lib/libvirt\" ] check-after = true } } {{ $mountpoint := \"/mnt/external\" }} { \"global\": { \"priority\": \"low\" }, \"default\": { \"repository\": \"local:{{ $mountpoint }}/backup\", \"password-file\": \"key\", \"run-before\": \"mount {{ $mountpoint }}\", \"run-after\": \"umount {{ $mountpoint }}\", \"run-after-fail\": \"umount {{ $mountpoint }}\", \"backup\": { \"exclude-caches\": true, \"source\": [ \"/etc\", \"/var/lib/libvirt\" ], \"check-after\": true } } } ","description":"","tags":null,"title":"Variables","uri":"/configuration/variables/"},{"content":"Templates are a great way to compose configuration profiles.\nPlease keep in mind that yaml files are sensitive to the number of spaces. Also if you declare a block already declared, it overrides the previous declaration (instead of merging them).\nFor that matter, configuration templates are probably more useful if you use the toml or hcl configuration format.\nHere’s a simple example\n{{ define \"hello\" }} hello = \"world\" {{ end }} To use the content of this template anywhere in your configuration, simply call it:\n{{ template \"hello\" . }} Note the dot after the name: it’s used to pass the variables to the template. Without it, all your variables (like .Profile.Name) would display \u003cno value\u003e.\nHere’s a working example:\ntoml yaml hcl json # # This is an example of configuration using nested templates # # nested template declarations # this template declaration won't appear here in the configuration file # it will only appear when called by {{ template \"backup_root\" . }} {{ define \"backup_root\" }} exclude = [ \"{{ .Profile.Name }}-backup.log\" ] exclude-file = [ \"{{ .ConfigDir }}/root-excludes\", \"{{ .ConfigDir }}/excludes\" ] exclude-caches = true tag = [ \"root\" ] source = [ \"/\" ] {{ end }} [global] priority = \"low\" ionice = true ionice-class = 2 ionice-level = 6 [base] status-file = \"{{ .Env.HOME }}/status.json\" [base.snapshots] host = true [base.retention] host = true after-backup = true keep-within = \"30d\" ######################################################### [nas] inherit = \"base\" repository = \"rest:http://{{ .Env.BACKUP_REST_USER }}:{{ .Env.BACKUP_REST_PASSWORD }}@nas:8000/root\" password-file = \"nas-key\" # root [nas-root] inherit = \"nas\" [nas-root.backup] # get the content of \"backup_root\" defined at the top {{ template \"backup_root\" . }} schedule = \"01:47\" schedule-permission = \"system\" schedule-log = \"{{ .Profile.Name }}-backup.log\" ######################################################### [azure] inherit = \"base\" repository = \"azure:restic:/\" password-file = \"azure-key\" lock = \"/tmp/resticprofile-azure.lock\" [azure.backup] schedule-permission = \"system\" schedule-log = \"{{ .Profile.Name }}-backup.log\" # root [azure-root] inherit = \"azure\" [azure-root.backup] # get the content of \"backup_root\" defined at the top {{ template \"backup_root\" . }} schedule = \"03:58\" # mysql [azure-mysql] inherit = \"azure\" [azure-mysql.backup] tag = [ \"mysql\" ] run-before = [ \"rm -f /tmp/mysqldumpall.sql\", \"mysqldump -u{{ .Env.MYSQL_BACKUP_USER }} -p{{ .Env.MYSQL_BACKUP_PASSWORD }} --all-databases \u003e /tmp/mysqldumpall.sql\" ] source = \"/tmp/mysqldumpall.sql\" run-after = [ \"rm -f /tmp/mysqldumpall.sql\" ] schedule = \"03:18\" # # This is an example of configuration using nested templates # # nested template declarations # this template declaration won't appear here in the configuration file # it will only appear when called by {{ template \"backup_root\" . }} {{ define \"backup_root\" }} exclude: - '{{ .Profile.Name }}-backup.log' exclude-file: - '{{ .ConfigDir }}/root-excludes' - '{{ .ConfigDir }}/excludes' exclude-caches: true tag: - root source: - / {{ end }} global: priority: low ionice: true ionice-class: 2 ionice-level: 6 base: status-file: '{{ .Env.HOME }}/status.json' snapshots: host: true retention: host: true after-backup: true keep-within: 30d nas: inherit: base repository: \u003e- rest:http://{{ .Env.BACKUP_REST_USER }}:{{ .Env.BACKUP_REST_PASSWORD }}@nas:8000/root password-file: nas-key nas-root: inherit: nas backup: # get the content of \"backup_root\" defined at the top {{ template \"backup_root\" . }} schedule: '01:47' schedule-permission: system schedule-log: '{{ .Profile.Name }}-backup.log' azure: inherit: base repository: 'azure:restic:/' password-file: azure-key lock: /tmp/resticprofile-azure.lock backup: schedule-permission: system schedule-log: '{{ .Profile.Name }}-backup.log' azure-root: inherit: azure backup: # get the content of \"backup_root\" defined at the top {{ template \"backup_root\" . }} schedule: '03:58' azure-mysql: inherit: azure backup: tag: - mysql run-before: - rm -f /tmp/mysqldumpall.sql - \u003e- mysqldump -u{{ .Env.MYSQL_BACKUP_USER }} -p{{ .Env.MYSQL_BACKUP_PASSWORD }} --all-databases \u003e /tmp/mysqldumpall.sql source: /tmp/mysqldumpall.sql run-after: - rm -f /tmp/mysqldumpall.sql schedule: '03:18' # # This is an example of configuration using nested templates # # nested template declarations # this template declaration won't appear here in the configuration file # it will only appear when called by {{ template \"backup_root\" . }} {{ define \"backup_root\" }} \"exclude\" = [\"{{ .Profile.Name }}-backup.log\"] \"exclude-file\" = [\"{{ .ConfigDir }}/root-excludes\", \"{{ .ConfigDir }}/excludes\"] \"exclude-caches\" = true \"tag\" = [\"root\"] \"source\" = [\"/\"] {{end}} \"global\" = { \"priority\" = \"low\" \"ionice\" = true \"ionice-class\" = 2 \"ionice-level\" = 6 } \"base\" = { \"status-file\" = \"{{ .Env.HOME }}/status.json\" \"snapshots\" = { \"host\" = true } \"retention\" = { \"host\" = true \"after-backup\" = true \"keep-within\" = \"30d\" } } \"nas\" = { \"inherit\" = \"base\" \"repository\" = \"rest:http://{{ .Env.BACKUP_REST_USER }}:{{ .Env.BACKUP_REST_PASSWORD }}@nas:8000/root\" \"password-file\" = \"nas-key\" } \"nas-root\" = { \"inherit\" = \"nas\" \"backup\" = { # get the content of \"backup_root\" defined at the top {{ template \"backup_root\" . }} \"schedule\" = \"01:47\" \"schedule-permission\" = \"system\" \"schedule-log\" = \"{{ .Profile.Name }}-backup.log\" } } \"azure\" = { \"inherit\" = \"base\" \"repository\" = \"azure:restic:/\" \"password-file\" = \"azure-key\" \"lock\" = \"/tmp/resticprofile-azure.lock\" \"backup\" = { \"schedule-permission\" = \"system\" \"schedule-log\" = \"{{ .Profile.Name }}-backup.log\" } } \"azure-root\" = { \"inherit\" = \"azure\" \"backup\" = { # get the content of \"backup_root\" defined at the top {{ template \"backup_root\" . }} \"schedule\" = \"03:58\" } } \"azure-mysql\" = { \"inherit\" = \"azure\" \"backup\" = { \"tag\" = [\"mysql\"] \"run-before\" = [\"rm -f /tmp/mysqldumpall.sql\", \"mysqldump -u{{ .Env.MYSQL_BACKUP_USER }} -p{{ .Env.MYSQL_BACKUP_PASSWORD }} --all-databases \u003e /tmp/mysqldumpall.sql\"] \"source\" = \"/tmp/mysqldumpall.sql\" \"run-after\" = [\"rm -f /tmp/mysqldumpall.sql\"] \"schedule\" = \"03:18\" } } {{ define \"backup_root\" }} \"exclude\": [ \"{{ .Profile.Name }}-backup.log\" ], \"exclude-file\": [ \"{{ .ConfigDir }}/root-excludes\", \"{{ .ConfigDir }}/excludes\" ], \"exclude-caches\": true, \"tag\": [ \"root\" ], \"source\": [ \"/\" ], {{ end }} { \"global\": { \"priority\": \"low\", \"ionice\": true, \"ionice-class\": 2, \"ionice-level\": 6 }, \"base\": { \"status-file\": \"{{ .Env.HOME }}/status.json\", \"snapshots\": { \"host\": true }, \"retention\": { \"host\": true, \"after-backup\": true, \"keep-within\": \"30d\" } }, \"nas\": { \"inherit\": \"base\", \"repository\": \"rest:http://{{ .Env.BACKUP_REST_USER }}:{{ .Env.BACKUP_REST_PASSWORD }}@nas:8000/root\", \"password-file\": \"nas-key\" }, \"nas-root\": { \"inherit\": \"nas\", \"backup\": { {{ template \"backup_root\" . }} \"schedule\": \"01:47\", \"schedule-permission\": \"system\", \"schedule-log\": \"{{ .Profile.Name }}-backup.log\" } }, \"azure\": { \"inherit\": \"base\", \"repository\": \"azure:restic:/\", \"password-file\": \"azure-key\", \"lock\": \"/tmp/resticprofile-azure.lock\", \"backup\": { \"schedule-permission\": \"system\", \"schedule-log\": \"{{ .Profile.Name }}-backup.log\" } }, \"azure-root\": { \"inherit\": \"azure\", \"backup\": { {{ template \"backup_root\" . }} \"schedule\": \"03:58\" } }, \"azure-mysql\": { \"inherit\": \"azure\", \"backup\": { \"tag\": [ \"mysql\" ], \"run-before\": [ \"rm -f /tmp/mysqldumpall.sql\", \"mysqldump -u{{ .Env.MYSQL_BACKUP_USER }} -p{{ .Env.MYSQL_BACKUP_PASSWORD }} --all-databases \u003e /tmp/mysqldumpall.sql\" ], \"source\": \"/tmp/mysqldumpall.sql\", \"run-after\": [ \"rm -f /tmp/mysqldumpall.sql\" ], \"schedule\": \"03:18\" } } } Debugging your template and variable expansion If for some reason you don’t understand why resticprofile is not loading your configuration file, you can display the generated configuration after executing the template (and replacing the variables and everything) using the --trace flag. We will see it in action in a moment.\nLimitations of using templates There’s something to be aware of when dealing with templates: at the time the template is compiled, it has no knowledge of what the end configuration should look like: it has no knowledge of profiles for example. Here is a non-working example of what I mean:\n{{ define \"retention\" }} [{{ .Profile.Name }}.retention] after-backup = true before-backup = false compact = false keep-within = \"30d\" prune = true {{ end }} [src] password-file = \"{{ .ConfigDir }}/{{ .Profile.Name }}-key\" repository = \"/backup/{{ .Now.Weekday }}\" lock = \"$HOME/resticprofile-profile-{{ .Profile.Name }}.lock\" initialize = true [src.backup] source = \"{{ .Env.HOME }}/go/src\" check-before = true exclude = [\"/**/.git\"] exclude-caches = true tag = [\"{{ .Profile.Name }}\", \"dev\"] {{ template \"retention\" . }} [src.snapshots] tag = [\"{{ .Profile.Name }}\", \"dev\"] [other] password-file = \"{{ .ConfigDir }}/{{ .Profile.Name }}-key\" repository = \"/backup/{{ .Now.Weekday }}\" lock = \"$HOME/resticprofile-profile-{{ .Profile.Name }}.lock\" initialize = true {{ template \"retention\" . }} Here we define a template retention that we use twice. When you ask for a configuration of a profile, either src or other the template will change all occurrences of { .Profile.Name } to the name of the profile, no matter where it is inside the file.\n% resticprofile -c examples/parse-error.toml -n src show 2020/11/06 21:39:48 cannot load configuration file: cannot parse toml configuration: While parsing config: (35, 6): duplicated tables exit status 1 Run the command again, this time asking a display of the compiled version of the configuration:\n% resticprofile -c examples/parse-error.toml -n src --trace show 2020/11/06 21:48:20 resticprofile 0.10.0-dev compiled with go1.15.3 2020/11/06 21:48:20 Resulting configuration for profile 'default': ==================== 1: 2: 3: [src] 4: password-file = \"/Users/CP/go/src/resticprofile/examples/default-key\" 5: repository = \"/backup/Friday\" 6: lock = \"$HOME/resticprofile-profile-default.lock\" 7: initialize = true 8: 9: [src.backup] 10: source = \"/Users/CP/go/src\" 11: check-before = true 12: exclude = [\"/**/.git\"] 13: exclude-caches = true 14: tag = [\"default\", \"dev\"] 15: 16: 17: [default.retention] 18: after-backup = true 19: before-backup = false 20: compact = false 21: keep-within = \"30d\" 22: prune = true 23: 24: 25: [src.snapshots] 26: tag = [\"default\", \"dev\"] 27: 28: [other] 29: password-file = \"/Users/CP/go/src/resticprofile/examples/default-key\" 30: repository = \"/backup/Friday\" 31: lock = \"$HOME/resticprofile-profile-default.lock\" 32: initialize = true 33: 34: 35: [default.retention] 36: after-backup = true 37: before-backup = false 38: compact = false 39: keep-within = \"30d\" 40: prune = true 41: 42: ==================== 2020/11/06 21:48:20 cannot load configuration file: cannot parse toml configuration: While parsing config: (35, 6): duplicated tables exit status 1 As you can see in lines 17 and 35, there are 2 sections of the same name. They could be both called [src.retention], but actually the reason why they’re both called [default.retention] is that resticprofile is doing a first pass to load the [global] section using a profile name of default.\nThe fix for this configuration is very simple though, just remove the section name from the template:\n{{ define \"retention\" }} after-backup = true before-backup = false compact = false keep-within = \"30d\" prune = true {{ end }} [src] password-file = \"{{ .ConfigDir }}/{{ .Profile.Name }}-key\" repository = \"/backup/{{ .Now.Weekday }}\" lock = \"$HOME/resticprofile-profile-{{ .Profile.Name }}.lock\" initialize = true [src.backup] source = \"{{ .Env.HOME }}/go/src\" check-before = true exclude = [\"/**/.git\"] exclude-caches = true tag = [\"{{ .Profile.Name }}\", \"dev\"] [src.retention] {{ template \"retention\" . }} [src.snapshots] tag = [\"{{ .Profile.Name }}\", \"dev\"] [other] password-file = \"{{ .ConfigDir }}/{{ .Profile.Name }}-key\" repository = \"/backup/{{ .Now.Weekday }}\" lock = \"$HOME/resticprofile-profile-{{ .Profile.Name }}.lock\" initialize = true [other.retention] {{ template \"retention\" . }} And now you no longer end up with duplicated sections.\nDocumentation on template, variable expansion and other configuration scripting There are a lot more you can do with configuration templates. If you’re brave enough, you can read the full documentation of the Go templates.\nFor a more end-user kind of documentation, you can also read hugo documentation on templates which is using the same Go implementation, but don’t talk much about the developer side of it. Please note there are some functions only made available by hugo though.\n","description":"","tags":null,"title":"Configuration templates","uri":"/configuration/templates/"},{"content":"Warnings from restic Until version 0.13.0, resticprofile was always considering a restic warning as an error. This will remain the default. But the version 0.13.0 introduced a parameter to avoid this behaviour and consider that the backup was successful instead.\nA restic warning occurs when it cannot read some files, but a snapshot was successfully created.\nLet me introduce no-error-on-warning toml yaml hcl json [profile] inherit = \"default\" [profile.backup] no-error-on-warning = true profile: inherit: default backup: no-error-on-warning: true \"profile\" = { \"inherit\" = \"default\" \"backup\" = { \"no-error-on-warning\" = true } } { \"profile\": { \"inherit\": \"default\", \"backup\": { \"no-error-on-warning\": true } } } ","description":"","tags":null,"title":"Warnings","uri":"/configuration/warnings/"},{"content":"Status file for easy monitoring If you need to escalate the result of your backup to a monitoring system, you can definitely use the run-after and run-after-fail scripting.\nBut sometimes we just need something simple that a monitoring system can regularly check. For that matter, resticprofile can generate a simple JSON file with the details of the latest backup/forget/check command. For example I have a Zabbix agent checking this file once a day, and so you can hook up any monitoring system that can interpret a JSON file.\nIn your profile, you simply need to add a new parameter, which is the location of your status file\ntoml yaml hcl json [profile] status-file = \"backup-status.json\" profile: status-file: backup-status.json \"profile\" { \"status-file\" = \"backup-status.json\" } { \"profile\": { \"status-file\": \"backup-status.json\" } } Here’s an example of a generated file, where you can see that the last check failed, whereas the last backup succeeded:\n{ \"profiles\": { \"self\": { \"backup\": { \"success\": true, \"time\": \"2021-03-24T16:36:56.831077Z\", \"error\": \"\", \"stderr\": \"\", \"duration\": 16, \"files_new\": 215, \"files_changed\": 0, \"files_unmodified\": 0, \"dirs_new\": 58, \"dirs_changed\": 0, \"dirs_unmodified\": 0, \"files_total\": 215, \"bytes_added\": 296536447, \"bytes_total\": 362952485 }, \"check\": { \"success\": false, \"time\": \"2021-03-24T15:23:40.270689Z\", \"error\": \"exit status 1\", \"stderr\": \"unable to create lock in backend: repository is already locked exclusively by PID 18534 on dingo by cloud_user (UID 501, GID 20)\\nlock was created at 2021-03-24 15:23:29 (10.42277s ago)\\nstorage ID 1bf636d2\\nthe `unlock` command can be used to remove stale locks\\n\", \"duration\": 1 } } } } ⚠️ Extended status In the backup section above you can see some fields like files_new, files_total, etc. This information is only available when resticprofile’s output is either not sent to the terminal (e.g. redirected) or when you add the flag extended-status to your backup configuration.\nThis is a technical limitation to ensure restic displays terminal output correctly.\nextended-status or stdout redirection is not needed for these fields:\nsuccess time error stderr duration extended-status is not set by default because it hides any output from restic\ntoml yaml hcl json [profile] inherit = \"default\" status-file = \"/home/backup/status.json\" [profile.backup] extended-status = true source = \"/go\" exclude = [ \"/**/.git/\" ] profile: inherit: default status-file: /home/backup/status.json backup: extended-status: true source: /go exclude: - \"/**/.git/\" \"profile\" = { \"inherit\" = \"default\" \"status-file\" = \"/home/backup/status.json\" \"backup\" = { \"extended-status\" = true \"source\" = \"/go\" \"exclude\" = [\"/**/.git/\"] } } { \"profile\": { \"inherit\": \"default\", \"status-file\": \"/home/backup/status.json\", \"backup\": { \"extended-status\": true, \"source\": \"/go\", \"exclude\": [ \"/**/.git/\" ] } } } ","description":"","tags":null,"title":"Status","uri":"/status/"},{"content":"Using resticprofile from a docker image You can run resticprofile inside a docker container. It is probably the easiest way to install resticprofile (and restic at the same time) and keep it updated.\nBut be aware that you will need to mount your backup source (and destination if it’s local) as a docker volume. Depending on your operating system, the backup might be slower. Volumes mounted on a mac OS host are well known for being quite slow.\nBy default, the resticprofile container starts at /resticprofile. So you can feed a configuration this way:\n$ docker run -it --rm -v $PWD/examples:/resticprofile creativeprojects/resticprofile You can list your profiles:\n$ docker run -it --rm -v $PWD/examples:/resticprofile creativeprojects/resticprofile profiles Container host name Each time a container is started, it gets assigned a new random name.\nYou might want to force a hostname when starting your container via docker run (flags -h or --hostname):\n$ docker run -it --rm -v $PWD:/resticprofile -h my-hostname creativeprojects/resticprofile -n profile backup Platforms Starting from version 0.18.0, the resticprofile docker image is available in these 2 platforms:\nlinux/amd64 linux/arm64/v8 (compatible with raspberry pi 64bits) rclone Starting from version 0.18.0, the resticprofile docker image also includes rclone.\n","description":"","tags":["v0.18.0"],"title":"Docker","uri":"/installation/docker/"},{"content":"Examples of scheduling commands under Windows If you create a task with user permission under Windows, you will need to enter your password to validate the task. It’s a requirement of the task scheduler. I’m inviting you to review the code to make sure I’m not emailing your password to myself. Seriously you shouldn’t trust anyone.\nExample of the schedule command under Windows (with git bash):\n$ resticprofile -c examples/windows.yaml -n self schedule Analyzing backup schedule 1/2 ================================= Original form: Mon..Fri *:00,15,30,45 Normalized form: Mon..Fri *-*-* *:00,15,30,45:00 Next elapse: Wed Jul 22 21:30:00 BST 2020 (in UTC): Wed Jul 22 20:30:00 UTC 2020 From now: 1m52s left Analyzing backup schedule 2/2 ================================= Original form: Sat,Sun 0,12:00 Normalized form: Sat,Sun *-*-* 00,12:00:00 Next elapse: Sat Jul 25 00:00:00 BST 2020 (in UTC): Fri Jul 24 23:00:00 UTC 2020 From now: 50h31m52s left Creating task for user Creative Projects Task Scheduler requires your Windows password to validate the task: 2020/07/22 21:28:15 scheduled job self/backup created Analyzing retention schedule 1/1 ================================= Original form: sun 3:30 Normalized form: Sun *-*-* 03:30:00 Next elapse: Sun Jul 26 03:30:00 BST 2020 (in UTC): Sun Jul 26 02:30:00 UTC 2020 From now: 78h1m44s left 2020/07/22 21:28:22 scheduled job self/retention created To see the status of the triggers, you can use the status command:\n$ resticprofile -c examples/windows.yaml -n self status Analyzing backup schedule 1/2 ================================= Original form: Mon..Fri *:00,15,30,45 Normalized form: Mon..Fri *-*-* *:00,15,30,45:00 Next elapse: Wed Jul 22 21:30:00 BST 2020 (in UTC): Wed Jul 22 20:30:00 UTC 2020 From now: 14s left Analyzing backup schedule 2/2 ================================= Original form: Sat,Sun 0,12:* Normalized form: Sat,Sun *-*-* 00,12:*:00 Next elapse: Sat Jul 25 00:00:00 BST 2020 (in UTC): Fri Jul 24 23:00:00 UTC 2020 From now: 50h29m46s left Task: \\resticprofile backup\\self backup User: Creative Projects Working Dir: D:\\Source\\resticprofile Exec: D:\\Source\\resticprofile\\resticprofile.exe --no-ansi --config examples/windows.yaml --name self backup Enabled: true State: ready Missed runs: 0 Last Run Time: 2020-07-22 21:30:00 +0000 UTC Last Result: 0 Next Run Time: 2020-07-22 21:45:00 +0000 UTC Analyzing retention schedule 1/1 ================================= Original form: sun 3:30 Normalized form: Sun *-*-* 03:30:00 Next elapse: Sun Jul 26 03:30:00 BST 2020 (in UTC): Sun Jul 26 02:30:00 UTC 2020 From now: 77h59m46s left Task: \\resticprofile backup\\self retention User: Creative Projects Working Dir: D:\\Source\\resticprofile Exec: D:\\Source\\resticprofile\\resticprofile.exe --no-ansi --config examples/windows.yaml --name self forget Enabled: true State: ready Missed runs: 0 Last Run Time: 1999-11-30 00:00:00 +0000 UTC Last Result: 267011 Next Run Time: 2020-07-26 03:30:00 +0000 UTC To remove the schedule, use the unschedule command:\n$ resticprofile -c examples/windows.yaml -n self unschedule 2020/07/22 21:34:51 scheduled job self/backup removed 2020/07/22 21:34:51 scheduled job self/retention removed Examples of scheduling commands under Linux With this example of configuration for Linux:\ntoml yaml hcl json [default] password-file = \"key\" repository = \"/tmp/backup\" [test1] inherit = \"default\" [test1.backup] source = \"./\" schedule = \"*:00,15,30,45\" schedule-permission = \"user\" schedule-lock-wait = \"15m\" [test1.check] schedule = \"*-*-1\" schedule-permission = \"user\" schedule-lock-wait = \"15m\" default: password-file: key repository: /tmp/backup test1: inherit: default backup: source: ./ schedule: \"*:00,15,30,45\" schedule-permission: user schedule-lock-wait: 15m check: schedule: \"*-*-1\" schedule-permission: user schedule-lock-wait: 15m \"default\" = { \"password-file\" = \"key\" \"repository\" = \"/tmp/backup\" } \"test1\" = { \"inherit\" = \"default\" \"backup\" = { \"source\" = \"./\" \"schedule\" = \"*:00,15,30,45\" \"schedule-permission\" = \"user\" \"schedule-lock-wait\" = \"15m\" } \"check\" = { \"schedule\" = \"*-*-1\" \"schedule-permission\" = \"user\" \"schedule-lock-wait\" = \"15m\" } } { \"default\": { \"password-file\": \"key\", \"repository\": \"/tmp/backup\" }, \"test1\": { \"inherit\": \"default\", \"backup\": { \"source\": \"./\", \"schedule\": \"*:00,15,30,45\", \"schedule-permission\": \"user\", \"schedule-lock-wait\": \"15m\" }, \"check\": { \"schedule\": \"*-*-1\", \"schedule-permission\": \"user\", \"schedule-lock-wait\": \"15m\" } } } $ resticprofile -c examples/linux.yaml -n test1 schedule Analyzing backup schedule 1/1 ================================= Original form: *:00,15,30,45 Normalized form: *-*-* *:00,15,30,45:00 Next elapse: Thu 2020-07-23 17:15:00 BST (in UTC): Thu 2020-07-23 16:15:00 UTC From now: 6min left 2020/07/23 17:08:51 writing /home/user/.config/systemd/user/resticprofile-backup@profile-test1.service 2020/07/23 17:08:51 writing /home/user/.config/systemd/user/resticprofile-backup@profile-test1.timer Created symlink /home/user/.config/systemd/user/timers.target.wants/resticprofile-backup@profile-test1.timer → /home/user/.config/systemd/user/resticprofile-backup@profile-test1.timer. 2020/07/23 17:08:51 scheduled job test1/backup created Analyzing check schedule 1/1 ================================= Original form: *-*-1 Normalized form: *-*-01 00:00:00 Next elapse: Sat 2020-08-01 00:00:00 BST (in UTC): Fri 2020-07-31 23:00:00 UTC From now: 1 weeks 1 days left 2020/07/23 17:08:51 writing /home/user/.config/systemd/user/resticprofile-check@profile-test1.service 2020/07/23 17:08:51 writing /home/user/.config/systemd/user/resticprofile-check@profile-test1.timer Created symlink /home/user/.config/systemd/user/timers.target.wants/resticprofile-check@profile-test1.timer → /home/user/.config/systemd/user/resticprofile-check@profile-test1.timer. 2020/07/23 17:08:51 scheduled job test1/check created The status command shows a combination of journalctl displaying errors (only) in the last month and systemctl status:\n$ resticprofile -c examples/linux.yaml -n test1 status Analyzing backup schedule 1/1 ================================= Original form: *:00,15,30,45 Normalized form: *-*-* *:00,15,30,45:00 Next elapse: Tue 2020-07-28 15:15:00 BST (in UTC): Tue 2020-07-28 14:15:00 UTC From now: 4min 44s left Recent log (\u003e= warning in the last month) ========================================== -- Logs begin at Wed 2020-06-17 11:09:19 BST, end at Tue 2020-07-28 15:10:10 BST. -- Jul 27 20:48:01 Desktop76 systemd[2986]: Failed to start resticprofile backup for profile test1 in examples/linux.yaml. Jul 27 21:00:55 Desktop76 systemd[2986]: Failed to start resticprofile backup for profile test1 in examples/linux.yaml. Jul 27 21:15:34 Desktop76 systemd[2986]: Failed to start resticprofile backup for profile test1 in examples/linux.yaml. Systemd timer status ===================== ● resticprofile-backup@profile-test1.timer - backup timer for profile test1 in examples/linux.yaml Loaded: loaded (/home/user/.config/systemd/user/resticprofile-backup@profile-test1.timer; enabled; vendor preset: enabled) Active: active (waiting) since Tue 2020-07-28 15:10:06 BST; 8s ago Trigger: Tue 2020-07-28 15:15:00 BST; 4min 44s left Jul 28 15:10:06 Desktop76 systemd[2951]: Started backup timer for profile test1 in examples/linux.yaml. Analyzing check schedule 1/1 ================================= Original form: *-*-1 Normalized form: *-*-01 00:00:00 Next elapse: Sat 2020-08-01 00:00:00 BST (in UTC): Fri 2020-07-31 23:00:00 UTC From now: 3 days left Recent log (\u003e= warning in the last month) ========================================== -- Logs begin at Wed 2020-06-17 11:09:19 BST, end at Tue 2020-07-28 15:10:10 BST. -- Jul 27 19:39:59 Desktop76 systemd[2986]: Failed to start resticprofile check for profile test1 in examples/linux.yaml. Systemd timer status ===================== ● resticprofile-check@profile-test1.timer - check timer for profile test1 in examples/linux.yaml Loaded: loaded (/home/user/.config/systemd/user/resticprofile-check@profile-test1.timer; enabled; vendor preset: enabled) Active: active (waiting) since Tue 2020-07-28 15:10:07 BST; 7s ago Trigger: Sat 2020-08-01 00:00:00 BST; 3 days left Jul 28 15:10:07 Desktop76 systemd[2951]: Started check timer for profile test1 in examples/linux.yaml. And unschedule:\n$ resticprofile -c examples/linux.yaml -n test1 unschedule Removed /home/user/.config/systemd/user/timers.target.wants/resticprofile-backup@profile-test1.timer. 2020/07/23 17:13:42 scheduled job test1/backup removed Removed /home/user/.config/systemd/user/timers.target.wants/resticprofile-check@profile-test1.timer. 2020/07/23 17:13:42 scheduled job test1/check removed Examples of scheduling commands under macOS macOS has a very tight protection system when running scheduled tasks (also called agents).\nUnder macOS, resticprofile is asking if you want to start a profile right now so you can give the access needed to the task, which consists on a few popup windows (you can disable this behavior by adding the flag --no-start after the schedule command).\nHere’s an example of scheduling a backup to Azure (which needs network access):\n% resticprofile -v -c examples/private/azure.yaml -n self schedule Analyzing backup schedule 1/1 ================================= Original form: *:0,15,30,45:00 Normalized form: *-*-* *:00,15,30,45:00 Next elapse: Tue Jul 28 23:00:00 BST 2020 (in UTC): Tue Jul 28 22:00:00 UTC 2020 From now: 2m34s left By default, a macOS agent access is restricted. If you leave it to start in the background it's likely to fail. You have to start it manually the first time to accept the requests for access: % launchctl start local.resticprofile.self.backup Do you want to start it now? (Y/n): 2020/07/28 22:57:26 scheduled job self/backup created Right after you started the profile, you should get some popup asking you to grant access to various files/folders/network.\nIf you backup your files to an external repository on a network, you should get this popup window:\nNote: If you prefer not being asked, you can add the --no-start flag like so:\n% resticprofile -v -c examples/private/azure.yaml -n self schedule --no-start ","description":"","tags":null,"title":"Schedule Examples","uri":"/schedules/examples/"},{"content":"Contributions Please share your resticprofile recipes, fancy configuration files, or tips and tricks.\nI have created a contributions section for that matter.\nansible playbook shell completion export status to grafana send email on systemd timer error get backup status information in zabbix ","description":"","tags":null,"title":"Contributions","uri":"/contributions/"},{"content":"This feature is available for:\nmacOS Windows Linux with systemd (logind) There’s a global parameter called prevent-sleep that you can set to true, and resticprofile will prevent your system from idle sleeping.\nPlease note:\nit will not prevent a sleep if the system is running on batteries it will not prevent a sleep triggered by a user action: using the sleep button, closing the laptop lid, etc. ","description":"","tags":["v0.19.0"],"title":"Preventing system sleep","uri":"/configuration/sleep/"},{"content":"Configuration file reference Section global global is a fixed section name, at the root of the configuration file\nInfo None of these flags are directly passed on to the restic command line\nName Type Default Notes ionice true / false false ionice-class integer 0 ionice-level integer 0 nice true / false OR integer 0 priority string Normal values are Idle, Background, Low, Normal, High, Highest default-command string snapshots initialize true / false false auto-initialize a repository restic-binary string full path of the restic program restic-lock-retry-after duration 1 1 minute see locks restic-stale-lock-age duration 1 2 hours see locks min-memory integer (MB) 100MB see memory shell string OS specific shell binary to run commands scheduler string crond is the only non-default value systemd-unit-template string file containing a go template to generate systemd unit file - see systemd templates systemd-timer-template string file containing a go template to generate systemd timer file - see systemd templates send-timeout duration 1 30 seconds timeout when sending messages to a webhook - see HTTP Hooks ca-certificates string, or list of strings certificates (file in PEM format) to authenticate HTTP servers - see HTTP Hooks prevent-sleep true / false false prevent the system from sleeping - see Preventing system sleep Profile sections The name of this section is the name of your profile.\nNote You cannot use the names global or groups.\nFlags used by resticprofile only\ninherit: string description: string initialize: true / false lock: string: specify a local lockfile force-inactive-lock: true / false run-before: string OR list of strings run-after: string OR list of strings run-after-fail: string OR list of strings run-finally: string OR list of strings status-file: string prometheus-save-to-file: string prometheus-push: string Flags passed to the restic command line\ncacert: string cache-dir: string cleanup-cache: true / false json: true / false key-hint: string limit-download: integer limit-upload: integer no-cache: true / false no-lock: true / false option: string OR list of strings password-command: string password-file: string quiet: true / false repository: string (will be passed as ‘repo’ to the command line) repository-file: string tls-client-cert: string verbose: true / false OR integer [[profile.stream-error]]\npattern: regex (pattern matching stderr of restic) run: string (command to run when stderr line is matched) max-runs: number min-matches: number [profile.backup]\nFlags used by resticprofile only\nrun-before: string OR list of strings run-after: string OR list of strings run-after-fail: string OR list of strings run-finally: string OR list of strings check-before: true / false check-after: true / false schedule: string OR list of strings schedule-permission: string (user or system) schedule-lock-mode: string (default, fail or ignore) schedule-lock-wait: duration schedule-log: string stdin-command: string OR list of strings extended-status: true / false no-error-on-warning: true / false Flags passed to the restic command line\nexclude: string OR list of strings exclude-caches: true / false exclude-file: string OR list of strings exclude-if-present: string OR list of strings files-from: string OR list of strings force: true / false host: true / false OR string iexclude: string OR list of strings ignore-inode: true / false one-file-system: true / false parent: string stdin: true / false stdin-filename: string tag: string OR list of strings time: string with-atime: true / false source: string OR list of strings [profile.retention]\nFlags used by resticprofile only\nbefore-backup: true / false after-backup: true / false schedule: string OR list of strings schedule-permission: string (user or system) schedule-lock-mode: string (default, fail or ignore) schedule-lock-wait: duration schedule-log: string Flags passed to the restic command line\nkeep-last: integer keep-hourly: integer keep-daily: integer keep-weekly: integer keep-monthly: integer keep-yearly: integer keep-within: string keep-tag: string OR list of strings host: true / false OR string tag: true / false, string OR list of strings path: true / false, string OR list of strings compact: true / false group-by: string dry-run: true / false prune: true / false [profile.snapshots]\nFlags passed to the restic command line\ncompact: true / false group-by: string host: true / false OR string last: true / false path: true / false, string OR list of strings tag: true / false, string OR list of strings [profile.forget]\nFlags used by resticprofile only\nschedule: string OR list of strings schedule-permission: string (user or system) schedule-lock-mode: string (default, fail or ignore) schedule-lock-wait: duration schedule-log: string Flags passed to the restic command line\nkeep-last: integer keep-hourly: integer keep-daily: integer keep-weekly: integer keep-monthly: integer keep-yearly: integer keep-within: string keep-tag: string OR list of strings host: true / false OR string tag: true / false, string OR list of strings path: true / false, string OR list of strings compact: true / false group-by: string dry-run: true / false prune: true / false [profile.check]\nFlags used by resticprofile only\nschedule: string OR list of strings schedule-permission: string (user or system) schedule-lock-mode: string (default, fail or ignore) schedule-lock-wait: duration schedule-log: string Flags passed to the restic command line\ncheck-unused: true / false read-data: true / false read-data-subset: string with-cache: true / false [profile.prune]\nFlags used by resticprofile only\nschedule: string OR list of strings schedule-permission: string (user or system) schedule-lock-mode: string (default, fail or ignore) schedule-lock-wait: duration schedule-log: string [profile.mount]\nFlags passed to the restic command line\nallow-other: true / false allow-root: true / false host: true / false OR string no-default-permissions: true / false owner-root: true / false path: true / false, string OR list of strings snapshot-template: string tag: true / false, string OR list of strings [profile.copy]\nFlags used by resticprofile only\ninitialize: true / false run-before: string OR list of strings run-after: string OR list of strings run-after-fail: string OR list of strings run-finally: string OR list of strings schedule: string OR list of strings schedule-permission: string (user or system) schedule-lock-mode: string (default, fail or ignore) schedule-lock-wait: duration schedule-log: string Flags passed to the restic command line\nkey-hint: string (will be passed as ‘key-hint2’) password-command: command (will be passed as ‘password-command2’) password-file: string (will be passed as ‘password-file2’) host: true / false OR string path: true / false, string OR list of strings repository: repository (will be passed as ‘repo2’) repository-file: string (will be passed as ‘repository-file2’) tag: true / false, string OR list of strings [profile.dump]\nFlags passed to the restic command line\nhost: true / false OR string path: true / false, string OR list of strings tag: true / false, string OR list of strings [profile.find]\nFlags passed to the restic command line\nhost: true / false OR string path: true / false, string OR list of strings tag: true / false, string OR list of strings [profile.ls]\nFlags passed to the restic command line\nhost: true / false OR string path: true / false, string OR list of strings tag: true / false, string OR list of strings [profile.restore]\nFlags passed to the restic command line\nhost: true / false OR string path: true / false, string OR list of strings tag: true / false, string OR list of strings [profile.stats]\nFlags passed to the restic command line\nhost: true / false OR string path: true / false, string OR list of strings tag: true / false, string OR list of strings [profile.tag]\nFlags passed to the restic command line\nhost: true / false OR string path: true / false, string OR list of strings tag: true / false, string OR list of strings A duration string is a possibly signed sequence of decimal numbers, each with optional fraction and a unit suffix, such as “300ms”, “-1.5h” or “2h45m”. Valid time units are “ns”, “us” (or “µs”), “ms”, “s”, “m”, “h”. ↩︎ ↩︎ ↩︎\n","description":"","tags":null,"title":"Reference","uri":"/configuration/reference/"},{"content":" Note The configuration file format v2 is in preview right now. You can try to use it since v0.17.0 but it’s for testing and feedback only.\nIntroduction The current file format was decided at the time resticprofile was only using the toml format. Nesting pieces of configuration in blocks is not the easiest as you have to specify the whole path in the block:\n[profile] [profile.backup] source = \"some path\" Since then, I believe the yaml format is preferred over toml.\nMy proposal is to make a “version 2” of the configuration file, the current file format is “version 1”.\nBoth formats will continue to be valid:\nif no version is specified, the “version 1” is used. This is the current format if a version is specified (2) the new format will be expected New format availability The new format “version 2” will be available for:\nTOML YAML JSON It won’t be available for HCL. This may not be definitive, but it’s not widely used and it’s becoming more and more difficult to support HCL.\nHCL can still be used as is, “version = 1”\nNew format specifications I will show the specification using the yaml as examples, because it’s probably the most readable format.\nversion --- version: 2 global The global section does not change. We’ll keep all the global configuration in there.\n--- global: default-command: snapshots initialize: false priority: low profiles All your profiles will be nested under a profiles section. Please note the schedules are no longer described inside the profile, but in a separate section schedules (see the following example).\nprofiles: default: env: tmp: /tmp password-file: key repository: /backup documents: inherit: default backup: source: ~/Documents snapshots: tag: - documents groups The list of profiles will be nested under a profiles section, so we can add more configuration to groups later.\ngroups: full: # name of your group profiles: - root - documents - mysql schedules A new schedule section could schedule either a group or a list of profiles.\nschedules: full-backup: # give a name to your schedule group: full schedule: - \"Mon..Fri *:00,15,30,45\" # every 15 minutes on weekdays permission: user run: backup # backup is the default if not specified other: profiles: - root - mysql schedule: - \"Sat,Sun 0,12:00\" # twice a day on week-ends permission: user run: prune This format leaves more space for improvements later (like a repos section maybe?)\nTip You can participate in designing the “version 2” here\n","description":"","tags":["v1.0.0"],"title":"Configuration v2 proposal","uri":"/configuration/v2/"},{"content":"Shell command line completions are provided for bash and zsh.\nTo load the command completions in shell, use:\n# bash eval \"$(resticprofile generate --bash-completion)\" # zsh eval \"$(resticprofile generate --zsh-completion)\" To install them permanently:\n$ resticprofile generate --bash-completion \u003e /etc/bash_completion.d/resticprofile $ chmod +x /etc/bash_completion.d/resticprofile ","description":"","tags":null,"title":"Shell Completion","uri":"/installation/shell/"},{"content":"systemd is a common service manager in use by many Linux distributions. resticprofile has the ability to create systemd timer and service files. systemd can be used in place of cron to schedule backups.\nUser systemd units are created under the user’s systemd profile (~/.config/systemd/user).\nSystem units are created in /etc/systemd/system\nsystemd calendars resticprofile uses systemd OnCalendar format to schedule events.\nTesting systemd calendars can be done with the systemd-analyze application. systemd-analyze will display when the next trigger will happen:\n$ systemd-analyze calendar 'daily' Original form: daily Normalized form: *-*-* 00:00:00 Next elapse: Sat 2020-04-18 00:00:00 CDT (in UTC): Sat 2020-04-18 05:00:00 UTC From now: 10h left First time schedule When you schedule a profile with the schedule command, under the hood resticprofile will\ncreate the unit file (of type notify) create the timer file run systemctl daemon-reload (only if schedule-permission is set to system) run systemctl enable run systemctl start How to change the default systemd unit and timer file using a template By default, an opinionated systemd unit and timer are automatically generated by resticprofile.\nSince version 0.16.0, you now can describe your own templates if you need to add things in it (typically like sending an email on failure).\nThe format used is a go template and you need to specify your own unit and/or timer file in the global section of the configuration (it will apply to all your profiles):\ntoml yaml hcl json [global] systemd-unit-template = \"service.tmpl\" systemd-timer-template = \"timer.tmpl\" --- global: systemd-unit-template: service.tmpl systemd-timer-template: timer.tmpl \"global\" = { \"systemd-unit-template\" = \"service.tmpl\" \"systemd-timer-template\" = \"timer.tmpl\" } { \"global\": { \"systemd-unit-template\": \"service.tmpl\", \"systemd-timer-template\": \"timer.tmpl\" } } Here are the defaults if you don’t specify your own (which I recommend to use as a starting point for your own templates)\nDefault unit file [Unit] Description={{ .JobDescription }} [Service] Type=notify WorkingDirectory={{ .WorkingDirectory }} ExecStart={{ .CommandLine }} {{ if .Nice }}Nice={{ .Nice }}{{ end }} {{ range .Environment -}} Environment=\"{{ . }}\" {{ end -}} Default timer file [Unit] Description={{ .TimerDescription }} [Timer] {{ range .OnCalendar -}} OnCalendar={{ . }} {{ end -}} Unit={{ .SystemdProfile }} Persistent=true [Install] WantedBy=timers.target Template variables These are available for both the unit and timer templates:\nJobDescription string TimerDescription string WorkingDirectory string CommandLine string OnCalendar array of strings SystemdProfile string Nice integer Environment array of strings ","description":"","tags":null,"title":"Systemd","uri":"/schedules/systemd/"},{"content":"launchd is the service manager on macOS. resticprofile can schedule a profile via a user agent or a daemon in launchd.\nUser agent A user agent is generated when you set schedule-permission to user.\nIt consists of a plist file in the folder ~/Library/LaunchAgents:\nA user agent mostly runs with the privileges of the user. But if you backup some specific files, like your contacts or your calendar for example, you will need to give more permissions to resticprofile and restic.\nFor this to happen, you need to start the agent or daemon from a console window first (resticprofile will ask if you want to do so)\nIf your profile is a backup profile called remote, the command to run manually is:\n% launchctl start local.resticprofile.remote.backup Once you grant the permission, the background agents/daemon will be able to run normally.\nThere’s some information in this thread: https://github.com/restic/restic/issues/2051\nTODO: I’m going to try to compile a comprehensive how-to guide from all the information from the thread. Stay tuned!\nSpecial case of schedule-permission=user with sudo Please note if you schedule a user agent while running resticprofile with sudo: the user agent will be registered to the root user, and not your initial user context. It means you can only see it (status) and remove it (unschedule) via sudo.\nDaemon A launchd daemon is generated when you set schedule-permission to system.\nIt consists of a plist file in the folder /Library/LaunchDaemons. You have to run resticprofile with sudo to schedule, check the status and unschedule the profile.\n","description":"","tags":null,"title":"Launchd","uri":"/schedules/launchd/"},{"content":"","description":"","tags":null,"title":"Tags","uri":"/tags/"},{"content":"","description":"","tags":null,"title":"v0.18.0","uri":"/tags/v0.18.0/"},{"content":"","description":"","tags":null,"title":"Categories","uri":"/categories/"},{"content":"","description":"","tags":null,"title":"v0.17.0","uri":"/tags/v0.17.0/"},{"content":"","description":"","tags":null,"title":"v0.19.0","uri":"/tags/v0.19.0/"},{"content":"","description":"","tags":null,"title":"v1.0.0","uri":"/tags/v1.0.0/"}]