// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/creativeprojects/resticprofile/calendar"
	"github.com/creativeprojects/resticprofile/schedule"
	"github.com/creativeprojects/resticprofile/user"
	mock "github.com/stretchr/testify/mock"
)

// NewHandler creates a new instance of Handler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *Handler {
	mock := &Handler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Handler is an autogenerated mock type for the Handler type
type Handler struct {
	mock.Mock
}

type Handler_Expecter struct {
	mock *mock.Mock
}

func (_m *Handler) EXPECT() *Handler_Expecter {
	return &Handler_Expecter{mock: &_m.Mock}
}

// CheckPermission provides a mock function for the type Handler
func (_mock *Handler) CheckPermission(user1 user.User, p schedule.Permission) bool {
	ret := _mock.Called(user1, p)

	if len(ret) == 0 {
		panic("no return value specified for CheckPermission")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(user.User, schedule.Permission) bool); ok {
		r0 = returnFunc(user1, p)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// Handler_CheckPermission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckPermission'
type Handler_CheckPermission_Call struct {
	*mock.Call
}

// CheckPermission is a helper method to define mock.On call
//   - user1 user.User
//   - p schedule.Permission
func (_e *Handler_Expecter) CheckPermission(user1 interface{}, p interface{}) *Handler_CheckPermission_Call {
	return &Handler_CheckPermission_Call{Call: _e.mock.On("CheckPermission", user1, p)}
}

func (_c *Handler_CheckPermission_Call) Run(run func(user1 user.User, p schedule.Permission)) *Handler_CheckPermission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 user.User
		if args[0] != nil {
			arg0 = args[0].(user.User)
		}
		var arg1 schedule.Permission
		if args[1] != nil {
			arg1 = args[1].(schedule.Permission)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Handler_CheckPermission_Call) Return(b bool) *Handler_CheckPermission_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *Handler_CheckPermission_Call) RunAndReturn(run func(user1 user.User, p schedule.Permission) bool) *Handler_CheckPermission_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function for the type Handler
func (_mock *Handler) Close() {
	_mock.Called()
	return
}

// Handler_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Handler_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *Handler_Expecter) Close() *Handler_Close_Call {
	return &Handler_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *Handler_Close_Call) Run(run func()) *Handler_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Handler_Close_Call) Return() *Handler_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *Handler_Close_Call) RunAndReturn(run func()) *Handler_Close_Call {
	_c.Run(run)
	return _c
}

// CreateJob provides a mock function for the type Handler
func (_mock *Handler) CreateJob(job *schedule.Config, schedules []*calendar.Event, permission schedule.Permission) error {
	ret := _mock.Called(job, schedules, permission)

	if len(ret) == 0 {
		panic("no return value specified for CreateJob")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*schedule.Config, []*calendar.Event, schedule.Permission) error); ok {
		r0 = returnFunc(job, schedules, permission)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Handler_CreateJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateJob'
type Handler_CreateJob_Call struct {
	*mock.Call
}

// CreateJob is a helper method to define mock.On call
//   - job *schedule.Config
//   - schedules []*calendar.Event
//   - permission schedule.Permission
func (_e *Handler_Expecter) CreateJob(job interface{}, schedules interface{}, permission interface{}) *Handler_CreateJob_Call {
	return &Handler_CreateJob_Call{Call: _e.mock.On("CreateJob", job, schedules, permission)}
}

func (_c *Handler_CreateJob_Call) Run(run func(job *schedule.Config, schedules []*calendar.Event, permission schedule.Permission)) *Handler_CreateJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *schedule.Config
		if args[0] != nil {
			arg0 = args[0].(*schedule.Config)
		}
		var arg1 []*calendar.Event
		if args[1] != nil {
			arg1 = args[1].([]*calendar.Event)
		}
		var arg2 schedule.Permission
		if args[2] != nil {
			arg2 = args[2].(schedule.Permission)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *Handler_CreateJob_Call) Return(err error) *Handler_CreateJob_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Handler_CreateJob_Call) RunAndReturn(run func(job *schedule.Config, schedules []*calendar.Event, permission schedule.Permission) error) *Handler_CreateJob_Call {
	_c.Call.Return(run)
	return _c
}

// DetectSchedulePermission provides a mock function for the type Handler
func (_mock *Handler) DetectSchedulePermission(permission schedule.Permission) (schedule.Permission, bool) {
	ret := _mock.Called(permission)

	if len(ret) == 0 {
		panic("no return value specified for DetectSchedulePermission")
	}

	var r0 schedule.Permission
	var r1 bool
	if returnFunc, ok := ret.Get(0).(func(schedule.Permission) (schedule.Permission, bool)); ok {
		return returnFunc(permission)
	}
	if returnFunc, ok := ret.Get(0).(func(schedule.Permission) schedule.Permission); ok {
		r0 = returnFunc(permission)
	} else {
		r0 = ret.Get(0).(schedule.Permission)
	}
	if returnFunc, ok := ret.Get(1).(func(schedule.Permission) bool); ok {
		r1 = returnFunc(permission)
	} else {
		r1 = ret.Get(1).(bool)
	}
	return r0, r1
}

// Handler_DetectSchedulePermission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DetectSchedulePermission'
type Handler_DetectSchedulePermission_Call struct {
	*mock.Call
}

// DetectSchedulePermission is a helper method to define mock.On call
//   - permission schedule.Permission
func (_e *Handler_Expecter) DetectSchedulePermission(permission interface{}) *Handler_DetectSchedulePermission_Call {
	return &Handler_DetectSchedulePermission_Call{Call: _e.mock.On("DetectSchedulePermission", permission)}
}

func (_c *Handler_DetectSchedulePermission_Call) Run(run func(permission schedule.Permission)) *Handler_DetectSchedulePermission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 schedule.Permission
		if args[0] != nil {
			arg0 = args[0].(schedule.Permission)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Handler_DetectSchedulePermission_Call) Return(permission1 schedule.Permission, b bool) *Handler_DetectSchedulePermission_Call {
	_c.Call.Return(permission1, b)
	return _c
}

func (_c *Handler_DetectSchedulePermission_Call) RunAndReturn(run func(permission schedule.Permission) (schedule.Permission, bool)) *Handler_DetectSchedulePermission_Call {
	_c.Call.Return(run)
	return _c
}

// DisplayJobStatus provides a mock function for the type Handler
func (_mock *Handler) DisplayJobStatus(job *schedule.Config) error {
	ret := _mock.Called(job)

	if len(ret) == 0 {
		panic("no return value specified for DisplayJobStatus")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*schedule.Config) error); ok {
		r0 = returnFunc(job)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Handler_DisplayJobStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisplayJobStatus'
type Handler_DisplayJobStatus_Call struct {
	*mock.Call
}

// DisplayJobStatus is a helper method to define mock.On call
//   - job *schedule.Config
func (_e *Handler_Expecter) DisplayJobStatus(job interface{}) *Handler_DisplayJobStatus_Call {
	return &Handler_DisplayJobStatus_Call{Call: _e.mock.On("DisplayJobStatus", job)}
}

func (_c *Handler_DisplayJobStatus_Call) Run(run func(job *schedule.Config)) *Handler_DisplayJobStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *schedule.Config
		if args[0] != nil {
			arg0 = args[0].(*schedule.Config)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Handler_DisplayJobStatus_Call) Return(err error) *Handler_DisplayJobStatus_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Handler_DisplayJobStatus_Call) RunAndReturn(run func(job *schedule.Config) error) *Handler_DisplayJobStatus_Call {
	_c.Call.Return(run)
	return _c
}

// DisplaySchedules provides a mock function for the type Handler
func (_mock *Handler) DisplaySchedules(profile string, command string, schedules []string) error {
	ret := _mock.Called(profile, command, schedules)

	if len(ret) == 0 {
		panic("no return value specified for DisplaySchedules")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string, []string) error); ok {
		r0 = returnFunc(profile, command, schedules)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Handler_DisplaySchedules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisplaySchedules'
type Handler_DisplaySchedules_Call struct {
	*mock.Call
}

// DisplaySchedules is a helper method to define mock.On call
//   - profile string
//   - command string
//   - schedules []string
func (_e *Handler_Expecter) DisplaySchedules(profile interface{}, command interface{}, schedules interface{}) *Handler_DisplaySchedules_Call {
	return &Handler_DisplaySchedules_Call{Call: _e.mock.On("DisplaySchedules", profile, command, schedules)}
}

func (_c *Handler_DisplaySchedules_Call) Run(run func(profile string, command string, schedules []string)) *Handler_DisplaySchedules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []string
		if args[2] != nil {
			arg2 = args[2].([]string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *Handler_DisplaySchedules_Call) Return(err error) *Handler_DisplaySchedules_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Handler_DisplaySchedules_Call) RunAndReturn(run func(profile string, command string, schedules []string) error) *Handler_DisplaySchedules_Call {
	_c.Call.Return(run)
	return _c
}

// DisplayStatus provides a mock function for the type Handler
func (_mock *Handler) DisplayStatus(profileName string) error {
	ret := _mock.Called(profileName)

	if len(ret) == 0 {
		panic("no return value specified for DisplayStatus")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(profileName)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Handler_DisplayStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisplayStatus'
type Handler_DisplayStatus_Call struct {
	*mock.Call
}

// DisplayStatus is a helper method to define mock.On call
//   - profileName string
func (_e *Handler_Expecter) DisplayStatus(profileName interface{}) *Handler_DisplayStatus_Call {
	return &Handler_DisplayStatus_Call{Call: _e.mock.On("DisplayStatus", profileName)}
}

func (_c *Handler_DisplayStatus_Call) Run(run func(profileName string)) *Handler_DisplayStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Handler_DisplayStatus_Call) Return(err error) *Handler_DisplayStatus_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Handler_DisplayStatus_Call) RunAndReturn(run func(profileName string) error) *Handler_DisplayStatus_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function for the type Handler
func (_mock *Handler) Init() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Handler_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type Handler_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
func (_e *Handler_Expecter) Init() *Handler_Init_Call {
	return &Handler_Init_Call{Call: _e.mock.On("Init")}
}

func (_c *Handler_Init_Call) Run(run func()) *Handler_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Handler_Init_Call) Return(err error) *Handler_Init_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Handler_Init_Call) RunAndReturn(run func() error) *Handler_Init_Call {
	_c.Call.Return(run)
	return _c
}

// ParseSchedules provides a mock function for the type Handler
func (_mock *Handler) ParseSchedules(schedules []string) ([]*calendar.Event, error) {
	ret := _mock.Called(schedules)

	if len(ret) == 0 {
		panic("no return value specified for ParseSchedules")
	}

	var r0 []*calendar.Event
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]string) ([]*calendar.Event, error)); ok {
		return returnFunc(schedules)
	}
	if returnFunc, ok := ret.Get(0).(func([]string) []*calendar.Event); ok {
		r0 = returnFunc(schedules)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*calendar.Event)
		}
	}
	if returnFunc, ok := ret.Get(1).(func([]string) error); ok {
		r1 = returnFunc(schedules)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Handler_ParseSchedules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseSchedules'
type Handler_ParseSchedules_Call struct {
	*mock.Call
}

// ParseSchedules is a helper method to define mock.On call
//   - schedules []string
func (_e *Handler_Expecter) ParseSchedules(schedules interface{}) *Handler_ParseSchedules_Call {
	return &Handler_ParseSchedules_Call{Call: _e.mock.On("ParseSchedules", schedules)}
}

func (_c *Handler_ParseSchedules_Call) Run(run func(schedules []string)) *Handler_ParseSchedules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []string
		if args[0] != nil {
			arg0 = args[0].([]string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Handler_ParseSchedules_Call) Return(events []*calendar.Event, err error) *Handler_ParseSchedules_Call {
	_c.Call.Return(events, err)
	return _c
}

func (_c *Handler_ParseSchedules_Call) RunAndReturn(run func(schedules []string) ([]*calendar.Event, error)) *Handler_ParseSchedules_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveJob provides a mock function for the type Handler
func (_mock *Handler) RemoveJob(job *schedule.Config, permission schedule.Permission) error {
	ret := _mock.Called(job, permission)

	if len(ret) == 0 {
		panic("no return value specified for RemoveJob")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*schedule.Config, schedule.Permission) error); ok {
		r0 = returnFunc(job, permission)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Handler_RemoveJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveJob'
type Handler_RemoveJob_Call struct {
	*mock.Call
}

// RemoveJob is a helper method to define mock.On call
//   - job *schedule.Config
//   - permission schedule.Permission
func (_e *Handler_Expecter) RemoveJob(job interface{}, permission interface{}) *Handler_RemoveJob_Call {
	return &Handler_RemoveJob_Call{Call: _e.mock.On("RemoveJob", job, permission)}
}

func (_c *Handler_RemoveJob_Call) Run(run func(job *schedule.Config, permission schedule.Permission)) *Handler_RemoveJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *schedule.Config
		if args[0] != nil {
			arg0 = args[0].(*schedule.Config)
		}
		var arg1 schedule.Permission
		if args[1] != nil {
			arg1 = args[1].(schedule.Permission)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Handler_RemoveJob_Call) Return(err error) *Handler_RemoveJob_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Handler_RemoveJob_Call) RunAndReturn(run func(job *schedule.Config, permission schedule.Permission) error) *Handler_RemoveJob_Call {
	_c.Call.Return(run)
	return _c
}

// Scheduled provides a mock function for the type Handler
func (_mock *Handler) Scheduled(profileName string) ([]schedule.Config, error) {
	ret := _mock.Called(profileName)

	if len(ret) == 0 {
		panic("no return value specified for Scheduled")
	}

	var r0 []schedule.Config
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]schedule.Config, error)); ok {
		return returnFunc(profileName)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []schedule.Config); ok {
		r0 = returnFunc(profileName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]schedule.Config)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(profileName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Handler_Scheduled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Scheduled'
type Handler_Scheduled_Call struct {
	*mock.Call
}

// Scheduled is a helper method to define mock.On call
//   - profileName string
func (_e *Handler_Expecter) Scheduled(profileName interface{}) *Handler_Scheduled_Call {
	return &Handler_Scheduled_Call{Call: _e.mock.On("Scheduled", profileName)}
}

func (_c *Handler_Scheduled_Call) Run(run func(profileName string)) *Handler_Scheduled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Handler_Scheduled_Call) Return(configs []schedule.Config, err error) *Handler_Scheduled_Call {
	_c.Call.Return(configs, err)
	return _c
}

func (_c *Handler_Scheduled_Call) RunAndReturn(run func(profileName string) ([]schedule.Config, error)) *Handler_Scheduled_Call {
	_c.Call.Return(run)
	return _c
}
